window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "kuzu", "modulename": "kuzu", "kind": "module", "doc": "<h1 id=\"kuzu-python-api-bindings\">K\u00f9zu Python API bindings.</h1>\n\n<p>This package provides a Python API for K\u00f9zu graph database management system.</p>\n\n<p>To install the package, run:</p>\n\n<pre><code>python3 -m pip install kuzu\n</code></pre>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">kuzu</span>\n\n<span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">kuzu</span><span class=\"o\">.</span><span class=\"n\">Database</span><span class=\"p\">(</span><span class=\"s2\">&quot;./test&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">kuzu</span><span class=\"o\">.</span><span class=\"n\">Connection</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Define the schema</span>\n<span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">&quot;CREATE NODE TABLE User(name STRING, age INT64, PRIMARY KEY (name))&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">&quot;CREATE NODE TABLE City(name STRING, population INT64, PRIMARY KEY (name))&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">&quot;CREATE REL TABLE Follows(FROM User TO User, since INT64)&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">&quot;CREATE REL TABLE LivesIn(FROM User TO City)&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Load some data</span>\n<span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s1\">&#39;COPY User FROM &quot;user.csv&quot;&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s1\">&#39;COPY City FROM &quot;city.csv&quot;&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s1\">&#39;COPY Follows FROM &quot;follows.csv&quot;&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s1\">&#39;COPY LivesIn FROM &quot;lives-in.csv&quot;&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Query the data</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">&quot;MATCH (u:User) RETURN u.name, u.age;&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">while</span> <span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">has_next</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">get_next</span><span class=\"p\">())</span>\n</code></pre>\n</div>\n\n<p>The dataset used in this example can be found <a href=\"https://github.com/kuzudb/kuzu/tree/master/dataset/demo-db/csv\">here</a>.</p>\n"}, {"fullname": "kuzu.Connection", "modulename": "kuzu", "qualname": "Connection", "kind": "class", "doc": "<p>Connection to a database.</p>\n"}, {"fullname": "kuzu.Connection.__init__", "modulename": "kuzu", "qualname": "Connection.__init__", "kind": "function", "doc": "<p>Initialise kuzu database connection.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>database</strong> (Database):\nDatabase to connect to.</li>\n<li><strong>num_threads</strong> (int):\nMaximum number of threads to use for executing queries.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"n\">kuzu</span><span class=\"o\">.</span><span class=\"n\">database</span><span class=\"o\">.</span><span class=\"n\">Database</span>, </span><span class=\"param\"><span class=\"n\">num_threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span>)</span>"}, {"fullname": "kuzu.Connection.database", "modulename": "kuzu", "qualname": "Connection.database", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "kuzu.Connection.num_threads", "modulename": "kuzu", "qualname": "Connection.num_threads", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "kuzu.Connection.is_closed", "modulename": "kuzu", "qualname": "Connection.is_closed", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "kuzu.Connection.init_connection", "modulename": "kuzu", "qualname": "Connection.init_connection", "kind": "function", "doc": "<p>Establish a connection to the database, if not already initalised.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "kuzu.Connection.set_max_threads_for_exec", "modulename": "kuzu", "qualname": "Connection.set_max_threads_for_exec", "kind": "function", "doc": "<p>Set the maximum number of threads for executing queries.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>num_threads</strong> (int):\nMaximum number of threads to use for executing queries.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">num_threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "kuzu.Connection.close", "modulename": "kuzu", "qualname": "Connection.close", "kind": "function", "doc": "<p>Close the connection.</p>\n\n<p>Note: Call to this method is optional. The connection will be closed\nautomatically when the object goes out of scope.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "kuzu.Connection.execute", "modulename": "kuzu", "qualname": "Connection.execute", "kind": "function", "doc": "<p>Execute a query.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>query</strong> (str | PreparedStatement):\nA prepared statement or a query string.\nIf a query string is given, a prepared statement will be created\nautomatically.</li>\n<li><strong>parameters</strong> (dict[str, Any]):\nParameters for the query.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>QueryResult</strong>: Query result.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">kuzu</span><span class=\"o\">.</span><span class=\"n\">prepared_statement</span><span class=\"o\">.</span><span class=\"n\">PreparedStatement</span>,</span><span class=\"param\">\t<span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">kuzu</span><span class=\"o\">.</span><span class=\"n\">query_result</span><span class=\"o\">.</span><span class=\"n\">QueryResult</span> <span class=\"o\">|</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">kuzu</span><span class=\"o\">.</span><span class=\"n\">query_result</span><span class=\"o\">.</span><span class=\"n\">QueryResult</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "kuzu.Connection.prepare", "modulename": "kuzu", "qualname": "Connection.prepare", "kind": "function", "doc": "<p>Create a prepared statement for a query.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>query</strong> (str):\nQuery to prepare.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>PreparedStatement</strong>: Prepared statement.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">kuzu</span><span class=\"o\">.</span><span class=\"n\">prepared_statement</span><span class=\"o\">.</span><span class=\"n\">PreparedStatement</span>:</span></span>", "funcdef": "def"}, {"fullname": "kuzu.Connection.set_query_timeout", "modulename": "kuzu", "qualname": "Connection.set_query_timeout", "kind": "function", "doc": "<p>Set the query timeout value in ms for executing queries.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>timeout_in_ms</strong> (int):\nquery timeout value in ms for executing queries.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">timeout_in_ms</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "kuzu.Connection.create_function", "modulename": "kuzu", "qualname": "Connection.create_function", "kind": "function", "doc": "<p>Sets a User Defined Function (UDF) to use in cypher queries.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong> (str):\nname of function</li>\n<li><strong>udf</strong> (Callable[[...], Any]):\nfunction to be executed</li>\n<li><strong>params_type</strong> (Optional[list[Type]]):\nlist of Type enums to describe the input parameters</li>\n<li><strong>return_type</strong> (Optional[Type]):\na Type enum to describe the returned value</li>\n<li><strong>default_null_handling</strong> (Optional[bool]):\nif true, when any parameter is null, the resulting value will be null</li>\n<li><strong>catch_exceptions</strong> (Optional[bool]):\nif true, when an exception is thrown from python, the function output will be null\nOtherwise, the exception will be rethrown</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">udf</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">params_type</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">kuzu</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Type</span> <span class=\"o\">|</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_type</span><span class=\"p\">:</span> <span class=\"n\">kuzu</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Type</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">default_null_handling</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">catch_exceptions</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "kuzu.Connection.remove_function", "modulename": "kuzu", "qualname": "Connection.remove_function", "kind": "function", "doc": "<p>Removes a User Defined Function (UDF).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong> (str):\nname of function to be removed.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "kuzu.Database", "modulename": "kuzu", "qualname": "Database", "kind": "class", "doc": "<p>K\u00f9zu database instance.</p>\n"}, {"fullname": "kuzu.Database.__init__", "modulename": "kuzu", "qualname": "Database.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>database_path</strong> (str, Path):\nThe path to database files. If the path is not specified, or empty, or equal to <code>:memory:</code>, the database\nwill be created in memory.</li>\n<li><strong>buffer_pool_size</strong> (int):\nThe maximum size of buffer pool in bytes. Defaults to ~80% of system memory.</li>\n<li><strong>max_num_threads</strong> (int):\nThe maximum number of threads to use for executing queries.</li>\n<li><strong>compression</strong> (bool):\nEnable database compression.</li>\n<li><strong>lazy_init</strong> (bool):\nIf True, the database will not be initialized until the first query.\nThis is useful when the database is not used in the main thread or\nwhen the main process is forked.\nDefault to False.</li>\n<li><strong>read_only</strong> (bool):\nIf true, the database is opened read-only. No write transactions is\nallowed on the <code>Database</code> object. Multiple read-only <code>Database</code>\nobjects can be created with the same database path. However, there\ncannot be multiple <code>Database</code> objects created with the same\ndatabase path.\nDefault to False.</li>\n<li><strong>max_db_size</strong> (int):\nThe maximum size of the database in bytes. Note that this is introduced\ntemporarily for now to get around with the default 8TB mmap address\n space limit some environment. This will be removed once we implemente\n a better solution later. The value is default to 1 &lt;&lt; 43 (8TB) under 64-bit\n environment and 1GB under 32-bit one.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">database_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">buffer_pool_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">max_num_threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">compression</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">lazy_init</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">read_only</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">max_db_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">8796093022208</span></span>)</span>"}, {"fullname": "kuzu.Database.database_path", "modulename": "kuzu", "qualname": "Database.database_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "kuzu.Database.buffer_pool_size", "modulename": "kuzu", "qualname": "Database.buffer_pool_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "kuzu.Database.max_num_threads", "modulename": "kuzu", "qualname": "Database.max_num_threads", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "kuzu.Database.compression", "modulename": "kuzu", "qualname": "Database.compression", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "kuzu.Database.read_only", "modulename": "kuzu", "qualname": "Database.read_only", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "kuzu.Database.max_db_size", "modulename": "kuzu", "qualname": "Database.max_db_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "kuzu.Database.is_closed", "modulename": "kuzu", "qualname": "Database.is_closed", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "kuzu.Database.get_version", "modulename": "kuzu", "qualname": "Database.get_version", "kind": "function", "doc": "<p>Get the version of the database.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: The version of the database.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "kuzu.Database.get_storage_version", "modulename": "kuzu", "qualname": "Database.get_storage_version", "kind": "function", "doc": "<p>Get the storage version of the database.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: The storage version of the database.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "kuzu.Database.init_database", "modulename": "kuzu", "qualname": "Database.init_database", "kind": "function", "doc": "<p>Initialize the database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "kuzu.Database.get_torch_geometric_remote_backend", "modulename": "kuzu", "qualname": "Database.get_torch_geometric_remote_backend", "kind": "function", "doc": "<p>Use the database as the remote backend for torch_geometric.</p>\n\n<p>For the interface of the remote backend, please refer to\n<a href=\"https://pytorch-geometric.readthedocs.io/en/latest/advanced/remote.html\">https://pytorch-geometric.readthedocs.io/en/latest/advanced/remote.html</a>.\nThe current implementation is read-only and does not support edge\nfeatures. The IDs of the nodes are based on the internal IDs (i.e., node\noffsets). For the remote node IDs to be consistent with the positions in\nthe output tensors, please ensure that no deletion has been performed\non the node tables.</p>\n\n<p>The remote backend can also be plugged into the data loader of\ntorch_geometric, which is useful for mini-batch training. For example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>    <span class=\"n\">loader_kuzu</span> <span class=\"o\">=</span> <span class=\"n\">NeighborLoader</span><span class=\"p\">(</span>\n        <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">feature_store</span><span class=\"p\">,</span> <span class=\"n\">graph_store</span><span class=\"p\">),</span>\n        <span class=\"n\">num_neighbors</span><span class=\"o\">=</span><span class=\"p\">{(</span><span class=\"s1\">&#39;paper&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;cites&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;paper&#39;</span><span class=\"p\">):</span> <span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">]},</span>\n        <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"n\">LOADER_BATCH_SIZE</span><span class=\"p\">,</span>\n        <span class=\"n\">input_nodes</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;paper&#39;</span><span class=\"p\">,</span> <span class=\"n\">input_nodes</span><span class=\"p\">),</span>\n        <span class=\"n\">num_workers</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span>\n        <span class=\"n\">filter_per_worker</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Please note that the database instance is not fork-safe, so if more than\none worker is used, <code>filter_per_worker</code> must be set to False.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>num_threads</strong> (int):\nNumber of threads to use for data loading. Default to None, which\nmeans using the number of CPU cores.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>feature_store</strong> (KuzuFeatureStore):\nFeature store compatible with torch_geometric.</li>\n<li><strong>graph_store</strong> (KuzuGraphStore):\nGraph store compatible with torch_geometric.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">num_threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">kuzu</span><span class=\"o\">.</span><span class=\"n\">torch_geometric_feature_store</span><span class=\"o\">.</span><span class=\"n\">KuzuFeatureStore</span><span class=\"p\">,</span> <span class=\"n\">kuzu</span><span class=\"o\">.</span><span class=\"n\">torch_geometric_graph_store</span><span class=\"o\">.</span><span class=\"n\">KuzuGraphStore</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "kuzu.Database.close", "modulename": "kuzu", "qualname": "Database.close", "kind": "function", "doc": "<p>Close the database. Once the database is closed, the lock on the database\nfiles is released and the database can be opened in another process.</p>\n\n<p>Note: Call to this method is not required. The Python garbage collector\nwill automatically close the database when no references to the database\nobject exist. It is recommended not to call this method explicitly. If you\ndecide to manually close the database, make sure that all the QueryResult\nand Connection objects are closed before calling this method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "kuzu.Database.check_for_database_close", "modulename": "kuzu", "qualname": "Database.check_for_database_close", "kind": "function", "doc": "<p>Check if the database is closed and raise an exception if it is.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Exception</strong>: If the database is closed.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "kuzu.PreparedStatement", "modulename": "kuzu", "qualname": "PreparedStatement", "kind": "class", "doc": "<p>A prepared statement is a parameterized query which can avoid planning the\nsame query for repeated execution.</p>\n"}, {"fullname": "kuzu.PreparedStatement.__init__", "modulename": "kuzu", "qualname": "PreparedStatement.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>connection</strong> (Connection):\nConnection to a database.</li>\n<li><strong>query</strong> (str):\nQuery to prepare.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">connection</span><span class=\"p\">:</span> <span class=\"n\">kuzu</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">Connection</span>, </span><span class=\"param\"><span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "kuzu.PreparedStatement.is_success", "modulename": "kuzu", "qualname": "PreparedStatement.is_success", "kind": "function", "doc": "<p>Check if the prepared statement is successfully prepared.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if the prepared statement is successfully prepared.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kuzu.PreparedStatement.get_error_message", "modulename": "kuzu", "qualname": "PreparedStatement.get_error_message", "kind": "function", "doc": "<p>Get the error message if the query is not prepared successfully.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: Error message.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "kuzu.QueryResult", "modulename": "kuzu", "qualname": "QueryResult", "kind": "class", "doc": "<p>QueryResult stores the result of a query execution.</p>\n"}, {"fullname": "kuzu.QueryResult.__init__", "modulename": "kuzu", "qualname": "QueryResult.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>connection</strong> (_kuzu.Connection):\nThe underlying C++ connection object from pybind11.</li>\n<li><strong>query_result</strong> (_kuzu.QueryResult):\nThe underlying C++ query result object from pybind11.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">connection</span><span class=\"p\">:</span> <span class=\"n\">kuzu</span><span class=\"o\">.</span><span class=\"n\">_kuzu</span><span class=\"o\">.</span><span class=\"n\">Connection</span>, </span><span class=\"param\"><span class=\"n\">query_result</span><span class=\"p\">:</span> <span class=\"s1\">&#39;_kuzu.QueryResult&#39;</span></span>)</span>"}, {"fullname": "kuzu.QueryResult.connection", "modulename": "kuzu", "qualname": "QueryResult.connection", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "kuzu.QueryResult.is_closed", "modulename": "kuzu", "qualname": "QueryResult.is_closed", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "kuzu.QueryResult.check_for_query_result_close", "modulename": "kuzu", "qualname": "QueryResult.check_for_query_result_close", "kind": "function", "doc": "<p>Check if the query result is closed and raise an exception if it is.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Exception</strong>: If the query result is closed.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "kuzu.QueryResult.has_next", "modulename": "kuzu", "qualname": "QueryResult.has_next", "kind": "function", "doc": "<p>Check if there are more rows in the query result.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if there are more rows in the query result, False otherwise.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kuzu.QueryResult.get_next", "modulename": "kuzu", "qualname": "QueryResult.get_next", "kind": "function", "doc": "<p>Get the next row in the query result.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: Next row in the query result.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "kuzu.QueryResult.close", "modulename": "kuzu", "qualname": "QueryResult.close", "kind": "function", "doc": "<p>Close the query result.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "kuzu.QueryResult.get_as_df", "modulename": "kuzu", "qualname": "QueryResult.get_as_df", "kind": "function", "doc": "<p>Get the query result as a Pandas DataFrame.</p>\n\n<h6 id=\"see-also\">See Also</h6>\n\n<p><code>get_as_pl</code>:  Get the query result as a Polars DataFrame.<br />\n<code>get_as_arrow</code>:  Get the query result as a PyArrow Table.  </p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.DataFrame</strong>: Query result as a Pandas DataFrame.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "kuzu.QueryResult.get_as_pl", "modulename": "kuzu", "qualname": "QueryResult.get_as_pl", "kind": "function", "doc": "<p>Get the query result as a Polars DataFrame.</p>\n\n<h6 id=\"see-also\">See Also</h6>\n\n<p><code>get_as_df</code>:  Get the query result as a Pandas DataFrame.<br />\n<code>get_as_arrow</code>:  Get the query result as a PyArrow Table.  </p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>polars.DataFrame</strong>: Query result as a Polars DataFrame.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "kuzu.QueryResult.get_as_arrow", "modulename": "kuzu", "qualname": "QueryResult.get_as_arrow", "kind": "function", "doc": "<p>Get the query result as a PyArrow Table.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>chunk_size</strong> (Number of rows to include in each chunk.):\nNone\n    The chunk size is adaptive and depends on the number of columns in the query result.\n-1 or 0\n    The entire result is returned as a single chunk.\n&gt; 0\n    The chunk size is the number of rows specified.</li>\n</ul>\n\n<h6 id=\"see-also\">See Also</h6>\n\n<p><code>get_as_pl</code>:  Get the query result as a Polars DataFrame.<br />\n<code>get_as_df</code>:  Get the query result as a Pandas DataFrame.  </p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pyarrow.Table</strong>: Query result as a PyArrow Table.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">chunk_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pyarrow</span><span class=\"o\">.</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">Table</span>:</span></span>", "funcdef": "def"}, {"fullname": "kuzu.QueryResult.get_column_data_types", "modulename": "kuzu", "qualname": "QueryResult.get_column_data_types", "kind": "function", "doc": "<p>Get the data types of the columns in the query result.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: Data types of the columns in the query result.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "kuzu.QueryResult.get_column_names", "modulename": "kuzu", "qualname": "QueryResult.get_column_names", "kind": "function", "doc": "<p>Get the names of the columns in the query result.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: Names of the columns in the query result.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "kuzu.QueryResult.get_schema", "modulename": "kuzu", "qualname": "QueryResult.get_schema", "kind": "function", "doc": "<p>Get the column schema of the query result.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: Schema of the query result.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "kuzu.QueryResult.reset_iterator", "modulename": "kuzu", "qualname": "QueryResult.reset_iterator", "kind": "function", "doc": "<p>Reset the iterator of the query result.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "kuzu.QueryResult.get_as_networkx", "modulename": "kuzu", "qualname": "QueryResult.get_as_networkx", "kind": "function", "doc": "<p>Convert the nodes and rels in query result into a NetworkX directed or undirected graph\nwith the following rules:\nColumns with data type other than node or rel will be ignored.\nDuplicated nodes and rels will be converted only once.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>directed</strong> (bool):\nWhether the graph should be directed. Defaults to True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>networkx.MultiDiGraph or networkx.MultiGraph</strong>: Query result as a NetworkX graph.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">directed</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">networkx</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">multigraph</span><span class=\"o\">.</span><span class=\"n\">MultiGraph</span> <span class=\"o\">|</span> <span class=\"n\">networkx</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">multidigraph</span><span class=\"o\">.</span><span class=\"n\">MultiDiGraph</span>:</span></span>", "funcdef": "def"}, {"fullname": "kuzu.QueryResult.get_as_torch_geometric", "modulename": "kuzu", "qualname": "QueryResult.get_as_torch_geometric", "kind": "function", "doc": "<p>Converts the nodes and rels in query result into a PyTorch Geometric graph representation\ntorch_geometric.data.Data or torch_geometric.data.HeteroData.</p>\n\n<p>For node conversion, numerical and boolean properties are directly converted into tensor and\nstored in Data/HeteroData. For properties cannot be converted into tensor automatically\n(please refer to the notes below for more detail), they are returned as unconverted_properties.</p>\n\n<p>For rel conversion, rel is converted into edge_index tensor director. Edge properties are returned\nas edge_properties.</p>\n\n<p>Node properties that cannot be converted into tensor automatically:</p>\n\n<ul>\n<li>If the type of a node property is not one of INT64, DOUBLE, or BOOL, it cannot be converted\nautomatically.</li>\n<li>If a node property contains a null value, it cannot be converted automatically.</li>\n<li>If a node property contains a nested list of variable length (e.g. [[1,2],[3]]), it cannot be\nconverted automatically.</li>\n<li>If a node property is a list or nested list, but the shape is inconsistent (e.g. the list length\nis 6 for one node but 5 for another node), it cannot be converted automatically.</li>\n</ul>\n\n<p>Additional conversion rules:</p>\n\n<ul>\n<li>Columns with data type other than node or rel will be ignored.</li>\n<li>Duplicated nodes and rels will be converted only once.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>torch_geometric.data.Data or torch_geometric.data.HeteroData</strong>: Query result as a PyTorch Geometric graph. Containing numeric or boolean node properties\nand edge_index tensor.</li>\n<li><strong>dict</strong>: A dictionary that maps the positional offset of each node in Data/HeteroData to its primary\nkey in the database.</li>\n<li><strong>dict</strong>: A dictionary contains node properties that cannot be converted into tensor automatically. The\norder of values for each property is aligned with nodes in Data/HeteroData.</li>\n<li><strong>dict</strong>: A dictionary contains edge properties. The order of values for each property is aligned with\nedge_index in Data/HeteroData.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">torch_geometric</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">Data</span> <span class=\"o\">|</span> <span class=\"n\">torch_geometric</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">hetero_data</span><span class=\"o\">.</span><span class=\"n\">HeteroData</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "kuzu.QueryResult.get_execution_time", "modulename": "kuzu", "qualname": "QueryResult.get_execution_time", "kind": "function", "doc": "<p>Get the time in ms which was required for executing the query.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>double</strong>: Query execution time as double in ms.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "kuzu.QueryResult.get_compiling_time", "modulename": "kuzu", "qualname": "QueryResult.get_compiling_time", "kind": "function", "doc": "<p>Get the time in ms which was required for compiling the query.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>double</strong>: Query compile time as double in ms.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "kuzu.QueryResult.get_num_tuples", "modulename": "kuzu", "qualname": "QueryResult.get_num_tuples", "kind": "function", "doc": "<p>Get the number of tuples which the query returned.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: Number of tuples.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "kuzu.Type", "modulename": "kuzu", "qualname": "Type", "kind": "class", "doc": "<p>The type of a value in the database.</p>\n", "bases": "enum.Enum"}, {"fullname": "kuzu.Type.ANY", "modulename": "kuzu", "qualname": "Type.ANY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Type.ANY: &#x27;ANY&#x27;&gt;"}, {"fullname": "kuzu.Type.NODE", "modulename": "kuzu", "qualname": "Type.NODE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Type.NODE: &#x27;NODE&#x27;&gt;"}, {"fullname": "kuzu.Type.REL", "modulename": "kuzu", "qualname": "Type.REL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Type.REL: &#x27;REL&#x27;&gt;"}, {"fullname": "kuzu.Type.RECURSIVE_REL", "modulename": "kuzu", "qualname": "Type.RECURSIVE_REL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Type.RECURSIVE_REL: &#x27;RECURSIVE_REL&#x27;&gt;"}, {"fullname": "kuzu.Type.SERIAL", "modulename": "kuzu", "qualname": "Type.SERIAL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Type.SERIAL: &#x27;SERIAL&#x27;&gt;"}, {"fullname": "kuzu.Type.BOOL", "modulename": "kuzu", "qualname": "Type.BOOL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Type.BOOL: &#x27;BOOL&#x27;&gt;"}, {"fullname": "kuzu.Type.INT64", "modulename": "kuzu", "qualname": "Type.INT64", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Type.INT64: &#x27;INT64&#x27;&gt;"}, {"fullname": "kuzu.Type.INT32", "modulename": "kuzu", "qualname": "Type.INT32", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Type.INT32: &#x27;INT32&#x27;&gt;"}, {"fullname": "kuzu.Type.INT16", "modulename": "kuzu", "qualname": "Type.INT16", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Type.INT16: &#x27;INT16&#x27;&gt;"}, {"fullname": "kuzu.Type.INT8", "modulename": "kuzu", "qualname": "Type.INT8", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Type.INT8: &#x27;INT8&#x27;&gt;"}, {"fullname": "kuzu.Type.UINT64", "modulename": "kuzu", "qualname": "Type.UINT64", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Type.UINT64: &#x27;UINT64&#x27;&gt;"}, {"fullname": "kuzu.Type.UINT32", "modulename": "kuzu", "qualname": "Type.UINT32", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Type.UINT32: &#x27;UINT32&#x27;&gt;"}, {"fullname": "kuzu.Type.UINT16", "modulename": "kuzu", "qualname": "Type.UINT16", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Type.UINT16: &#x27;UINT16&#x27;&gt;"}, {"fullname": "kuzu.Type.UINT8", "modulename": "kuzu", "qualname": "Type.UINT8", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Type.UINT8: &#x27;UINT8&#x27;&gt;"}, {"fullname": "kuzu.Type.INT128", "modulename": "kuzu", "qualname": "Type.INT128", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Type.INT128: &#x27;INT128&#x27;&gt;"}, {"fullname": "kuzu.Type.DOUBLE", "modulename": "kuzu", "qualname": "Type.DOUBLE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Type.DOUBLE: &#x27;DOUBLE&#x27;&gt;"}, {"fullname": "kuzu.Type.FLOAT", "modulename": "kuzu", "qualname": "Type.FLOAT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Type.FLOAT: &#x27;FLOAT&#x27;&gt;"}, {"fullname": "kuzu.Type.DATE", "modulename": "kuzu", "qualname": "Type.DATE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Type.DATE: &#x27;DATE&#x27;&gt;"}, {"fullname": "kuzu.Type.TIMESTAMP", "modulename": "kuzu", "qualname": "Type.TIMESTAMP", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Type.TIMESTAMP: &#x27;TIMESTAMP&#x27;&gt;"}, {"fullname": "kuzu.Type.TIMSTAMP_TZ", "modulename": "kuzu", "qualname": "Type.TIMSTAMP_TZ", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Type.TIMSTAMP_TZ: &#x27;TIMESTAMP_TZ&#x27;&gt;"}, {"fullname": "kuzu.Type.TIMESTAMP_NS", "modulename": "kuzu", "qualname": "Type.TIMESTAMP_NS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Type.TIMESTAMP_NS: &#x27;TIMESTAMP_NS&#x27;&gt;"}, {"fullname": "kuzu.Type.TIMESTAMP_MS", "modulename": "kuzu", "qualname": "Type.TIMESTAMP_MS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Type.TIMESTAMP_MS: &#x27;TIMESTAMP_MS&#x27;&gt;"}, {"fullname": "kuzu.Type.TIMESTAMP_SEC", "modulename": "kuzu", "qualname": "Type.TIMESTAMP_SEC", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Type.TIMESTAMP_SEC: &#x27;TIMESTAMP_SEC&#x27;&gt;"}, {"fullname": "kuzu.Type.INTERVAL", "modulename": "kuzu", "qualname": "Type.INTERVAL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Type.INTERVAL: &#x27;INTERVAL&#x27;&gt;"}, {"fullname": "kuzu.Type.INTERNAL_ID", "modulename": "kuzu", "qualname": "Type.INTERNAL_ID", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Type.INTERNAL_ID: &#x27;INTERNAL_ID&#x27;&gt;"}, {"fullname": "kuzu.Type.STRING", "modulename": "kuzu", "qualname": "Type.STRING", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Type.STRING: &#x27;STRING&#x27;&gt;"}, {"fullname": "kuzu.Type.BLOB", "modulename": "kuzu", "qualname": "Type.BLOB", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Type.BLOB: &#x27;BLOB&#x27;&gt;"}, {"fullname": "kuzu.Type.UUID", "modulename": "kuzu", "qualname": "Type.UUID", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Type.UUID: &#x27;UUID&#x27;&gt;"}, {"fullname": "kuzu.Type.LIST", "modulename": "kuzu", "qualname": "Type.LIST", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Type.LIST: &#x27;LIST&#x27;&gt;"}, {"fullname": "kuzu.Type.ARRAY", "modulename": "kuzu", "qualname": "Type.ARRAY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Type.ARRAY: &#x27;ARRAY&#x27;&gt;"}, {"fullname": "kuzu.Type.STRUCT", "modulename": "kuzu", "qualname": "Type.STRUCT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Type.STRUCT: &#x27;STRUCT&#x27;&gt;"}, {"fullname": "kuzu.Type.MAP", "modulename": "kuzu", "qualname": "Type.MAP", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Type.MAP: &#x27;MAP&#x27;&gt;"}, {"fullname": "kuzu.Type.UNION", "modulename": "kuzu", "qualname": "Type.UNION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Type.UNION: &#x27;UNION&#x27;&gt;"}, {"fullname": "kuzu.storage_version", "modulename": "kuzu", "qualname": "storage_version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "kuzu.version", "modulename": "kuzu", "qualname": "version", "kind": "variable", "doc": "<p></p>\n"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();