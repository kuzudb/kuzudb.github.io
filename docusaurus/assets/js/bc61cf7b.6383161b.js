"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[6568],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=l(n),m=r,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[d]="string"==typeof e?e:r,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2991:(e,t,n)=>{n.d(t,{Z:()=>f});var a=n(7294),r=n(6010),i=n(2802),o=n(9960),c=n(3919),s=n(5999);const l={cardContainer:"cardContainer_fWXF",cardTitle:"cardTitle_rnsV",cardDescription:"cardDescription_PWke"};function u(e){let{href:t,children:n}=e;return a.createElement(o.Z,{href:t,className:(0,r.Z)("card padding--lg",l.cardContainer)},n)}function d(e){let{href:t,icon:n,title:i,description:o}=e;return a.createElement(u,{href:t},a.createElement("h2",{className:(0,r.Z)("text--truncate",l.cardTitle),title:i},n," ",i),o&&a.createElement("p",{className:(0,r.Z)("text--truncate",l.cardDescription),title:o},o))}function p(e){let{item:t}=e;const n=(0,i.Wl)(t);return n?a.createElement(d,{href:n,icon:"\ud83d\uddc3\ufe0f",title:t.label,description:t.description??(0,s.I)({message:"{count} items",id:"theme.docs.DocCard.categoryDescription",description:"The default description for a category card in the generated index about how many items this category includes"},{count:t.items.length})}):null}function m(e){let{item:t}=e;const n=(0,c.Z)(t.href)?"\ud83d\udcc4\ufe0f":"\ud83d\udd17",r=(0,i.xz)(t.docId??void 0);return a.createElement(d,{href:t.href,icon:n,title:t.label,description:t.description??r?.description})}function h(e){let{item:t}=e;switch(t.type){case"link":return a.createElement(m,{item:t});case"category":return a.createElement(p,{item:t});default:throw new Error(`unknown item type ${JSON.stringify(t)}`)}}function y(e){let{className:t}=e;const n=(0,i.jA)();return a.createElement(f,{items:n.items,className:t})}function f(e){const{items:t,className:n}=e;if(!t)return a.createElement(y,e);const o=(0,i.MN)(t);return a.createElement("section",{className:(0,r.Z)("row",n)},o.map(((e,t)=>a.createElement("article",{key:t,className:"col col--6 margin-bottom--lg"},a.createElement(h,{item:e})))))}},5041:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var a=n(7462),r=(n(7294),n(3905)),i=n(2991);const o={},c="Client APIs",s={unversionedId:"client-apis/index",id:"client-apis/index",title:"Client APIs",description:"You can interact with K\xf9zu through its CLI or client APIs in C, C++, Python, and Node.js.",source:"@site/docs/client-apis/index.md",sourceDirName:"client-apis",slug:"/client-apis/",permalink:"/docusaurus/client-apis/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Performance Debugging",permalink:"/docusaurus/cypher/performance-debugging"},next:{title:"CLI",permalink:"/docusaurus/client-apis/cli"}},l={},u=[{value:"Note on Connecting to the Same Database Directory From Multiple <code>Database</code> Instances",id:"note-on-connecting-to-the-same-database-directory-from-multiple-database-instances",level:2}],d={toc:u},p="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"client-apis"},"Client APIs"),(0,r.kt)("p",null,"You can interact with K\xf9zu through its CLI or client APIs in C, C++, Python, and Node.js."),(0,r.kt)("p",null,"Each query to K\xf9zu through its CLI or client APIs are transactional,\nsatisfying serializability, atomicity and durability.\nThis part of the documentation also gives details of K\xf9zu ",(0,r.kt)("a",{parentName:"p",href:"/docusaurus/client-apis/transactions"},"transactions"),". "),(0,r.kt)("h2",{id:"note-on-connecting-to-the-same-database-directory-from-multiple-database-instances"},"Note on Connecting to the Same Database Directory From Multiple ",(0,r.kt)("inlineCode",{parentName:"h2"},"Database")," Instances"),(0,r.kt)("p",null,"Each of these three ways ultimately creates a ",(0,r.kt)("inlineCode",{parentName:"p"},"Database")," instance in C++ (K\xf9zu's CLI is written in C++, so is a C++\nprocess, and K\xf9zu's Python API, through which you create a ",(0,r.kt)("inlineCode",{parentName:"p"},"PyDatabase")," instance is a binding to K\xf9zu's C++ API\nand so ultimately creates a ",(0,r.kt)("inlineCode",{parentName:"p"},"Database")," instance). Each database you create is identified by\nits directory. If you are going to concurrently interact with the same database through more than one\n",(0,r.kt)("inlineCode",{parentName:"p"},"Database")," instances, you should\nensure that you only issue read queries to the system. Your writes from one ",(0,r.kt)("inlineCode",{parentName:"p"},"Database")," instance\nwill not be visible to your other program and you can easily corrupt your database. K\xf9zu currently does not ensure\nthat you are connecting to the same database directory through a single ",(0,r.kt)("inlineCode",{parentName:"p"},"Database")," instance.\n",(0,r.kt)("em",{parentName:"p"},"You can however open multiple connections to the same database from the same ",(0,r.kt)("inlineCode",{parentName:"em"},"Database")," instance.")," So you can\nhave as many connections to the same database using the same ",(0,r.kt)("inlineCode",{parentName:"p"},"Database")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"PyDatabase")," instance. But you shouldn't\nconcurrently have a CLI open that writes to the same database directory and a separate C++ or Python process\nthat reads from the database in that directory."),(0,r.kt)(i.Z,{mdxType:"DocCardList"}))}m.isMDXComponent=!0}}]);