"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[874],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>c});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(a),h=r,c=d["".concat(l,".").concat(h)]||d[h]||m[h]||o;return a?n.createElement(c,i(i({ref:t},u),{},{components:a})):n.createElement(c,i({ref:t},u))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},2837:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const o={slug:"kuzu-0.2.0-release",authors:["team"],tags:["release"]},i="K\xf9zu 0.2.0 Release",s={permalink:"/docusaurus/blog/kuzu-0.2.0-release",source:"@site/blog/2024-02-08-kuzu-v-0.2.0.md",title:"K\xf9zu 0.2.0 Release",description:"We are very happy to announce the release of K\xf9zu 0.2.0! This is a major release with two major new features:",date:"2024-02-08T00:00:00.000Z",formattedDate:"February 8, 2024",tags:[{label:"release",permalink:"/docusaurus/blog/tags/release"}],readingTime:5.285,hasTruncateMarker:!1,authors:[{name:"K\xf9zu Team",url:"https://github.com/kuzudb/",imageURL:"https://kuzudb.com/img/blog/team.jpg",key:"team"}],frontMatter:{slug:"kuzu-0.2.0-release",authors:["team"],tags:["release"]},nextItem:{title:"Transforming your data to graphs - Part 1",permalink:"/docusaurus/blog/transforming-your-data-to-graphs-1"}},l={authorsImageUrls:[void 0]},p=[{value:"RDFGraphs",id:"rdfgraphs",level:2},{value:"Extensions framework",id:"extensions-framework",level:2},{value:"Improvements at the Core",id:"improvements-at-the-core",level:2},{value:"Closing Remarks",id:"closing-remarks",level:2}],u={toc:p},d="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"We are very happy to announce the release of K\xf9zu 0.2.0! This is a major release with two major new features:\n(i) RDFGraphs; and (ii) K\xf9zu extensions framework and our first extension for accessing files over HTTP(S) servers and on S3.\nWe also have a set of improvements at the core that should make K\xf9zu faster behind the scenes and several other\nimprovements, as discussed below."),(0,r.kt)("p",null,"For details on all the changes in this release, please see the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kuzudb/kuzu/releases"},"change log of this release"),"."),(0,r.kt)("h2",{id:"rdfgraphs"},"RDFGraphs"),(0,r.kt)("p",null,"K\xf9zu's native data model is a version of the property graph model, where you model your records as a set of entities/nodes and relationships\nand properties on nodes and relationships. K\xf9zu's version of\nproperty graphs is, in fact, a ",(0,r.kt)("em",{parentName:"p"},"structured property graph model"),", as K\xf9zu requires you to pre-specify the properties on\nyour nodes and relationships. This is very close to the relational model. The primary difference is that\nyou specify some of your tables as node tables and others as relationship tables. "),(0,r.kt)("p",null,"The second popular graph-based data model in practice is ",(0,r.kt)("a",{parentName:"p",href:"https://www.w3.org/RDF/"},"Resource Description Framework")," (RDF).\nRDF is in fact more than a data model. It is part of a larger\nset of standards by the World Wide Web Consortium (W3C), such as RDF Schema and OWL,\nthat form a well founded, well-standardized knowledge representation system.\nIn contrast to the property graph model, RDF is particularly suitable for more flexible and heterogenous information representation.\nAll information, including the actual data as well as the schema of your data, i.e., metadata,\nis represented homogeneously in the form of (subject, predicate, object) ",(0,r.kt)("em",{parentName:"p"},"triples"),"."),(0,r.kt)("p",null,"K\xf9zu 0.2.0 introduces native support for RDF through a new extension of its data model called ",(0,r.kt)("a",{parentName:"p",href:"/rdf-graphs/example-rdfgraph"},(0,r.kt)("em",{parentName:"a"},"RDFGraphs")),".\nRDFGraphs is a lightweight extension to K\xf9zu's data model that allows ingesting triples natively into K\xf9zu so\nthat they can be queried using Cypher.\nIt is a lightweight extension because an RDFGraph is simply a wrapper around\n2 node and 2 relationship tables that acts as a new object in K\xf9zu's data model.\nFor example you can ",(0,r.kt)("inlineCode",{parentName:"p"},"CREATE/DROP RDFGraph  <rdfgraph-name>")," to create or drop an RDFGraph, which will\ncreate or drop four underlying tables. You can  then query these underlying tables with Cypher.\nTherefore, RDFGraphs are a specific mapping of your triples into\nK\xf9zu's native property graph data model, so that you can benefit from K\xf9zu's easy, scalable, and fast querying capabilities\nfor basic querying of RDF triples."),(0,r.kt)("admonition",{title:"In Short",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"You can now use K\xf9zu to store and query RDF data via Cypher!")),(0,r.kt)("p",null,"This release is an important step in our vision to be the\ngo-to system to model your records as graphs. Here is the example from our ",(0,r.kt)("a",{parentName:"p",href:"/rdf-graphs/example-rdfgraph"},"documentation"),"\nof how you can use K\xf9zu to store and query RDF data.\nConsider a Turtle file ",(0,r.kt)("inlineCode",{parentName:"p"},"uni.ttl")," modeling information about university students, faculty and cities they live in:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'@prefix kz: <http://kuzu.io/rdf-ex#> .\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\n\nkz:Waterloo a kz:City ;\n        kz:name "Waterloo" ;\n        kz:population 150000 .\n\nkz:Adam a kz:student ;\n    kz:livesIn kz:Waterloo ;\n    kz:name "Adam" ;\n    kz:age  30 .\n')),(0,r.kt)("p",null,"You can create an RDFGraph named ",(0,r.kt)("inlineCode",{parentName:"p"},"UniKG")," and import the above Turtle file into ",(0,r.kt)("inlineCode",{parentName:"p"},"UniKG")," as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'CREATE RDFGraph UniKG;\n\nCOPY UniKG FROM "${PATH-TO-DIR}/uni.ttl";\n')),(0,r.kt)("p",null,"You can then query all triples with IRI ",(0,r.kt)("inlineCode",{parentName:"p"},"kz:Waterloo")," as subject as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'WITH "http://kuzu.io/rdf-ex#" as kz\nMATCH (s {iri: kz+"Waterloo"})-[p:UniKG]->(o)\nRETURN s.iri, p.iri, o.iri, o.val;\n\nOutput:\n----------------------------------------------------------------------------------------------------------------------------\n| s.iri                          | p.iri                                           | o.iri                      | o.val    |\n----------------------------------------------------------------------------------------------------------------------------\n| http://kuzu.io/rdf-ex#Waterloo | http://kuzu.io/rdf-ex#name                      |                            | Waterloo |\n----------------------------------------------------------------------------------------------------------------------------\n| http://kuzu.io/rdf-ex#Waterloo | http://kuzu.io/rdf-ex#population                |                            | 150000   |\n----------------------------------------------------------------------------------------------------------------------------\n| http://kuzu.io/rdf-ex#Waterloo | http://www.w3.org/1999/02/22-rdf-syntax-ns#type | http://kuzu.io/rdf-ex#City |          |\n----------------------------------------------------------------------------------------------------------------------------\n')),(0,r.kt)("p",null,"Learn all about RDFGraphs, how to CREATE them, how to import triples into them from Turtle files,\nthe property graph node and relationships they map to, how to query and modify them and all in ",(0,r.kt)("a",{parentName:"p",href:"/rdf-graphs/"},"our documentation page for RDFGraphs"),"."),(0,r.kt)("h2",{id:"extensions-framework"},"Extensions framework"),(0,r.kt)("p",null,"K\xf9zu 0.2.0 introduces a new framework for extending K\xf9zu's capabilities, similar to PostreSQL's and DuckDB's extensions.\n",(0,r.kt)("a",{parentName:"p",href:"/extensions/"},"Extensions")," are a way to add new features to K\xf9zu without modifying the core code.\nThe 0.2.0 version is just the beginning of our development of this framework, and we are happy to release our first extension, ",(0,r.kt)("inlineCode",{parentName:"p"},"httpfs"),",\nwhich supports reading data from a file hosted on an HTTP(S) server. ",(0,r.kt)("inlineCode",{parentName:"p"},"httpfs")," can also be used to read from Amazon S3.\nYou can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"httpfs")," extension by installing it and dynamically loading it as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"INSTALL httpfs;\nLOAD httpfs;\n")),(0,r.kt)("p",null,"You can then read files hosted remotely on a http(s) server or on Amazon S3 as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'LOAD FROM "https://raw.githubusercontent.com/kuzudb/extension/main/dataset/test/city.csv" \nRETURN *;\n\nOutput: \nWaterloo|150000\nKitchener|200000\nGuelph|75000\n')),(0,r.kt)("p",null,"The following example shows how to read a file from Amazon S3:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"LOAD FROM 's3://kuzu-test/follows.parquet'\nRETURN *;\n")),(0,r.kt)("p",null,"You can also write to S3 using the ",(0,r.kt)("inlineCode",{parentName:"p"},"httpfs")," extension. Read all about it here in our ",(0,r.kt)("a",{parentName:"p",href:"/extensions/httpfs"},"documentation"),"."),(0,r.kt)("p",null,"We have plans to implement additional extensions, such as to support new data types, functions and indices over time."),(0,r.kt)("h2",{id:"improvements-at-the-core"},"Improvements at the Core"),(0,r.kt)("p",null,"We are also continuing non-stop to make the core of K\xf9zu faster and more efficient. We have improved our hash index\nbuilding by parallelizing it (other parts of the copy pipeline were already parallelized)\nand through several other optimizations. This results in an improvement in bulk loading performance.\nHere is a comparison showing by how much we improved bulk loading performance of the LDBC Comments table, which consists of 220M records (~22 GB):"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Threads"),(0,r.kt)("th",{parentName:"tr",align:"right"},"K\xf9zu 0.1.0"),(0,r.kt)("th",{parentName:"tr",align:"right"},"K\xf9zu 0.2.0"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Performance improvement"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"1"),(0,r.kt)("td",{parentName:"tr",align:"right"},"536.1"),(0,r.kt)("td",{parentName:"tr",align:"right"},"496.5"),(0,r.kt)("td",{parentName:"tr",align:"right"},"7.4%")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"2"),(0,r.kt)("td",{parentName:"tr",align:"right"},"289.1"),(0,r.kt)("td",{parentName:"tr",align:"right"},"257.3"),(0,r.kt)("td",{parentName:"tr",align:"right"},"11.0%")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"4"),(0,r.kt)("td",{parentName:"tr",align:"right"},"161.7"),(0,r.kt)("td",{parentName:"tr",align:"right"},"137.5"),(0,r.kt)("td",{parentName:"tr",align:"right"},"15.0%")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"8"),(0,r.kt)("td",{parentName:"tr",align:"right"},"116.8"),(0,r.kt)("td",{parentName:"tr",align:"right"},"77.6"),(0,r.kt)("td",{parentName:"tr",align:"right"},"33.5%")))),(0,r.kt)("p",null,"We have also improved our disk-based\nCSR implementation to make it faster when ingesting data through ",(0,r.kt)("inlineCode",{parentName:"p"},"CREATE")," statements (intended for loading small amounts of data),\nand added constant compression all improving K\xf9zu's performance in some cases in minor ways."),(0,r.kt)("h2",{id:"closing-remarks"},"Closing Remarks"),(0,r.kt)("p",null,"In addition to the above, this release includes the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Several additional improvements to K\xf9zu's command line interface"),(0,r.kt)("li",{parentName:"ul"},"A new UUID data type"),(0,r.kt)("li",{parentName:"ul"},"Many improvements to our testing framework")),(0,r.kt)("p",null,"These updates were all made by our amazing interns \ud83d\ude0e. As always, we would like to thank everyone\nin the K\xf9zu team for making this release possible and look forward to user feedback!"))}m.isMDXComponent=!0}}]);