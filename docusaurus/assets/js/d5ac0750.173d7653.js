"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[2053],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=p(n),c=r,h=u["".concat(s,".").concat(c)]||u[c]||d[c]||l;return n?a.createElement(h,o(o({ref:t},m),{},{components:n})):a.createElement(h,o({ref:t},m))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1543:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const l={slug:"kuzu-0.0.9-release",authors:["team"],tags:["release"]},o="K\xf9zu 0.0.9 Release",i={permalink:"/docusaurus/blog/kuzu-0.0.9-release",source:"@site/blog/2023-10-02-kuzu-v-0.0.9.md",title:"K\xf9zu 0.0.9 Release",description:"We are very happy to release K\xf9zu 0.0.9 today! This release comes with the following new main features and improvements:",date:"2023-10-02T00:00:00.000Z",formattedDate:"October 2, 2023",tags:[{label:"release",permalink:"/docusaurus/blog/tags/release"}],readingTime:7.54,hasTruncateMarker:!1,authors:[{name:"K\xf9zu Team",url:"https://github.com/kuzudb/",imageURL:"https://kuzudb.com/img/blog/team.jpg",key:"team"}],frontMatter:{slug:"kuzu-0.0.9-release",authors:["team"],tags:["release"]},nextItem:{title:"K\xf9zu 0.0.8 Release",permalink:"/docusaurus/blog/kuzu-0.0.8-release"}},s={authorsImageUrls:[void 0]},p=[{value:"New Features",id:"new-features",level:2},{value:"Load From",id:"load-from",level:3},{value:"Header Schema",id:"header-schema",level:4},{value:"Transaction Statement",id:"transaction-statement",level:3},{value:"Comment on Table",id:"comment-on-table",level:3},{value:"Recursive Relationship Projection",id:"recursive-relationship-projection",level:3},{value:"CREATE REL GROUP",id:"create-rel-group",level:3},{value:"Data Types &amp; Functions",id:"data-types--functions",level:3},{value:"Performance Improvements",id:"performance-improvements",level:2},{value:"New CSV and Parquet Reader",id:"new-csv-and-parquet-reader",level:3},{value:"Bitpacking Compression",id:"bitpacking-compression",level:3},{value:"General Data Loading Improvement",id:"general-data-loading-improvement",level:3},{value:"Projection Pushdown for Recursive Joins",id:"projection-pushdown-for-recursive-joins",level:3}],m={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"We are very happy to release K\xf9zu 0.0.9 today! This release comes with the following new main features and improvements:"),(0,r.kt)("h2",{id:"new-features"},"New Features"),(0,r.kt)("h3",{id:"load-from"},"Load From"),(0,r.kt)("p",null,"K\xf9zu now supports loading directly from a file without importing into the database through the ",(0,r.kt)("inlineCode",{parentName:"p"},"LOAD FROM")," clause. For instance, the following query counts the number of rows whose first column starts with 'Adam'."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"LOAD FROM \"user.csv\"\nWHERE column0 =~ 'Adam*'\nRETURN COUNT(*)\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"LOAD FROM")," can also be used as the input source for a bulk update."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'LOAD FROM "user.csv"\nCREATE (:Person {name: column0, age: to_int64(column1)});\n')),(0,r.kt)("p",null,"Details can be found in the ",(0,r.kt)("a",{parentName:"p",href:"/cypher/query-clauses/load_from"},"LOAD FROM documentation page"),"."),(0,r.kt)("h4",{id:"header-schema"},"Header Schema"),(0,r.kt)("p",null,"By default, K\xf9zu will read the header of the file to detect column names and types. If no header is avaliable it will use auto-generated names and all columns will be strings. To manually specify the header, you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"LOAD WITH HEADERS ... FROM ..."),"."),(0,r.kt)("p",null,"For example, the following query will load ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," as a string type for the first column and ",(0,r.kt)("inlineCode",{parentName:"p"},"age")," as an INT64 type for the second column."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"LOAD WITH HEADERS (name STRING, age INT64) FROM \"user.csv\"\nWHERE name =~ 'Adam*'\nRETURN name, age;\n")),(0,r.kt)("p",null,"If a header is manually specified, K\xf9zu will try to cast to the given type and throw exceptions if casting fails. More information can be found ",(0,r.kt)("a",{parentName:"p",href:"/cypher/query-clauses/load_from"},"here"),"."),(0,r.kt)("h3",{id:"transaction-statement"},"Transaction Statement"),(0,r.kt)("p",null,"This release replaces the ",(0,r.kt)("inlineCode",{parentName:"p"},"beginReadTransaction()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"beginWriteTransaction()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"commit()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"rollback()")," APIs in all language bindings with explicit statements."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"BEGIN TRANSACTION;\nCREATE (a:User {name: 'Alice', age: 72});\nMATCH (a:User) RETURN *;\nCOMMIT;\n")),(0,r.kt)("p",null,"The above sequence of statements starts a write transaction, adds a new node, and within the same transaction also reads all of the tuples in User table before committing the transaction. More info on the new transaction statement can be found ",(0,r.kt)("a",{parentName:"p",href:"/cypher/transaction"},"here"),"."),(0,r.kt)("h3",{id:"comment-on-table"},"Comment on Table"),(0,r.kt)("p",null,"You can now add comments to a table using the ",(0,r.kt)("inlineCode",{parentName:"p"},"COMMENT ON TABLE")," statement. The following query adds a comment to the ",(0,r.kt)("inlineCode",{parentName:"p"},"User")," table."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"COMMENT ON TABLE User IS 'User information';\n")),(0,r.kt)("p",null,"Comments can be extracted through the new ",(0,r.kt)("inlineCode",{parentName:"p"},"SHOW_TABLES()")," function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CALL SHOW_TABLES() RETURN *;\n----------------------------------\n| name | type | comment          |\n----------------------------------\n| User | NODE | User information |\n----------------------------------\n| City | NODE |                  |\n----------------------------------\n")),(0,r.kt)("h3",{id:"recursive-relationship-projection"},"Recursive Relationship Projection"),(0,r.kt)("p",null,"This release expands recursive relationship patterns and enables projection on intermediate nodes and relationships. Previously, K\xf9zu only supported returning all node and relationship properties on the path."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"MATCH (a:User)-[e:Follows*1..2 (r, n | WHERE r.since > 2020)]->(b:User)\nRETURN nodes(e), rels(e);\n")),(0,r.kt)("p",null,"This incurs a significant computational overhead when a user is only interested in a subset of properties on the path. Also, returning all properties makes the result harder to interpret."),(0,r.kt)("p",null,"K\xf9zu now allows projection inside recursive relationship patterns using a list-comprehension-like syntax."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"MATCH (a:User)-[e:Follows*1..2 (r, n | WHERE r.since > 2020 | {r.since}, {n.name})]->(b:User)\nRETURN nodes(e), rels(e);\n")),(0,r.kt)("p",null,"The query above finds all paths between two users which are between 1 and 2 hops, and where the users followed each other after 2020. The query returns the ",(0,r.kt)("inlineCode",{parentName:"p"},"since")," property of any ",(0,r.kt)("inlineCode",{parentName:"p"},"Follow")," relationships and the name of any intermediate users."),(0,r.kt)("p",null,"For more information, check out ",(0,r.kt)("a",{parentName:"p",href:"/cypher/query-clauses/match#project-intermediate-nodes-and-rels"},"the new documentation"),"."),(0,r.kt)("p",null,"The performance improvements are shown in the ",(0,r.kt)("a",{parentName:"p",href:"#performance-improvements"},"Performance Improvements")," section."),(0,r.kt)("h3",{id:"create-rel-group"},"CREATE REL GROUP",(0,r.kt)("sup",{parentName:"h3",id:"fnref-1-8c98df"},(0,r.kt)("a",{parentName:"sup",href:"#fn-1-8c98df",className:"footnote-ref"},"1"))),(0,r.kt)("p",null,"We have received a lot of feedback regarding the limitation that a relationship can only be defined over a single pair of node tables. This release introduces a ",(0,r.kt)("inlineCode",{parentName:"p"},"CREATE REL GROUP")," statement which has a similar syntax to ",(0,r.kt)("inlineCode",{parentName:"p"},"CREATE REL TABLE"),", but allows multiple ",(0,r.kt)("inlineCode",{parentName:"p"},"FROM ... TO ...")," clauses. This statement will create a relationship table for each pair internally. When querying, a relationship group is simply syntatic sugar for any of the relationships in the group."),(0,r.kt)("p",null,"For example, the following statement creates a group containing a Knows_User_User relationship and a Knows_User_City relationship."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE REL TABLE GROUP Knows (FROM User To User, FROM User to City, year INT64);\n")),(0,r.kt)("p",null,"To query with the group, simply treat it as any other relationship, so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"MATCH (a:User)-[:Knows]->(b) RETURN *;\n")),(0,r.kt)("p",null,"The query above is equivalent to"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"MATCH (a:User)-[:Knows_User_User|:Knows_User_city]->(b) RETURN *;\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"For ",(0,r.kt)("inlineCode",{parentName:"li"},"COPY FROM")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"CREATE"),", we currently don't support using a relationship group so you need to explicitly specify a single relationship table.")),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"/cypher/data-definition/create-table"},"Create Table")," for more information."),(0,r.kt)("h3",{id:"data-types--functions"},"Data Types & Functions"),(0,r.kt)("p",null,"We introduced a few more numerical data types:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"INT8: 1 byte signed integer"),(0,r.kt)("li",{parentName:"ul"},"UINT64: 8 byte unsigned integer"),(0,r.kt)("li",{parentName:"ul"},"UINT32: 4 byte unsigned integer"),(0,r.kt)("li",{parentName:"ul"},"UINT16: 2 byte unsigned integer"),(0,r.kt)("li",{parentName:"ul"},"UINT8: 1 byte unsigned integer")),(0,r.kt)("p",null,"We have also added several casting and list functions. See ",(0,r.kt)("a",{parentName:"p",href:"/cypher/expressions/"},"functions")," for more information."),(0,r.kt)("h2",{id:"performance-improvements"},"Performance Improvements"),(0,r.kt)("h3",{id:"new-csv-and-parquet-reader"},"New CSV and Parquet Reader"),(0,r.kt)("p",null,"In this release, we have started replacing arrow's CSV and Parquet reader with our own lightweight and customized implementations."),(0,r.kt)("p",null,"Following DuckDB's implementation, we've replaced arrow's streaming CSV reader with a parallel one. The parallel CSV reader assumes there are no multi-line strings and provides a large performance boost on multi-threaded machines."),(0,r.kt)("p",null,"If multi-line strings are present, the CSV reading will fail, and you will need to fall back to single thread mode by setting ",(0,r.kt)("inlineCode",{parentName:"p"},"parallel=false"),". See ",(0,r.kt)("a",{parentName:"p",href:"/data-import/csv-import"},"Data Import from CSV Files"),"."),(0,r.kt)("p",null,"We demonstrate the performance of our parallel csv reader through the new ",(0,r.kt)("a",{parentName:"p",href:"#load-from"},"LOAD FROM")," feature as follows."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"LOAD FROM \"ldbc-100/comment_0_0.csv\" (header = true, delim = '|') RETURN COUNT(*);\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"# Threads"),(0,r.kt)("th",{parentName:"tr",align:null},"1"),(0,r.kt)("th",{parentName:"tr",align:null},"2"),(0,r.kt)("th",{parentName:"tr",align:null},"4"),(0,r.kt)("th",{parentName:"tr",align:null},"8"),(0,r.kt)("th",{parentName:"tr",align:null},"16"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Time (s)"),(0,r.kt)("td",{parentName:"tr",align:null},"297.19"),(0,r.kt)("td",{parentName:"tr",align:null},"170.71 (1.7x)"),(0,r.kt)("td",{parentName:"tr",align:null},"109.38 (2.7x)"),(0,r.kt)("td",{parentName:"tr",align:null},"69.01 (4.3x)"),(0,r.kt)("td",{parentName:"tr",align:null},"53.28 (5.6x)")))),(0,r.kt)("h3",{id:"bitpacking-compression"},"Bitpacking Compression"),(0,r.kt)("p",null,"With this release, we have implemented our first compression algorithm! We are introducing the bitpacking compression algorithm for integers. It is useful when using a large integer type (e.g., INT32 or INT64) for storing small integers, which can be encoded more compactly with fewer bits. This helps both storage and query processing times."),(0,r.kt)("p",null,"To show the difference, we take the ",(0,r.kt)("inlineCode",{parentName:"p"},"length")," column from LDBC ",(0,r.kt)("inlineCode",{parentName:"p"},"Comment")," table as an example, which is of type ",(0,r.kt)("inlineCode",{parentName:"p"},"INT32")," and whose values range from 2 to 1998.\nTogether with an auto-increment ",(0,r.kt)("inlineCode",{parentName:"p"},"ID")," column as the primary key, we create a node table ",(0,r.kt)("inlineCode",{parentName:"p"},"(ID INT64, length INT32, PRIMARY KEY(ID))"),". The loaded data file size, and loading time is listed in the below table. Data file size is largely reduced from 2.6GB to 1.1GB (2.4x), while the data loading time stays the same (75.69s vs. 75.84s)."),(0,r.kt)("p",null,"Reduced data file size also helps reduce disk I/O operations, which can improve query scan performance. We show that with a query that sums all the lengths."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"MATCH (l:length) RETURN sum(l.length);\n")),(0,r.kt)("p",null,"The query time improved from 1.64s to 0.45s (3.6x)!"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"Data size"),(0,r.kt)("th",{parentName:"tr",align:null},"Loading time"),(0,r.kt)("th",{parentName:"tr",align:null},"Query time"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Without compression"),(0,r.kt)("td",{parentName:"tr",align:null},"2.6GB"),(0,r.kt)("td",{parentName:"tr",align:null},"75.69s"),(0,r.kt)("td",{parentName:"tr",align:null},"1.64s")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"With compression"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"1.1GB (2.4x)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"75.84s")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"0.45s (3.6x)"))))),(0,r.kt)("p",null,"More compressions on integers, floats, and string values will be coming soon. Please stay tuned!"),(0,r.kt)("p",null,"Note: The compression is currently only done on node tables. It will be adapted to rel tables in our next release. By default, we turn on compression for all node tables. To disable it, we provide an option when starting the database. For example, starting our CLI with ",(0,r.kt)("inlineCode",{parentName:"p"},"--nocompress")," option can disable compression on all write statements to node tables."),(0,r.kt)("h3",{id:"general-data-loading-improvement"},"General Data Loading Improvement"),(0,r.kt)("p",null,"Data loading time is improved due the following changes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Parallel csv reader."),(0,r.kt)("li",{parentName:"ul"},"Compression means we write less data to disk."),(0,r.kt)("li",{parentName:"ul"},"Removed line counting when copying rel tables."),(0,r.kt)("li",{parentName:"ul"},"Dedicated casting functions to avoid string copy."),(0,r.kt)("li",{parentName:"ul"},"Reduced hash index file size.")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Files"),(0,r.kt)("th",{parentName:"tr",align:null},"# Lines"),(0,r.kt)("th",{parentName:"tr",align:null},"CSV file size"),(0,r.kt)("th",{parentName:"tr",align:null},"v0.0.8"),(0,r.kt)("th",{parentName:"tr",align:null},"v0.0.9"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"comment.csv"),(0,r.kt)("td",{parentName:"tr",align:null},"220M"),(0,r.kt)("td",{parentName:"tr",align:null},"22.49 GB"),(0,r.kt)("td",{parentName:"tr",align:null},"187.76s"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"131.48s"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"person.csv"),(0,r.kt)("td",{parentName:"tr",align:null},"0.45M"),(0,r.kt)("td",{parentName:"tr",align:null},"43.6M"),(0,r.kt)("td",{parentName:"tr",align:null},"1.16s"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"0.78s"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"likesComment.csv"),(0,r.kt)("td",{parentName:"tr",align:null},"242M"),(0,r.kt)("td",{parentName:"tr",align:null},"13 GB"),(0,r.kt)("td",{parentName:"tr",align:null},"250.64s"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"210.72s"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"knows.csv"),(0,r.kt)("td",{parentName:"tr",align:null},"20M"),(0,r.kt)("td",{parentName:"tr",align:null},"1.1 GB"),(0,r.kt)("td",{parentName:"tr",align:null},"24.40s"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"19.54s"))))),(0,r.kt)("h3",{id:"projection-pushdown-for-recursive-joins"},"Projection Pushdown for Recursive Joins"),(0,r.kt)("p",null,"The following two queries both compute paths along the Knows relationship with 1 to 3 hops from a single starting point, and then returns the firstName of all nodes along the path.",(0,r.kt)("sup",{parentName:"p",id:"fnref-2-8c98df"},(0,r.kt)("a",{parentName:"sup",href:"#fn-2-8c98df",className:"footnote-ref"},"2"))),(0,r.kt)("p",null,"Without Projection:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"MATCH (a:Person)-[e:Knows*1..3]->(b:Person)\nWHERE a.ID = 933\nRETURN properties(nodes(e), 'firstName');\n")),(0,r.kt)("p",null,"With Projection:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"MATCH (a:Person)-[e:Knows*1..3 (r, n | {}, {n.firstName})]->(b:Person)\nWHERE a.ID = 933\nRETURN properties(nodes(e), 'firstName');\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"With projection"),(0,r.kt)("th",{parentName:"tr",align:null},"Without projection"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"471.9")," ms"),(0,r.kt)("td",{parentName:"tr",align:null},"3412.8 ms")))),(0,r.kt)("p",null,"With projection, the optimizer can completely avoid materializing a hash table for relationship properties which is a major bottleneck in computation."),(0,r.kt)("div",{className:"footnotes"},(0,r.kt)("hr",{parentName:"div"}),(0,r.kt)("ol",{parentName:"div"},(0,r.kt)("li",{parentName:"ol",id:"fn-1-8c98df"},"This is an experimental feature and might be changed in the future.",(0,r.kt)("a",{parentName:"li",href:"#fnref-1-8c98df",className:"footnote-backref"},"\u21a9")),(0,r.kt)("li",{parentName:"ol",id:"fn-2-8c98df"},"This experiment was carried out on an M1 Macbook Pro with 16GB of memory and 8 threads. Sideway information passing is disabled.",(0,r.kt)("a",{parentName:"li",href:"#fnref-2-8c98df",className:"footnote-backref"},"\u21a9")))))}d.isMDXComponent=!0}}]);