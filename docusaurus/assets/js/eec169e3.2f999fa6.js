"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[7990],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),m=a,y=p["".concat(s,".").concat(m)]||p[m]||d[m]||i;return n?r.createElement(y,o(o({ref:t},c),{},{components:n})):r.createElement(y,o({ref:t},c))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1741:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const i={title:"C++",sidebar_position:3},o=void 0,l={unversionedId:"getting-started/cpp",id:"getting-started/cpp",title:"C++",description:"The K\xf9zu C++ API is distributed as so/dylib/dll+lib library files along with a header file (kuzu.hpp).",source:"@site/docs/getting-started/cpp.md",sourceDirName:"getting-started",slug:"/getting-started/cpp",permalink:"/docusaurus/getting-started/cpp",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"C++",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Python",permalink:"/docusaurus/getting-started/python"},next:{title:"C",permalink:"/docusaurus/getting-started/c"}},s={},u=[],c={toc:u},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The K\xf9zu C++ API is distributed as so/dylib/dll+lib library files along with a header file (",(0,a.kt)("inlineCode",{parentName:"p"},"kuzu.hpp"),").\nThe C++ API can be downloaded ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/kuzudb/kuzu/releases/latest"},"here"),".\nOnce you've downloaded and extracted the C++ API into a directory, it's ready to use without any additional installation. Just need to specify the library search path for the linker.\nBelow is a brief guide on how to get started.\nDetails of the C++ API is ",(0,a.kt)("a",{parentName:"p",href:"../client-apis/cpp-api"},"here"),"."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Setup:\nIn this example, we assume that the so/dylib/dll+lib, the header file, the CSV files, and the cpp code file is under the same directory:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\u251c\u2500\u2500 include                                    \n\u2502   \u251c\u2500\u2500 kuzu.hpp\n\u2502\xa0\xa0 \u2514\u2500\u2500 ......\n\u251c\u2500\u2500 libkuzu.so / libkuzu.dylib / kuzu_shared.dll + kuzu_shared.lib\n\u251c\u2500\u2500 test.cpp                                            \n\u251c\u2500\u2500 user.csv\n\u251c\u2500\u2500 city.csv\n\u251c\u2500\u2500 follows.csv\n\u2514\u2500\u2500 lives-in.csv\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"test.cpp")," program:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n\n#include "include/kuzu.hpp"\n\nusing namespace kuzu::main;\nusing namespace std;\n\nint main() {\n    // Create an empty database.\n    SystemConfig systemConfig;\n    auto database = make_unique<Database>("test", systemConfig);\n\n    // Connect to the database.\n    auto connection = make_unique<Connection>(database.get());\n\n    // Create the schema.\n    connection->query("CREATE NODE TABLE User(name STRING, age INT64, PRIMARY KEY (name))");\n    connection->query("CREATE NODE TABLE City(name STRING, population INT64, PRIMARY KEY (name))");\n    connection->query("CREATE REL TABLE Follows(FROM User TO User, since INT64)");\n    connection->query("CREATE REL TABLE LivesIn(FROM User TO City)");\n\n    // Load data.\n    connection->query("COPY User FROM \\"user.csv\\"");\n    connection->query("COPY City FROM \\"city.csv\\"");\n    connection->query("COPY Follows FROM \\"follows.csv\\"");\n    connection->query("COPY LivesIn FROM \\"lives-in.csv\\"");\n\n    // Execute a simple query.\n    auto result =\n        connection->query("MATCH (a:User)-[f:Follows]->(b:User) RETURN a.name, f.since, b.name;");\n\n    // Output query result.\n    while (result->hasNext()) {\n        auto row = result->getNext();\n        std::cout << row->getValue(0)->getValue<string>() << " "\n                  << row->getValue(1)->getValue<int64_t>() << " "\n                  << row->getValue(2)->getValue<string>() << std::endl;\n    }\n    return 0;\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Compile and run ",(0,a.kt)("inlineCode",{parentName:"li"},"test.cpp"),":\nSince we did not install the ",(0,a.kt)("inlineCode",{parentName:"li"},"libkuzu")," as a system library, we need to override the linker search path to correctly compile the C++ code and run the compiled program.\nOn Linux:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"env LIBRARY_PATH=. LD_LIBRARY_PATH=. g++ test.cpp -std=c++2a -lkuzu -lpthread -D_GLIBCXX_USE_CXX11_ABI=0\nenv LIBRARY_PATH=. LD_LIBRARY_PATH=. ./a.out\n")),(0,a.kt)("p",null,"On macOS:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"env DYLD_LIBRARY_PATH=. LIBRARY_PATH=. clang++ test.cpp -std=c++20 -lkuzu\nenv DYLD_LIBRARY_PATH=. LIBRARY_PATH=. ./a.out\n")),(0,a.kt)("p",null,"On Windows the library file is passed to the compiler directly and the current directory is used automatically when searching for ",(0,a.kt)("inlineCode",{parentName:"p"},"kuzu_shared.dll")," at runtime:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cl /std:c++20 /EHsc test.cpp kuzu_shared.lib\n./test.exe\n")),(0,a.kt)("p",null,"Expected output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Adam 2020 Karissa\nAdam 2020 Zhang\nKarissa 2021 Zhang\nZhang 2022 Noura\n")))}d.isMDXComponent=!0}}]);