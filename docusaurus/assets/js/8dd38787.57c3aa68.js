"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[8481],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),i=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=i(e.components);return r.createElement(s.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},b=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),c=i(t),b=a,m=c["".concat(s,".").concat(b)]||c[b]||d[b]||o;return t?r.createElement(m,l(l({ref:n},p),{},{components:t})):r.createElement(m,l({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=b;var u={};for(var s in n)hasOwnProperty.call(n,s)&&(u[s]=n[s]);u.originalType=e,u[c]="string"==typeof e?e:a,l[1]=u;for(var i=2;i<o;i++)l[i]=t[i];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}b.displayName="MDXCreateElement"},5479:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>u,default:()=>b,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var r=t(7462),a=(t(7294),t(3905)),o=t(5973);const l={title:"Subquery",sidebar_position:13},u=void 0,s={unversionedId:"cypher/subquery",id:"cypher/subquery",title:"Subquery",description:"Subquery in K\xf9zu can only be a single MATCH clause optionally followed by a WHERE clause. No other clauses is allowed.",source:"@site/docs/cypher/subquery.md",sourceDirName:"cypher",slug:"/cypher/subquery",permalink:"/docusaurus/cypher/subquery",draft:!1,tags:[],version:"current",sidebarPosition:13,frontMatter:{title:"Subquery",sidebar_position:13},sidebar:"docSidebar",previous:{title:"Copy",permalink:"/docusaurus/cypher/copy"},next:{title:"Connection Configuration",permalink:"/docusaurus/cypher/configuration"}},i={},p=[{value:"Exists Subquery",id:"exists-subquery",level:2},{value:"Nested Exists Subquery",id:"nested-exists-subquery",level:3},{value:"Count Subquery",id:"count-subquery",level:2}],c={toc:p},d="wrapper";function b(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("img",{src:o.Z,style:{width:800}}),(0,a.kt)("p",null,"Subquery in K\xf9zu can only be a single ",(0,a.kt)("inlineCode",{parentName:"p"},"MATCH")," clause optionally followed by a ",(0,a.kt)("inlineCode",{parentName:"p"},"WHERE")," clause. No other clauses is allowed."),(0,a.kt)("h2",{id:"exists-subquery"},"Exists Subquery"),(0,a.kt)("p",null,"Exists subquery checks if given pattern has at least one match in the graph."),(0,a.kt)("p",null,"The following query searches for all Users's who have at least one 3-hop Follows\npath starting from them."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"MATCH (a:User)\nWHERE a.age < 100 AND EXISTS { MATCH (a)-[:Follows*3..3]->(b:User)} \nRETURN a.name, a.age;\n")),(0,a.kt)("p",null,"Output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"------------------\n| a.name | a.age |\n------------------\n| Adam   | 30    |\n------------------\n")),(0,a.kt)("p",null,"View example in ",(0,a.kt)("a",{parentName:"p",href:"https://colab.research.google.com/drive/1NcR-xL4Rb7nprgbvk6N2dIP30oqyUucm#scrollTo=12JMqYmA3Iol"},"Colab"),"."),(0,a.kt)("h3",{id:"nested-exists-subquery"},"Nested Exists Subquery"),(0,a.kt)("p",null,"You can also form nested sub-queries, i.e., a WHERE EXISTS sub-query inside another WHERE EXISTS. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"MATCH (a:User)\nWHERE a.age < 100 AND EXISTS { MATCH (a)-[:Follows*3..3]->(b:User) WHERE EXISTS {MATCH (b)-[:Follows]->(c:User)} } \nRETURN a.name, a.age;\n")),(0,a.kt)("p",null,"Output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"------------------\n| a.name | a.age |\n------------------\n")),(0,a.kt)("p",null,'This query returns an empty result because in example database, only "Adam" has a 3-hop Follows path and the destination "b" node of that path is "Noura". However, "Noura" does not have an outgoing Follows relationship. '),(0,a.kt)("p",null,"If we instead specified that the destination b node has an incoming edge, by swapping the direction\nof the relationship in the inner ",(0,a.kt)("inlineCode",{parentName:"p"},"(b)-[:Follows]->(c:User)")," pattern to ",(0,a.kt)("inlineCode",{parentName:"p"},"(b)<-[:Follows]-(c:User)"),", we would get the\n",(0,a.kt)("inlineCode",{parentName:"p"},"(Adam, 30)")," tuple back because Noura has incoming Follows relationships."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"MATCH (a:User)\nWHERE a.age < 100 AND EXISTS { MATCH (a)-[:Follows*3..3]->(b:User) WHERE EXISTS {MATCH (b)<-[:Follows]-(c:User)} } \nRETURN a.name, a.age;\n")),(0,a.kt)("p",null,"Output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"------------------\n| a.name | a.age |\n------------------\n| Adam   | 30    |\n------------------\n")),(0,a.kt)("p",null,"View example in ",(0,a.kt)("a",{parentName:"p",href:"https://colab.research.google.com/drive/1NcR-xL4Rb7nprgbvk6N2dIP30oqyUucm#scrollTo=iuHDzuVu3g7A"},"Colab"),"."),(0,a.kt)("h2",{id:"count-subquery"},"Count Subquery"),(0,a.kt)("p",null,"Count subquery checks the number of matches for given pattern in the graph. The output of this counting can be bound to a variable with aliasing.\nFor example, the following query counts number of followers for each user."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"MATCH (a:User) RETURN a.name, COUNT { MATCH (a)<-[:Follows]-(b:User) } AS num_follower ORDER BY num_follower;\n")),(0,a.kt)("p",null,"Output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"--------------------------\n| a.name  | num_follower |\n--------------------------\n| Adam    | 0            |\n--------------------------\n| Karissa | 1            |\n--------------------------\n| Noura   | 1            |\n--------------------------\n| Zhang   | 2            |\n--------------------------\n")),(0,a.kt)("p",null,"A count subquery can also be used in a ",(0,a.kt)("inlineCode",{parentName:"p"},"WHERE")," clause as an expression that returns an integer value."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"MATCH (a:User) \nWHERE COUNT { MATCH (a)<-[:Follows]-(b:User) } = 1\nRETURN a.name;\n")))}b.isMDXComponent=!0},5973:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/running-example-db76aa393fd70d29c831f1527455440a.png"}}]);