"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[4087],{3905:(a,e,t)=>{t.d(e,{Zo:()=>l,kt:()=>k});var n=t(7294);function s(a,e,t){return e in a?Object.defineProperty(a,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):a[e]=t,a}function m(a,e){var t=Object.keys(a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(a);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),t.push.apply(t,n)}return t}function r(a){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?m(Object(t),!0).forEach((function(e){s(a,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(t)):m(Object(t)).forEach((function(e){Object.defineProperty(a,e,Object.getOwnPropertyDescriptor(t,e))}))}return a}function p(a,e){if(null==a)return{};var t,n,s=function(a,e){if(null==a)return{};var t,n,s={},m=Object.keys(a);for(n=0;n<m.length;n++)t=m[n],e.indexOf(t)>=0||(s[t]=a[t]);return s}(a,e);if(Object.getOwnPropertySymbols){var m=Object.getOwnPropertySymbols(a);for(n=0;n<m.length;n++)t=m[n],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(a,t)&&(s[t]=a[t])}return s}var i=n.createContext({}),o=function(a){var e=n.useContext(i),t=e;return a&&(t="function"==typeof a?a(e):r(r({},e),a)),t},l=function(a){var e=o(a.components);return n.createElement(i.Provider,{value:e},a.children)},h="mdxType",c={inlineCode:"code",wrapper:function(a){var e=a.children;return n.createElement(n.Fragment,{},e)}},N=n.forwardRef((function(a,e){var t=a.components,s=a.mdxType,m=a.originalType,i=a.parentName,l=p(a,["components","mdxType","originalType","parentName"]),h=o(t),N=s,k=h["".concat(i,".").concat(N)]||h[N]||c[N]||m;return t?n.createElement(k,r(r({ref:e},l),{},{components:t})):n.createElement(k,r({ref:e},l))}));function k(a,e){var t=arguments,s=e&&e.mdxType;if("string"==typeof a||s){var m=t.length,r=new Array(m);r[0]=N;var p={};for(var i in e)hasOwnProperty.call(e,i)&&(p[i]=e[i]);p.originalType=a,p[h]="string"==typeof a?a:s,r[1]=p;for(var o=2;o<m;o++)r[o]=t[o];return n.createElement.apply(null,r)}return n.createElement.apply(null,t)}N.displayName="MDXCreateElement"},7215:(a,e,t)=>{t.r(e),t.d(e,{assets:()=>N,contentTitle:()=>h,default:()=>g,frontMatter:()=>l,metadata:()=>c,toc:()=>k});var n=t(7462),s=(t(7294),t(3905)),m=t(6757),r=t(9314),p=t(2451),i=t(3833),o=t(4440);const l={slug:"wcoj",authors:["semih"],tags:["internals"]},h="Why (Graph) DBMSs Need New Join Algorithms: The Story of Worst-case Optimal Join Algorithms",c={permalink:"/docusaurus/blog/wcoj",source:"@site/blog/2023-02-22-wcoj/index.md",title:"Why (Graph) DBMSs Need New Join Algorithms: The Story of Worst-case Optimal Join Algorithms",description:"Joins of a sets of records is objectively the most expensive operation in DBMSs.",date:"2023-02-22T00:00:00.000Z",formattedDate:"February 22, 2023",tags:[{label:"internals",permalink:"/docusaurus/blog/tags/internals"}],readingTime:20.76,hasTruncateMarker:!0,authors:[{name:"Semih Saliho\u011flu",url:"https://cs.uwaterloo.ca/~ssalihog/",key:"semih"}],frontMatter:{slug:"wcoj",authors:["semih"],tags:["internals"]},prevItem:{title:"K\xf9zu 0.0.3 Release",permalink:"/docusaurus/blog/kuzu-0.0.3-release"},nextItem:{title:"K\xf9zu 0.0.2 Release",permalink:"/docusaurus/blog/kuzu-0.0.2-release"}},N={authorsImageUrls:[void 0]},k=[{value:"Joins, Running Example &amp; Traditional Table-at-a-time Joins",id:"joins-running-example--traditional-table-at-a-time-joins",level:2},{value:"A Math Puzzle That Started it All",id:"a-math-puzzle-that-started-it-all",level:2},{value:"Problem With Table-at-a-time/Binary Joins",id:"problem-with-table-at-a-timebinary-joins",level:2},{value:"Solution: Column-at-a-time &quot;Worst-case Optimal&quot; Join Algorithms",id:"solution-column-at-a-time-worst-case-optimal-join-algorithms",level:2},{value:"How K\xf9zu Performs Worst-case Optimal Join Algorithms:",id:"how-k\xf9zu-performs-worst-case-optimal-join-algorithms",level:2},{value:"A Thank You &amp; an Anecdote About Knuth&#39;s Reaction to the Term &quot;Worst-case Optimal&quot;",id:"a-thank-you--an-anecdote-about-knuths-reaction-to-the-term-worst-case-optimal",level:2},{value:"Final Words",id:"final-words",level:2}],u={toc:k},d="wrapper";function g(a){let{components:e,...t}=a;return(0,s.kt)(d,(0,n.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Joins of a sets of records is objectively the most expensive operation in DBMSs.\nIn my previous post on ",(0,s.kt)("a",{parentName:"p",href:"/docusaurus/blog/factorization"},"factorization"),", I said that in the field of databases, once\nin a while you run into a very simple idea that deviates from the norm that gets you very excited.\nToday, I will discuss another such idea, worst-case optimal join (wcoj) algorithms.\nWcoj algorithms and the theory around it in one sentence says this:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},'Queries involving complex "cyclic joins" over many-to-many relationships should be\nevaluated column at a time instead of table at a time, which is the norm. ')),(0,s.kt)("p",null,"Wcoj algorithms find their best applications when finding cyclic patterns on graphs,\nsuch as cliques or cycles, which is common in the workloads of fraud detection and\nrecommendation applications. As such, they should be integrated into every graph DBMS\n(and possibly to RDBMSs) and I am convinced that they eventually will."),(0,s.kt)("admonition",{title:"Tldr: The key takeaways are:",type:"tip"},(0,s.kt)("ul",{parentName:"admonition"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"History of Wcoj Algorithms:"),' Research on wcoj algorithms started with a solution to open question\nabout the maximum sizes of join queries. This result made researchers realize this: the traditional\n"binary join plans" paradigm of generating query plans that join 2 tables a time\nuntil all of the tables in the query are joined is provably\nsuboptimal for some queries. Specifically, when join queries are\ncyclic, which in graph terms means when the searched graph pattern has cycles\nin it, and the relationships between records are many-to-many, then this\nparadigm can generate unnecessarily large amounts of intermediate results.'),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Core Algorithmic Step of Wcoj Algorithms:"),"  Wcoj algorithms fix this sub-optimality by\nperforming the joins one column at a time (instead of 2 tables at a time) using multiway intersections."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"How K\xf9zu Integrates Wcoj Algorithms:"),' K\xf9zu generates plans that seamlessly mix binary joins\nand wcoj-style multiway intersections. Multiway intersections are performed by an operator called\n"multiway HashJoin", which has one or more build phases that creates one or more hash tables that stores\nsorted adjacency lists; and a probe phase that performs multi-way intersections using the sorted lists.'),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},'Yes, the Term "Worst-case Optimal" Is Confusing Even to Don Knuth:'),' I know, Don Knuth also found the term\n"worst-case optimal" a bit confusing. See my ',(0,s.kt)("a",{parentName:"li",href:"#a-thank-you--an-anecdote-about-knuths-reaction-to-the-term-worst-case-optimal"},"anecdote on this"),".\nIt basically means that the worst-case runtimes of these algorithms are asymptotically optimal."))),(0,s.kt)("h2",{id:"joins-running-example--traditional-table-at-a-time-joins"},"Joins, Running Example & Traditional Table-at-a-time Joins"),(0,s.kt)("p",null,"Joins are objectively the most expensive and powerful operation in DBMSs.\nIn SQL, you indicate them in the FROM clause by listing\na set of table names, in Cypher in the MATCH clause, where you draw a graph pattern\nto describe how to join node records with each other.\nAs a running example, consider a simple social network of users and followers,\nwhose node-link diagram is shown below. I am also showing the table that contains these records\nin a ",(0,s.kt)("inlineCode",{parentName:"p"},"User")," (ignore the ",(0,s.kt)("inlineCode",{parentName:"p"},"name")," property for now) and ",(0,s.kt)("inlineCode",{parentName:"p"},"Follows")," tables."),(0,s.kt)("div",{class:"img-center"},(0,s.kt)("img",{src:m.Z})),(0,s.kt)("p",null,"Consider finding triangles, which is one of the simplest\nforms of cycles and cliques, in this network. The SQL and Cypher\nversions of this query are shown below. "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"SQL:\nSELECT *\nFROM  Follows f1, Follows f2, Follows f3\nWHERE f1.dst=f2.src AND f2.dst=f3.src AND\n      f3.dst = f1.src\n\nCypher:\nMATCH (a:User)-[f1:Follows]->(b:User)-[f2:Follows]->(c:User)-[f3:Follows]->(a)\nRETURN  *\n")),(0,s.kt)("p",null,'That long MATCH clause "draws" a triangle and for our case here, this is equivalent\nto joining three copies of the Follows table. '),(0,s.kt)("p",null,"Now ever since the System R days and ",(0,s.kt)("a",{parentName:"p",href:"https://courses.cs.duke.edu/compsci516/cps216/spring03/papers/selinger-etal-1979.pdf"},"Patricia Selinger's 1979 seminal paper")," that\ndescribed how System R compiled and optimized SQL queries, there has been an\nunchallenged dogma in DBMSs that the joins specified in the query would be\nevaluated pairwise, table at a time.\nHere's a blurb from Selinger's paper, where one can see this\nassumption:\n\"",(0,s.kt)("em",{parentName:"p"},"In System R a user need not know how the\ntuples are physically stored ... Nor does a user\nspecify in what order joins are to be performed. The System\nR optimizer chooses both join order and ..."),'"\nTo this day, this is the norm. DBMSs pick a "join order" which is the order in\nwhich the tables should be joined iteratively 2 at a time.\nIn the above example, for example\nthere are three possible join orders. One way to represent these orders is by\nwriting different parenthesization of the joins: '),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"(i) ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"F"),(0,s.kt)("mn",{parentName:"mrow"},"1"),(0,s.kt)("mo",{parentName:"mrow"},"\u22c8"),(0,s.kt)("mi",{parentName:"mrow"},"F"),(0,s.kt)("mn",{parentName:"mrow"},"2"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,s.kt)("mo",{parentName:"mrow"},"\u22c8"),(0,s.kt)("mi",{parentName:"mrow"},"F"),(0,s.kt)("mn",{parentName:"mrow"},"3"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"((F1 \\bowtie F2) \\bowtie F3)")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mopen"},"(("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"F"),(0,s.kt)("span",{parentName:"span",className:"mord"},"1"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"\u22c8"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"F"),(0,s.kt)("span",{parentName:"span",className:"mord"},"2"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"\u22c8"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"F"),(0,s.kt)("span",{parentName:"span",className:"mord"},"3"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"))))),"; (ii) ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"F"),(0,s.kt)("mn",{parentName:"mrow"},"1"),(0,s.kt)("mo",{parentName:"mrow"},"\u22c8"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"F"),(0,s.kt)("mn",{parentName:"mrow"},"2"),(0,s.kt)("mo",{parentName:"mrow"},"\u22c8"),(0,s.kt)("mi",{parentName:"mrow"},"F"),(0,s.kt)("mn",{parentName:"mrow"},"3"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"(F1 \\bowtie (F2 \\bowtie F3))")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"F"),(0,s.kt)("span",{parentName:"span",className:"mord"},"1"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"\u22c8"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"F"),(0,s.kt)("span",{parentName:"span",className:"mord"},"2"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"\u22c8"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"F"),(0,s.kt)("span",{parentName:"span",className:"mord"},"3"),(0,s.kt)("span",{parentName:"span",className:"mclose"},"))"))))),";\nand (iii) ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"F"),(0,s.kt)("mn",{parentName:"mrow"},"1"),(0,s.kt)("mo",{parentName:"mrow"},"\u22c8"),(0,s.kt)("mi",{parentName:"mrow"},"F"),(0,s.kt)("mn",{parentName:"mrow"},"3"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,s.kt)("mo",{parentName:"mrow"},"\u22c8"),(0,s.kt)("mi",{parentName:"mrow"},"F"),(0,s.kt)("mn",{parentName:"mrow"},"2"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"((F1 \\bowtie F3) \\bowtie F2)")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mopen"},"(("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"F"),(0,s.kt)("span",{parentName:"span",className:"mord"},"1"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"\u22c8"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"F"),(0,s.kt)("span",{parentName:"span",className:"mord"},"3"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"\u22c8"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"F"),(0,s.kt)("span",{parentName:"span",className:"mord"},"2"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"))))),". ")),(0,s.kt)("p",null,"The optimization problem for a system is of course more complex than just\nordering tables because the system also has to choose which\nbinary join algorithm to use when joining each pair of tables, e.g., hash joins vs merge joins.\nBut take any system you want, and they will all follow the same paradigm of\njoining 2 base or intermediate tables iteratively, until all tables are joined:\nhence the term ",(0,s.kt)("em",{parentName:"p"},"binary joins")," to describe the plans of existing systems."),(0,s.kt)("h2",{id:"a-math-puzzle-that-started-it-all"},"A Math Puzzle That Started it All"),(0,s.kt)("p",null,"So, what's the problem with binary join plans? When join queries are cyclic\nand the relationships are many-to-many, they can generate provably large amounts\nof (so unnecessary in a formal sense) intermediate results. First, cyclicity for\njoin queries has formal (and a bit intimidating) definitions but if you think of\ngraph patterns, it simply means that the searched pattern's undirected version has\ncycles. Why do binary joins generate unnecessarily large intermediate results? I'll\nget to this below but first a bit of history on the origins of this insight.\nThe whole topic of \"worst-case optimal joins\" started with 2 papers, a ",(0,s.kt)("a",{parentName:"p",href:"https://arxiv.org/abs/1711.04506"},"2007 SODA"),"\nand a ",(0,s.kt)("a",{parentName:"p",href:"https://arxiv.org/abs/1711.03860"},"2008 FOCS"),"\npaper, which are top venues in algorithms and theory. In these papers,\nseveral theoreticians solved a fundamental open question\nabout join queries. Suppose I give you:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"An arbitrary natural join query, say of ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"m")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"m")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"m")))))," relations. In DBMS literature we denote such\nqueries as ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"Q"),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mi",{parentName:"mrow"},"R"),(0,s.kt)("mn",{parentName:"mrow"},"1"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"a"),(0,s.kt)("mn",{parentName:"msub"},"11")),(0,s.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,s.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"a"),(0,s.kt)("mrow",{parentName:"msub"},(0,s.kt)("mi",{parentName:"mrow"},"r"),(0,s.kt)("mn",{parentName:"mrow"},"1"))),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,s.kt)("mo",{parentName:"mrow"},"\u22c8"),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,s.kt)("mo",{parentName:"mrow"},"\u22c8"),(0,s.kt)("mi",{parentName:"mrow"},"R"),(0,s.kt)("mi",{parentName:"mrow"},"m"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"a"),(0,s.kt)("mrow",{parentName:"msub"},(0,s.kt)("mi",{parentName:"mrow"},"m"),(0,s.kt)("mn",{parentName:"mrow"},"1"))),(0,s.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,s.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"a"),(0,s.kt)("mrow",{parentName:"msub"},(0,s.kt)("mi",{parentName:"mrow"},"r"),(0,s.kt)("mi",{parentName:"mrow"},"m"))),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"Q=R1(a_{11}, ..., a_{r1}) \\bowtie ... \\bowtie Rm(a_{m1}, ..., a_{rm})")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8778em",verticalAlign:"-0.1944em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"Q"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.00773em"}},"R"),(0,s.kt)("span",{parentName:"span",className:"mord"},"1"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"11"))))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mpunct"},","),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"..."),(0,s.kt)("span",{parentName:"span",className:"mpunct"},","),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.02778em"}},"r"),(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"1"))))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"\u22c8"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.51em",verticalAlign:"-0.005em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"..."),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"\u22c8"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.00773em"}},"R"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"m"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"m"),(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"1"))))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mpunct"},","),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"..."),(0,s.kt)("span",{parentName:"span",className:"mpunct"},","),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.1514em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.02778em"}},"r"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"m"))))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"))))),"."),(0,s.kt)("li",{parentName:"ol"},"Sizes of R1, ..., Rm, e.g., for simplicity assume they all have ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"I"),(0,s.kt)("mi",{parentName:"mrow"},"N")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"IN")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07847em"}},"I"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N")))))," many tuples. ")),(0,s.kt)("p",null,'"Natural" here means that the join predicates are equality predicates on identical column\nnames. You, as the second person in this puzzle, are allowed to set the values inside these relations.\n',(0,s.kt)("strong",{parentName:"p"},"The open question was: how large can you make the final output?")," So for example, if I told you that there are\n",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"I"),(0,s.kt)("mi",{parentName:"mrow"},"N")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"IN")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07847em"}},"I"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N")))))," many tuples in the ",(0,s.kt)("inlineCode",{parentName:"p"},"Follows")," tables, what is the maximum number of triangle outputs there can  be?",(0,s.kt)("sup",{parentName:"p",id:"fnref-1-627daf"},(0,s.kt)("a",{parentName:"sup",href:"#fn-1-627daf",className:"footnote-ref"},"1")),"\nEven more concretely for the triangle query, the question is: out of all possible graphs with ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"I"),(0,s.kt)("mi",{parentName:"mrow"},"N")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"IN")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07847em"}},"I"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N")))))," many edges,\nwhat is the maximum number of triangles they contain?"),(0,s.kt)("div",{class:"img-center"},(0,s.kt)("img",{src:r.Z})),(0,s.kt)("p",null,"It still surprises me that the answer to this question was not known until 2008.\nIt just looks like a fundamental question someone in databases must have answered before.\nNow excuse me for bombarding your brains with some necessary math definitions.\nThese two papers showed that the answer is: ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"I"),(0,s.kt)("msup",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msup"},"N"),(0,s.kt)("msup",{parentName:"msup"},(0,s.kt)("mi",{parentName:"msup"},"\u03c1"),(0,s.kt)("mstyle",{parentName:"msup",mathcolor:"#cc0000"},(0,s.kt)("mtext",{parentName:"mstyle"},"\\*"))))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"IN^{\\rho^\\*}")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1.0397em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07847em"}},"I"),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"1.0397em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"\u03c1"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.9667em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.9667em",marginRight:"0.0714em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.5357em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size3 size1 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord text mtight",style:{color:"#cc0000"}},(0,s.kt)("span",{parentName:"span",className:"mord mtight",style:{color:"#cc0000"}},"\\*"))))))))))))))))))))),", where ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("msup",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msup"},"\u03c1"),(0,s.kt)("mstyle",{parentName:"msup",mathcolor:"#cc0000"},(0,s.kt)("mtext",{parentName:"mstyle"},"\\*")))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\rho^\\*")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1.0824em",verticalAlign:"-0.1944em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"\u03c1"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.888em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord text mtight",style:{color:"#cc0000"}},(0,s.kt)("span",{parentName:"span",className:"mord mtight",style:{color:"#cc0000"}},"\\*")))))))))))))," is a property\nof ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"Q")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"Q")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8778em",verticalAlign:"-0.1944em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"Q")))))," called the ",(0,s.kt)("em",{parentName:"p"},"fractional edge cover number")," of ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"Q")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"Q")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8778em",verticalAlign:"-0.1944em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"Q"))))),'.\nThis is the solution to\nan optimization problem and best explained by thinking about the "join query graph",\nwhich, for our purposes, is the triangle graph pattern (ignoring the edge directions), shown\nin Fig 2a and 2b.'),(0,s.kt)("p",null,"The optimization problem is this:\nput a weight between ","[0, 1]",' to\neach "query edge" such that each "query node" is "covered", i.e., the sum of\nthe query edges touching each query node is > 1. Each such solution is called an\nedge cover. The problem is to find the edge cover whose total weight is the minimum. That is\ncalled the fractional edge cover number of the query. For the triangle query,\none edge cover, shown in Fig 2a, is ',"[1, 1, 0]",", which has\na total weight of 1 + 1 + 0 = 2.\nThe minimum weight edge cover is ","[1/2, 1/2, 1/2]",", shown in Fig 2b,\nwith a total weight  of 1.5. Therefore, the fractional edge cover number ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("msup",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msup"},"\u03c1"),(0,s.kt)("mstyle",{parentName:"msup",mathcolor:"#cc0000"},(0,s.kt)("mtext",{parentName:"mstyle"},"\\*")))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\rho^\\*")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1.0824em",verticalAlign:"-0.1944em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"\u03c1"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.888em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord text mtight",style:{color:"#cc0000"}},(0,s.kt)("span",{parentName:"span",className:"mord mtight",style:{color:"#cc0000"}},"\\*"))))))))))))),"\nof the triangle query is 1.5.\nIn general, each edge cover is an upper bound but the FOCS paper showed\nthat the fractional edge cover number is the tight upper bound.\nSo the maximum number of triangles there can be on a graph with ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"I"),(0,s.kt)("mi",{parentName:"mrow"},"N")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"IN")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07847em"}},"I"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N")))))," edges is ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"\u0398"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"I"),(0,s.kt)("msup",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msup"},"N"),(0,s.kt)("mn",{parentName:"msup"},"1.5")),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\Theta(IN^{1.5})")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1.0641em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"\u0398"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07847em"}},"I"),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8141em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"1.5"))))))))),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"))))),"\nand this is tight, i.e., there are such graphs. Nice scientific progress!\nNowadays, the quantity ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"I"),(0,s.kt)("msup",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msup"},"N"),(0,s.kt)("msup",{parentName:"msup"},(0,s.kt)("mi",{parentName:"msup"},"\u03c1"),(0,s.kt)("mstyle",{parentName:"msup",mathcolor:"#cc0000"},(0,s.kt)("mtext",{parentName:"mstyle"},"\\*"))))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"IN^{\\rho^\\*}")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1.0397em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07847em"}},"I"),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"1.0397em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"\u03c1"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.9667em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.9667em",marginRight:"0.0714em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.5357em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size3 size1 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord text mtight",style:{color:"#cc0000"}},(0,s.kt)("span",{parentName:"span",className:"mord mtight",style:{color:"#cc0000"}},"\\*")))))))))))))))))))))," is known as the ",(0,s.kt)("inlineCode",{parentName:"p"},"AGM bound")," of a query,\nafter the first letters of the last names of the authors of the FOCS paper."),(0,s.kt)("h2",{id:"problem-with-table-at-a-timebinary-joins"},"Problem With Table-at-a-time/Binary Joins"),(0,s.kt)("p",null,"Now this immediately made the same researchers realize that binary join plans are\nprovably sub-optimal because they can generate polynomially more intermediate results\nthan the AGM bound of the query. This happens because on cyclic queries,\nthe strategy of joining tables\n2 at a time may lead to unnecessarily computing some acyclic sub-joins.\nFor example, in the triangle query, the plan\n",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"F"),(0,s.kt)("mn",{parentName:"mrow"},"1"),(0,s.kt)("mo",{parentName:"mrow"},"\u22c8"),(0,s.kt)("mi",{parentName:"mrow"},"F"),(0,s.kt)("mn",{parentName:"mrow"},"2"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,s.kt)("mo",{parentName:"mrow"},"\u22c8"),(0,s.kt)("mi",{parentName:"mrow"},"F"),(0,s.kt)("mn",{parentName:"mrow"},"3"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"((F1 \\bowtie F2) \\bowtie F3)")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mopen"},"(("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"F"),(0,s.kt)("span",{parentName:"span",className:"mord"},"1"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"\u22c8"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"F"),(0,s.kt)("span",{parentName:"span",className:"mord"},"2"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"\u22c8"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"F"),(0,s.kt)("span",{parentName:"span",className:"mord"},"3"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")")))))," first computes ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"F"),(0,s.kt)("mn",{parentName:"mrow"},"1"),(0,s.kt)("mo",{parentName:"mrow"},"\u22c8"),(0,s.kt)("mi",{parentName:"mrow"},"F"),(0,s.kt)("mn",{parentName:"mrow"},"2"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"(F1 \\bowtie F2)")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"F"),(0,s.kt)("span",{parentName:"span",className:"mord"},"1"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"\u22c8"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"F"),(0,s.kt)("span",{parentName:"span",className:"mord"},"2"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")")))))," sub-join,\nwhich in graph terms computes the 2-paths in the graph.\nThis is a problem because often there can be many more of these acyclic sub-joins\nthan there can be outputs for the cyclic join.\nFor this plan, there can\nbe ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"I"),(0,s.kt)("msup",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msup"},"N"),(0,s.kt)("mn",{parentName:"msup"},"2"))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"IN^2")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8141em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07847em"}},"I"),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8141em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"2"))))))))))))," many 2-paths (which is the AGM bound of 2-paths),\nwhich is polynomially larger than ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"I"),(0,s.kt)("msup",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msup"},"N"),(0,s.kt)("mn",{parentName:"msup"},"1.5"))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"IN^{1.5}")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8141em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07847em"}},"I"),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8141em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"1.5"))))))))))))),".\nFor example in our running example, there are 1000","*","1000 = 1M many 2 paths,\nbut on a graph with 2001 edges there can be at most 89.5K triangles (well ours\nhas only 3 triangles (because the triangle query we are using is symmetric\nthe sole triangle would generate 3 outputs for 3 rotations of it))."),(0,s.kt)("p",null,"Any other plan in this case would have generated ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"I"),(0,s.kt)("msup",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msup"},"N"),(0,s.kt)("mn",{parentName:"msup"},"2"))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"IN^2")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8141em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07847em"}},"I"),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8141em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"2"))))))))))))," many 2-paths,\nso there is no good binary join plan here. I want to emphasize that this sub-optimality does not occur\nwhen the queries are acyclic or when the dataset does not have\nmany-to-many relationships. If the joins were primary-foreign key non-growing joins,\nthen binary join plans will work just fine. "),(0,s.kt)("h2",{id:"solution-column-at-a-time-worst-case-optimal-join-algorithms"},'Solution: Column-at-a-time "Worst-case Optimal" Join Algorithms'),(0,s.kt)("p",null,"So the immediate\nnext question is: are there algorithms whose runtimes can be bounded by\n",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"O"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"I"),(0,s.kt)("msup",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msup"},"N"),(0,s.kt)("mn",{parentName:"msup"},"1.5")),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(IN^{1.5})")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1.0641em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07847em"}},"I"),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8141em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"1.5"))))))))),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"))))),"? If so, how are they different? The answer to this question\nis a bit anti-climactic. The core idea existed in the 2007 SODA and 2008 FOCS papers,\nthough it was refined more ~4 years later in some theoretical papers\nby ",(0,s.kt)("a",{parentName:"p",href:"https://hung-q-ngo.github.io/"},"Hung Ngo"),", ",(0,s.kt)("a",{parentName:"p",href:"https://u.cs.biu.ac.il/~porat/"},"Ely Porat"),",\n",(0,s.kt)("a",{parentName:"p",href:"https://cs.stanford.edu/~chrismre/"},"Chris R\xe9"),", and ",(0,s.kt)("a",{parentName:"p",href:"https://cse.buffalo.edu/faculty/atri/"},"Atri Rudra"),"\nin the database fields ",(0,s.kt)("a",{parentName:"p",href:"https://dl.acm.org/doi/10.1145/2213556.2213565"},"PODS")," and\n",(0,s.kt)("a",{parentName:"p",href:"https://dl.acm.org/doi/10.1145/2590989.2590991"},"SIGMOD Record"),'. The answer is simply\nto perform the join column at a time, using multiway\nintersections. "Intersections of what?" you should be asking.\nFor joins over arbtrary relations, we need special indices but I want to\nskip this detail.\nIn the context of GDBMSs, GDBMSs already\nhave join indices (aka adjacency list indices) and for the common joins\nthey perform, this will be enough for our purposes.'),(0,s.kt)("p",null,'I will next demonstrate a wcoj\nalgorithm known as "Generic Join" from the ',(0,s.kt)("a",{parentName:"p",href:"https://dl.acm.org/doi/10.1145/2590989.2590991"},"SIGMOD Record paper"),'.\nIt can be seen as the simplest of all wcoj algorithms.\nAs "join order", we will pick a "column order"\ninstead of Selinger-style table order. So in our triangle query,\nthe order could be a,b,c. Then we will build indices over each relation\nthat is consistent with this order. In our case there are conceptually three (identical)\nrelations: ',(0,s.kt)("inlineCode",{parentName:"p"},"Follows1(a, b)"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"Follows2(b, c)"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"Follows3(c, a)"),". For ",(0,s.kt)("inlineCode",{parentName:"p"},"Follows1"),",\nwe need to be able to read all ",(0,s.kt)("inlineCode",{parentName:"p"},"b")," values for a given ",(0,s.kt)("inlineCode",{parentName:"p"},"a")," value (e.g., ",(0,s.kt)("inlineCode",{parentName:"p"},"a=5"),').\nIn graph terms, this just means that we need "forward join index".\nFor ',(0,s.kt)("inlineCode",{parentName:"p"},"Follows3"),", because ",(0,s.kt)("inlineCode",{parentName:"p"},"a")," comes earlier than ",(0,s.kt)("inlineCode",{parentName:"p"},"c"),", we will want an index\nthat gives us ",(0,s.kt)("inlineCode",{parentName:"p"},"c")," values for a given ",(0,s.kt)("inlineCode",{parentName:"p"},"a"),' value. This is equivalent to a\n"backward join index". In graphs, because joins happen through the\nrelationship records, which can, for the purpose of the joins,\nbe taught of as a binary relation (src, dst), 2 indices is enough\nfor our purposes. On general relations, one may need many more indices.'),(0,s.kt)("div",{class:"img-center"},(0,s.kt)("img",{src:p.Z,style:{width:600}})),(0,s.kt)("p",null,"We will iteratively find: (i) all ",(0,s.kt)("inlineCode",{parentName:"p"},"a")," values\nthat can be in the final triangles; (ii) all ",(0,s.kt)("inlineCode",{parentName:"p"},"ab"),"'s that be in the final\ntriangles; and (iii) all ",(0,s.kt)("inlineCode",{parentName:"p"},"abc"),"'s, which are the triangles. Let's simulate the computation:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Step 1: Find all ",(0,s.kt)("inlineCode",{parentName:"li"},"a"),'\'s. Here we will just take\nall nodes as possible a values. This is shown under "Step 1" in the above figure.'),(0,s.kt)("li",{parentName:"ul"},"Step 2: For each a value, e.g., a=1, we extend it to find all ",(0,s.kt)("inlineCode",{parentName:"li"},"ab"),"'s that\ncan be part of triangles: Here we use the forward index to look up all\n",(0,s.kt)("inlineCode",{parentName:"li"},"b")," values for node with ID 1. So on and so forth. This will generate the\nsecond intermediate relation."),(0,s.kt)("li",{parentName:"ul"},"Step 3: For each ",(0,s.kt)("inlineCode",{parentName:"li"},"ab")," value, e.g., the tuple (a=1 b=0), we will\nintersect all ",(0,s.kt)("inlineCode",{parentName:"li"},"c"),"'s with ",(0,s.kt)("inlineCode",{parentName:"li"},"a"),"=1, and all ",(0,s.kt)("inlineCode",{parentName:"li"},"c"),"'s with ",(0,s.kt)("inlineCode",{parentName:"li"},"b"),"=0. That is, we will intersect\nthe backward adjacency list of the node with ID 1, and forward adjacency list of\nthe node with ID 0. If the intersection is non-empty, we produce some triangles.\nIn this case, we will produce the triangle (",(0,s.kt)("inlineCode",{parentName:"li"},"a"),"=1, ",(0,s.kt)("inlineCode",{parentName:"li"},"b"),"=0, ",(0,s.kt)("inlineCode",{parentName:"li"},"c"),"=1001)\nThe result of this computation will produce the third and final\noutput table in the figure.")),(0,s.kt)("img",{align:"right",style:{width:200,paddingLeft:3},src:o.Z}),"Note that this process did not produce the 2-paths as an intermediate step, which is how wcoj algorithms fix for the sub-optimality of binary join algorithms. If your query was more complex then a wcoj algorithm can do k-way intersections where k > 2. For example on the 4-clique query shown on the right, suppose the column order is abcd, then given abc triangles, we would do a 3-way intersection of forward index of a's, backward index of b's, and forward index of c's, to complete the triangles to joins. This type of multiway intersections is the necessary algorithmic step to be efficient on cyclic queries.",(0,s.kt)("h2",{id:"how-k\xf9zu-performs-worst-case-optimal-join-algorithms"},"How K\xf9zu Performs Worst-case Optimal Join Algorithms:"),(0,s.kt)("p",null,"Our ",(0,s.kt)("a",{parentName:"p",href:"https://www.cidrdb.org/cidr2023/papers/p48-jin.pdf"},"CIDR paper")," describes this in detail, so I will be brief here.\nFirst, K\xf9zu mixes binary joins and wcoj-like multiway intersections\nfollowing some principles that my PhD student ",(0,s.kt)("a",{parentName:"p",href:"http://amine.io/"},"Amine Mhedhbi"),"\nhad worked quite hard on early in his PhD. I recommend these two papers,\none by ",(0,s.kt)("a",{parentName:"p",href:"https://www.vldb.org/pvldb/vol12/p1692-mhedhbi.pdf"},"Amine and me"),"\nand one by the ",(0,s.kt)("a",{parentName:"p",href:"https://db.in.tum.de/~freitag/papers/p1891-freitag.pdf"},"Umbra group"),"\non several different ways people have proposed for mixing binary and wcoj algorithms in query plans.\nOverall message of these studies is that, wcoj are critical when the query has a very cyclic component\nand multiway intersections can help. If the query does not have this property,\nsystems should just use binary joins.\nSo wcoj-like computations should be seen as complementing binary join plans."),(0,s.kt)("div",{class:"img-center"},(0,s.kt)("img",{src:i.Z,style:{width:600}})),(0,s.kt)("p",null,"Second, K\xf9zu performs multiway intersections in a ",(0,s.kt)("em",{parentName:"p"},"Multiway HashJoin")," operator.\nIn our CIDR paper we call this operator Multiway ASPJoin. It can\xa0be thought\nof a modified hash-join operator where we use multiple hash tables and do\nan intersection to produce outputs as I will simulate.\nLet me change the query a little and add a filter on ",(0,s.kt)("inlineCode",{parentName:"p"},"a.name = Noura"),",\nwhere ",(0,s.kt)("inlineCode",{parentName:"p"},"name")," is the primary key of ",(0,s.kt)("inlineCode",{parentName:"p"},"User")," records. You can see from Fig 1a\nthat Noura is the primary key of node with ID 1. In my simulation,\nthe Multiway HashJoin operator will take ",(0,s.kt)("inlineCode",{parentName:"p"},"ab")," tuples and extend them\nto ",(0,s.kt)("inlineCode",{parentName:"p"},"abc")," tuples through a 2-way intersection. In general multiway HashJoin\nhas 3 phases: 1 accumulate phase, build phases to build k-2 hash tables,\nand a probe phase. Here are the steps."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Step 1 - Accumulate Phase: The operator receives the ",(0,s.kt)("inlineCode",{parentName:"li"},"ab")," tuples which will be extended\nto triangles. This allows the system to see exactly\nthe forward/backward lists of which nodes will be intersected. Then, the operator passes\nthis information sideways to only scan those lists. In this case,\nbecause there is a primary key filter on Noura, the only ",(0,s.kt)("inlineCode",{parentName:"li"},"ab"),' tuple that will be read\nis (a=1,b=0). This is stored in a temporary buffer that we call "Factorized Table" in the system.'),(0,s.kt)("li",{parentName:"ul"},"Step 2 - Build Phase 1: In the first build step, Multway HashJoin will pass a nodeID filter\nto the ",(0,s.kt)("inlineCode",{parentName:"li"},"Scan Follows (a)<-(c)"),' operator with only 1=true for node ID 1, and 0 for every other node ID.\nThe operator can do this because at this stage the operator knows exactly which backward\nadjacency lists will be needed when we extend the tuple (in this case only node with ID 1\'s\nbackward list is needed). The Scan operator uses this node ID filter to scan only this backward list,\n{1001}, and avoids\nscanning the rest of the file that stores the backwards Follows edges. This list is first sorted\nbased on the IDs of the neighbor IDs and stored in a hash table, denoted as "Hash Table (a)<-(c)"\nin the figure.'),(0,s.kt)("li",{parentName:"ul"},"Step 3 - Build Phase 2: This is similar to Build phase 1. Using a semijoin filter\nwith node 0's ID, we scan only node 2's forward ",(0,s.kt)("inlineCode",{parentName:"li"},"Follows"),' list {1001, 1002, ..., 2000},\nsort it, and then store in a hash table "Hash Table (b)->(c)".'),(0,s.kt)("li",{parentName:"ul"},"Step 4 - Probe: We re-scan the accumulated ",(0,s.kt)("inlineCode",{parentName:"li"},"ab"),' tuples from the factorized table.\nFor each tuple, we first probe "Hash Table (a)<-(c)"\nand then "Hash Table (b)->(c)" to fetch two lists, intersect them, and produce outputs.\nIn this case there is only one tuple (a=1, b=0), so we will fetch a=1\'s backward list and b=0\'s forward list,\nintersect these lists, and produce the triangle (a=1, b=0, c=1001).')),(0,s.kt)("p",null,"This performs quite well. Our ",(0,s.kt)("a",{parentName:"p",href:"https://www.cidrdb.org/cidr2023/papers/p48-jin.pdf"},"CIDR paper")," has some performance numbers\ncomparing against other types of WCO joins implementations (see the experiments in Table 3). Since I did not cover other ways to implement\nwco join algorithms inside DBMSs, these experiments would be difficult to explain here.\nInstead, let me just demonstrate some simple comparisons between using binary joins and wco joins\nin K\xf9zu on a simple triangle query. On larger cyclic queries, e.g., 4- or 5- cliques,\nthe differences are much larger and often binary join plans do not finish on time.\nYou can try this experiment too. "),(0,s.kt)("p",null,"Here is the configuration. The dataset I'm using\nis a popular web graph that is used in academic papers called ",(0,s.kt)("a",{parentName:"p",href:"https://snap.stanford.edu/data/web-BerkStan.html"},"web-BerkStan"),".\nIt has 685K nodes and 7.6M edges.\nI modeled these as a simple ",(0,s.kt)("inlineCode",{parentName:"p"},"Page")," nodes and ",(0,s.kt)("inlineCode",{parentName:"p"},"Links")," edges."),(0,s.kt)("p",null,"I start K\xf9zu on my own laptop, which is a Macbook Air 2020 with Apple M1 chip, 16G memory,\nand 512GB SSD, and run the following two queries (by default, K\xf9zu uses all thread available, which is 8 in this case):"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"- Q1: K\xf9zu-WCO\nMATCH (a:Page)-[e1:Links]->(b:Page)-[e2:Links]->(c:Page)-[e3:Links]->(a)\nRETURN count(*)\n")),(0,s.kt)("p",null,"This will compile plan that uses a wco Multiway HashJoin operator. I will refer to this\nplan as K\xf9zu-WCO below. I am also running the following query:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"- Q2: K\xf9zu-BJ\nMATCH (a:Page)-[e1:Links]->(b:Page)\nWITH *\nMATCH (b:Page)-[e2:Links]->(c:Page)\nWIH *\nMATCH (c)-[e3:Links]->(a)\nRETURN count(*)\n")),(0,s.kt)("p",null,"Currently K\xf9zu compiles each MATCH/WITH block separately so this is hack to force the system\nto use binary join plan. The plan will join ",(0,s.kt)("inlineCode",{parentName:"p"},"e1")," ",(0,s.kt)("inlineCode",{parentName:"p"},"Links")," with ",(0,s.kt)("inlineCode",{parentName:"p"},"e2")," ",(0,s.kt)("inlineCode",{parentName:"p"},"Links")," and then\njoin the result of that with ",(0,s.kt)("inlineCode",{parentName:"p"},"e3")," ",(0,s.kt)("inlineCode",{parentName:"p"},"Links"),", all using binary HashJoin operator. I will\nrefer to this as K\xf9zu-BJ. Here are the results:"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Configuration"),(0,s.kt)("th",{parentName:"tr",align:"center"},"Time"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"K\xf9zu-WCO"),(0,s.kt)("td",{parentName:"tr",align:"center"},"1.62s")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"K\xf9zu-BJ"),(0,s.kt)("td",{parentName:"tr",align:"center"},"51.17s")))),(0,s.kt)("p",null,"There are ~41M triangles in the output. We see ",(0,s.kt)("strong",{parentName:"p"},"31.6x")," performance improvement in this simple query.\nIn larger densely cyclic queries, binary join plans just don't work."),(0,s.kt)("p",null,"To try this locally, you can download our prepared CSV files from ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/kuzudb/kuzudb.github.io/tree/main/data/web-berkstan"},"here"),", and compile from our ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/kuzudb/kuzu"},"latest master"),(0,s.kt)("sup",{parentName:"p",id:"fnref-2-627daf"},(0,s.kt)("a",{parentName:"sup",href:"#fn-2-627daf",className:"footnote-ref"},"2"))," (",(0,s.kt)("inlineCode",{parentName:"p"},"make clean && make release NUM_THREADS=8"),").\nThen start K\xf9zu's shell, and load data into K\xf9zu:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"./build/release/tools/shell/kuzu_shell -i web.db\nkuzu> CREATE NODE TABLE Page (id INT64, PRIMARY KEY(INT64));\nkuzu> CREATE REL TABLE Links (FROM Page TO Page, MANY_MANY);\nkuzu> COPY Page FROM 'web-node.csv';\nkuzu> COPY Links FROM 'web-edge.csv';\n")),(0,s.kt)("p",null,"Now, run those two queries (K\xf9zu-WCO and K\xf9zu-BJ) to see the difference!"),(0,s.kt)("h2",{id:"a-thank-you--an-anecdote-about-knuths-reaction-to-the-term-worst-case-optimal"},'A Thank You & an Anecdote About Knuth\'s Reaction to the Term "Worst-case Optimal"'),(0,s.kt)("p",null,"Before wrapping up, I want to say thank you to ",(0,s.kt)("a",{parentName:"p",href:"https://cs.stanford.edu/~chrismre/"},"Chris R\xe9"),", who is a\nco-inventor of earliest wcoj algorithms.\nIn the 5th year of my PhD, Chris had introduced me to this area and\nwe had written a paper together on the topic in the context of evaluating\njoins in distributed systems, such as MapReduce and Spark. I ended up working on\nthese algorithms and trying to make them performant in actual systems\nfor many more years than I initially predicted.\nI also want to say thank you to ",(0,s.kt)("a",{parentName:"p",href:"https://hung-q-ngo.github.io/"},"Hung Ngo")," and ",(0,s.kt)("a",{parentName:"p",href:"https://cse.buffalo.edu/faculty/atri/"},"Atri Rudra"),",\nwith whom I have had several conversations during those years on these algorithms."),(0,s.kt)("p",null,'Finally, let me end with a fun story about the term "worst-case optimal":\nSeveral years ago ',(0,s.kt)("a",{parentName:"p",href:"https://uwaterloo.ca/computer-science/events/dls-donald-knuth-all-questions-answered"},"Don Knuth"),' was visiting UWaterloo\nto give a Distinguished Lecture Seminar, which is our department\'s most prestigious\nlecture series. A colleague of mine and I had a 1-1 meeting with him.\nKnuth must be known to anyone with a CS degree but importantly he is\ncredited for founding the field of algorithm analysis (e.g., for popularizing\nthe big-oh notation for analyzing algorithms\' performances).\nIn our meeting, he asked me what I was working on\nand I told him about these new algorithms called "worst-case optimal join algorithms".\nThe term was so confusing to him and his immediate interpretation\nwas: "Are they so good that they are optimal even in their worst-case performances?" '),(0,s.kt)("p",null,"The term actually means that the worst-case runtime of these algorithms\nmeets a known lower bound for the worst-case runtime of any join algorithm,\nwhich is  ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"\u03a9"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"I"),(0,s.kt)("msup",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msup"},"N"),(0,s.kt)("msup",{parentName:"msup"},(0,s.kt)("mi",{parentName:"msup"},"\u03c1"),(0,s.kt)("mstyle",{parentName:"msup",mathcolor:"#cc0000"},(0,s.kt)("mtext",{parentName:"mstyle"},"\\*")))),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\Omega(IN^{\\rho^\\*})")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1.2897em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"\u03a9"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07847em"}},"I"),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"1.0397em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"\u03c1"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.9667em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.9667em",marginRight:"0.0714em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.5357em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size3 size1 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord text mtight",style:{color:"#cc0000"}},(0,s.kt)("span",{parentName:"span",className:"mord mtight",style:{color:"#cc0000"}},"\\*"))))))))))))))))),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"))))),'.\nProbably a more standard term would be to call them\n"asymptotically optimal", just like people call sort merge an asymptotically optimal\nsorting algorithm under the comparison model.'),(0,s.kt)("h2",{id:"final-words"},"Final Words"),(0,s.kt)("p",null,"What other fundamental algorithmic developments have\nbeen made in the field on join processing? It is surprising but there are still main gaps\nin the field's understanding of how fast joins can be processed.\nThere has been some very interesting\nwork in an area called ",(0,s.kt)("em",{parentName:"p"},"beyond worst-case optimal join algorithms"),". These papers\nask very fundamental questions about joins, such as how can we prove that a join algorithm\nis correct, i.e., it produces the correct output given its input?\nThe high-level answer is that each join algorithm must be producing a proof that its output is correct,\nthrough the comparison operations it makes.\nThe goal of this line of research is to design practical algorithms whose implicit proofs are optimal,\ni.e., as small as possible. This is\nprobably the most ambitious level of optimality one can go for in algorithm design.\nThere are already some algorithms, e.g., an algorithm called ",(0,s.kt)("a",{parentName:"p",href:"https://dl.acm.org/doi/pdf/10.1145/2967101"},"Tetris"),". The area\nis fascinating and has deep connections to computational geometry. I\nadvised a ",(0,s.kt)("a",{parentName:"p",href:"https://arxiv.org/abs/1909.12102"},"Master's thesis")," on the topic once and learned quite a bit about\ncomputational geometry that I never thought could be relevant to my work. The current\nbeyond worst-case optimal join algorithms however are currently not practical.\nSome brave souls need to get into the space and think hard about whether\npractical versions of these algorithms can be developed. That would be very exciting."),(0,s.kt)("p",null,"This completes my 3-part blog on the contents of our CIDR paper and 2 core techniques:\n",(0,s.kt)("a",{parentName:"p",href:"/docusaurus/blog/factorization"},"factorization")," and worst-case optimal join algorithms that we have integrated into\nK\xf9zu to optimize for many-to-many joins. My goal in these blog\nposts was to explain these ideas to a general CS/software engineering audience and\nI hope these posts have made this material more approachable. My other goal\nwas to show the role of theory in advancing systems. Both of these ideas emerged from\npen-and-paper theory papers that theoreticians wrote but gave clear advice to DBMS developers.\nAs I said many times, I'm convinced that among many other techniques, these two\ntechniques need to be integral to any GDBMS that wants to be competitive in performance,\nbecause queries with many-to-many joins are first-class-citizens in the workloads of these systems."),(0,s.kt)("p",null,"We will keep writing more blog posts in the later months about our new releases,\nand other technical topics. If there are things you'd like us to write about,\nplease reach out to us! Also please give K\xf9zu a try, prototype applications with it,\nbreak it, let us know of your performance or other bugs, so we can continue improving\nit. Give us a ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/kuzudb/kuzu"},"GitHub star")," too and take care until the next posts!"),(0,s.kt)("div",{className:"footnotes"},(0,s.kt)("hr",{parentName:"div"}),(0,s.kt)("ol",{parentName:"div"},(0,s.kt)("li",{parentName:"ol",id:"fn-1-627daf"},"The question is interesting in the set semantics when you cannot pick every column value of every tuple the same value, which forces a Cartesian product of all the relations.",(0,s.kt)("a",{parentName:"li",href:"#fnref-1-627daf",className:"footnote-backref"},"\u21a9")),(0,s.kt)("li",{parentName:"ol",id:"fn-2-627daf"},"We found a minor bug in the latest release 0.0.2 when a node has a very large number of edges, which is fixed in the master branch, that's why we suggest using the master branch.",(0,s.kt)("a",{parentName:"li",href:"#fnref-2-627daf",className:"footnote-backref"},"\u21a9")))))}g.isMDXComponent=!0},4440:(a,e,t)=>{t.d(e,{Z:()=>n});const n=t.p+"assets/images/wcoj-4-clique-01bedf7f6afa337d495b4ecb29162619.png"},9314:(a,e,t)=>{t.d(e,{Z:()=>n});const n=t.p+"assets/images/wcoj-edge-covers-8eef238afae2ef19f6f3b7722108ddf8.png"},2451:(a,e,t)=>{t.d(e,{Z:()=>n});const n=t.p+"assets/images/wcoj-gj-simulation-387785701f792ef3615e17ec7c9ff65b.png"},3833:(a,e,t)=>{t.d(e,{Z:()=>n});const n=t.p+"assets/images/wcoj-kuzu-multiway-hash-join-69ad405ae1e8d274b5369c7cf1bb8a0a.png"},6757:(a,e,t)=>{t.d(e,{Z:()=>n});const n=t.p+"assets/images/wcoj-running-ex-data-5b2942d477cbc661b3983f8dff8b8fde.png"}}]);