"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[4915],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):u(u({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),c=p(n),k=r,d=c["".concat(o,".").concat(k)]||c[k]||m[k]||l;return n?a.createElement(d,u(u({ref:t},s),{},{components:n})):a.createElement(d,u({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,u=new Array(l);u[0]=k;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[c]="string"==typeof e?e:r,u[1]=i;for(var p=2;p<l;p++)u[p]=n[p];return a.createElement.apply(null,u)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},1110:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>u,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const l={sidebar_position:1},u="Connection & Querying",i={unversionedId:"client-apis/cpp-api/connection",id:"client-apis/cpp-api/connection",title:"Connection & Querying",description:"To issue a query, you need to create a Connection using a pointer to",source:"@site/docs/client-apis/cpp-api/connection.md",sourceDirName:"client-apis/cpp-api",slug:"/client-apis/cpp-api/connection",permalink:"/docusaurus/client-apis/cpp-api/connection",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/client-apis/cpp-api/connection.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Database",permalink:"/docusaurus/client-apis/cpp-api/database"},next:{title:"QueryResult and QuerySummary",permalink:"/docusaurus/client-apis/cpp-api/query-result"}},o={},p=[{value:"Example",id:"example",level:2},{value:"Available APIs",id:"available-apis",level:2},{value:"class kuzu::main::Connection",id:"class-kuzumainconnection",level:2}],s={toc:p},c="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"connection--querying"},"Connection & Querying"),(0,r.kt)("p",null,"To issue a query, you need to create a ",(0,r.kt)("inlineCode",{parentName:"p"},"Connection")," using a pointer to\na ",(0,r.kt)("a",{parentName:"p",href:"/docusaurus/client-apis/cpp-api/database"},"Database")," instance. You can use connections\nto execute queries, ddl statements, begin/commit/rollback ",(0,r.kt)("a",{parentName:"p",href:"/docusaurus/client-apis/transactions"},"transactions"),".\nYou can construct multiple connections that connect to the same ",(0,r.kt)("inlineCode",{parentName:"p"},"Database")," instance and issue parallel queries through these connections concurrently."),(0,r.kt)("p",null,"You can also use a ",(0,r.kt)("inlineCode",{parentName:"p"},"Connection")," to prepare ",(0,r.kt)("inlineCode",{parentName:"p"},"PreparedStatement"),", which\nis a way to parameterize queries for repeated execution and avoid planning the same query."),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'auto connection = Connection(&database);\nconnection.query("CREATE NODE TABLE person (ID INT64, ColA INT64, PRIMARY KEY (ID));")\n')),(0,r.kt)("h2",{id:"available-apis"},"Available APIs"),(0,r.kt)("h2",{id:"class-kuzumainconnection"},"class kuzu::main::Connection"),(0,r.kt)("p",null,"Connection is used to interact with a Database instance. Each Connection is thread-safe. Multiple connections can connect to the same Database instance in a multi-threaded environment.  "),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API Connection (Database * database)\n")),(0,r.kt)("p",null,"Creates a connection to the database. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"database")," A pointer to the database instance that this connection will be connected to. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API void beginReadOnlyTransaction ()\n")),(0,r.kt)("p",null,"Manually starts a new read-only transaction in the current connection. "),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API void beginWriteTransaction ()\n")),(0,r.kt)("p",null,"Manually starts a new write transaction in the current connection. "),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API void commit ()\n")),(0,r.kt)("p",null,"Manually commits the current transaction. "),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"template<typename... Args> KUZU_API std::unique_ptr<QueryResult> execute (PreparedStatement * preparedStatement, std::pair< std::string, Args >... args)\n")),(0,r.kt)("p",null,"Executes the given prepared statement with args and returns the result. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"preparedStatement")," The prepared statement to execute. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"args")," The parameter pack where each arg is a std::pair with the first element being parameter name and second element being parameter value. ")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the result of the query. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API std::unique_ptr<QueryResult> executeWithParams (PreparedStatement * preparedStatement, std::unordered_map< std::string, std::shared_ptr< common::Value >> & inputParams)\n")),(0,r.kt)("p",null,"Executes the given prepared statement with inputParams and returns the result. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"preparedStatement")," The prepared statement to execute. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"inputParams")," The parameter pack where each arg is a std::pair with the first element being parameter name and second element being parameter value. ")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the result of the query. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API uint64_t getMaxNumThreadForExec ()\n")),(0,r.kt)("p",null,"Returns the maximum number of threads to use for execution in the current connection. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the maximum number of threads to use for execution in the current connection. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API std::string getNodePropertyNames (const std::string & tableName)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"nodeTableName")," The name of the node table. ")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"all property names of the given table. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API std::string getNodeTableNames ()\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"all node table names in string format. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API std::string getRelPropertyNames (const std::string & relTableName)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"relTableName")," The name of the rel table. ")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"all property names of the given table. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API std::string getRelTableNames ()\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"all rel table names in string format. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API void interrupt ()\n")),(0,r.kt)("p",null,"Interrupts all queries currently executed within this connection. "),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API std::unique_ptr<PreparedStatement> prepare (const std::string & query)\n")),(0,r.kt)("p",null,"Prepares the given query and returns the prepared statement. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"query")," The query to prepare. ")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the prepared statement. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API std::unique_ptr<QueryResult> query (const std::string & query)\n")),(0,r.kt)("p",null,"Executes the given query and returns the result. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"query")," The query to execute. ")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the result of the query. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API void rollback ()\n")),(0,r.kt)("p",null,"Manually rollbacks the current transaction. "),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API void setMaxNumThreadForExec (uint64_t numThreads)\n")),(0,r.kt)("p",null,"Sets the maximum number of threads to use for execution in the current connection. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"numThreads")," The number of threads to use for execution in the current connection. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API void setQueryTimeOut (uint64_t timeoutInMS)\n")),(0,r.kt)("p",null,"Sets the query timeout value of the current connection. A value of zero (the default) disables the timeout. "),(0,r.kt)("hr",null))}m.isMDXComponent=!0}}]);