"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[1045],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),u=r,f=d["".concat(s,".").concat(u)]||d[u]||m[u]||i;return n?a.createElement(f,o(o({ref:t},p),{},{components:n})):a.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2991:(e,t,n)=>{n.d(t,{Z:()=>g});var a=n(7294),r=n(6010),i=n(3438),o=n(9960),l=n(3919),s=n(5999);const c={cardContainer:"cardContainer_fWXF",cardTitle:"cardTitle_rnsV",cardDescription:"cardDescription_PWke"};function p(e){let{href:t,children:n}=e;return a.createElement(o.Z,{href:t,className:(0,r.Z)("card padding--lg",c.cardContainer)},n)}function d(e){let{href:t,icon:n,title:i,description:o}=e;return a.createElement(p,{href:t},a.createElement("h2",{className:(0,r.Z)("text--truncate",c.cardTitle),title:i},n," ",i),o&&a.createElement("p",{className:(0,r.Z)("text--truncate",c.cardDescription),title:o},o))}function m(e){let{item:t}=e;const n=(0,i.Wl)(t);return n?a.createElement(d,{href:n,icon:"\ud83d\uddc3\ufe0f",title:t.label,description:t.description??(0,s.I)({message:"{count} items",id:"theme.docs.DocCard.categoryDescription",description:"The default description for a category card in the generated index about how many items this category includes"},{count:t.items.length})}):null}function u(e){let{item:t}=e;const n=(0,l.Z)(t.href)?"\ud83d\udcc4\ufe0f":"\ud83d\udd17",r=(0,i.xz)(t.docId??void 0);return a.createElement(d,{href:t.href,icon:n,title:t.label,description:t.description??(null==r?void 0:r.description)})}function f(e){let{item:t}=e;switch(t.type){case"link":return a.createElement(u,{item:t});case"category":return a.createElement(m,{item:t});default:throw new Error(`unknown item type ${JSON.stringify(t)}`)}}function h(e){let{className:t}=e;const n=(0,i.jA)();return a.createElement(g,{items:n.items,className:t})}function g(e){const{items:t,className:n}=e;if(!t)return a.createElement(h,e);const o=(0,i.MN)(t);return a.createElement("section",{className:(0,r.Z)("row",n)},o.map(((e,t)=>a.createElement("article",{key:t,className:"col col--6 margin-bottom--lg"},a.createElement(f,{item:e})))))}},9573:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));n(2991);const i={},o="Database Internal",l={unversionedId:"development/database-internal/index",id:"development/database-internal/index",title:"Database Internal",description:"Database Modules",source:"@site/docs/development/database-internal/index.md",sourceDirName:"development/database-internal",slug:"/development/database-internal/",permalink:"/docusaurus/development/database-internal/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docSidebar",previous:{title:"Performance Debugging",permalink:"/docusaurus/development/performance-debugging"},next:{title:"DataType",permalink:"/docusaurus/development/database-internal/datatype"}},s={},c=[{value:"Database Modules",id:"database-modules",level:2},{value:"Parser",id:"parser",level:3},{value:"Binder",id:"binder",level:3},{value:"Planner",id:"planner",level:3},{value:"Optimizer",id:"optimizer",level:3},{value:"Processor",id:"processor",level:3},{value:"Expression Evaluator",id:"expression-evaluator",level:3},{value:"Function",id:"function",level:3},{value:"Catalog",id:"catalog",level:3},{value:"Storage",id:"storage",level:3},{value:"Transaction",id:"transaction",level:3},{value:"Common",id:"common",level:3},{value:"Statement Evaluation Workflow",id:"statement-evaluation-workflow",level:2}],p={toc:c},d="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"database-internal"},"Database Internal"),(0,r.kt)("h2",{id:"database-modules"},"Database Modules"),(0,r.kt)("p",null,"The following sections descibes the role of each module under ",(0,r.kt)("inlineCode",{parentName:"p"},"src/")," directory."),(0,r.kt)("h3",{id:"parser"},"Parser"),(0,r.kt)("p",null,"Parser transforms an input string statement into K\xf9zu internal AST called ",(0,r.kt)("inlineCode",{parentName:"p"},"Statement"),". Parser validates the syntax correctness of the input statement. An input statement will first be parsed into an antlr4 AST according to the grammar file under ",(0,r.kt)("inlineCode",{parentName:"p"},"src/antlr4/Cypher.g4"),". We then perform a bottom-up traversal over the antlr4 AST and transform into ",(0,r.kt)("inlineCode",{parentName:"p"},"Statement")," through ",(0,r.kt)("inlineCode",{parentName:"p"},"Transformer"),"."),(0,r.kt)("h3",{id:"binder"},"Binder"),(0,r.kt)("p",null,"Binder binds ",(0,r.kt)("inlineCode",{parentName:"p"},"Statement")," into another AST called ",(0,r.kt)("inlineCode",{parentName:"p"},"BoundStatement"),". Binder validates the semantic correctness of the input statement. Binder binds string representation into internal representation (mostly integer). For example, a table name will be bound into an internal table ID."),(0,r.kt)("p",null,"In addition, Binder also performs semantic rewrite of ",(0,r.kt)("inlineCode",{parentName:"p"},"BoundStatement"),". Semantic rewrite doesn't change the semantic of a ",(0,r.kt)("inlineCode",{parentName:"p"},"BoundStatement")," but will rewrite it in a way for performant evaluation. E.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"MATCH (a) WITH a RETURN a.name")," will be written as ",(0,r.kt)("inlineCode",{parentName:"p"},"MATCH (a) RETURN a.name")),(0,r.kt)("h3",{id:"planner"},"Planner"),(0,r.kt)("p",null,"Planner takes a ",(0,r.kt)("inlineCode",{parentName:"p"},"BoundStatement")," as input and generates a ",(0,r.kt)("inlineCode",{parentName:"p"},"LogicalPlan"),". A logical plan is a sequence of logical operator each of which can be mapped to a relational algebra concept, e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"SCAN"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"FILTER"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"PROJECTION"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"JOIN"),".... Planner only guarantees the correctness of logical plan and does NOT care about performance."),(0,r.kt)("h3",{id:"optimizer"},"Optimizer"),(0,r.kt)("p",null,"Optimizer contains a set of optimization rules. Each rule is a transformation from one ",(0,r.kt)("inlineCode",{parentName:"p"},"LogicalPlan")," into another ",(0,r.kt)("inlineCode",{parentName:"p"},"LogicalPlan"),". The transformation should guarantee the correctness of the plan."),(0,r.kt)("h3",{id:"processor"},"Processor"),(0,r.kt)("p",null,"Processor takes a ",(0,r.kt)("inlineCode",{parentName:"p"},"LogicalPlan")," as an input and mapped into a ",(0,r.kt)("inlineCode",{parentName:"p"},"PhysicalPlan"),". A physical plan is a seuence of phyiscal operator each of which is an implementation of logical operator with a specific algorithm. E.g. logical ",(0,r.kt)("inlineCode",{parentName:"p"},"JOIN")," can be mapped into phyiscal ",(0,r.kt)("inlineCode",{parentName:"p"},"INDEX_NESTED_LOOP_JOIN")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"HASH_JOIN"),"."),(0,r.kt)("p",null,"In addition, processor contains a task schedular which breaks down a physical plan into multiple pipelines for ",(0,r.kt)("a",{parentName:"p",href:"/docusaurus/development/database-internal/execution"},"morsel-driven prallelism"),"."),(0,r.kt)("h3",{id:"expression-evaluator"},"Expression Evaluator"),(0,r.kt)("p",null,"Expression evaluator is light-weight physical operator that used to evaluate expression. E.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"... RETURN a.age + 1")," is mapped to a physical projection with an expression evaluator for ",(0,r.kt)("inlineCode",{parentName:"p"},"a.age + 1"),"."),(0,r.kt)("h3",{id:"function"},"Function"),(0,r.kt)("p",null,"Function module contains all functions (scalar functions, aggregate functions & table functions) that are available in the system."),(0,r.kt)("h3",{id:"catalog"},"Catalog"),(0,r.kt)("p",null,"Catalog module contains schema level informations that are generated through DDL."),(0,r.kt)("h3",{id:"storage"},"Storage"),(0,r.kt)("p",null,"Storage module contains data that needs to be persistent on disk. Spefically,"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"BufferManager: manage all memories being used in the system (except for small memories that are allocated from OS); cache recently read pages in memory."),(0,r.kt)("li",{parentName:"ul"},"Index: hash index for primary keys."),(0,r.kt)("li",{parentName:"ul"},"Column: vanilla column data structure."),(0,r.kt)("li",{parentName:"ul"},"Lists: CSR-like data structure."),(0,r.kt)("li",{parentName:"ul"},"NodeTable: a collection of multiple columns."),(0,r.kt)("li",{parentName:"ul"},"RelTable: contains a forward and a backward DirectedRelData each of which is a collection of multiple columns/lists."),(0,r.kt)("li",{parentName:"ul"},"NodeGroup: horizontally partitioned table. Similar to RowGroup concept."),(0,r.kt)("li",{parentName:"ul"},"WAL: write ahead log.")),(0,r.kt)("h3",{id:"transaction"},"Transaction"),(0,r.kt)("p",null,"Transaction module implements transaction object and manager."),(0,r.kt)("h3",{id:"common"},"Common"),(0,r.kt)("p",null,"Common module contains common logic used across different modules. Header files in common should NOT depends on header in other modules."),(0,r.kt)("h2",{id:"statement-evaluation-workflow"},"Statement Evaluation Workflow"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"StatementResult\n    |            Processor\nPhysicalPlan\n    |            Mapper\nLogicalPlan\n    |            Optimizer\nLogicalPlan\n    |            Planner\nBoundStatement\n    |            Binder\nStatement  \n    |            Parser\nString Input\n")))}m.isMDXComponent=!0}}]);