"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[6920],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),i=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=i(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=i(n),m=r,y=u["".concat(s,".").concat(m)]||u[m]||d[m]||l;return n?a.createElement(y,o(o({ref:t},c),{},{components:n})):a.createElement(y,o({ref:t},c))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=m;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[u]="string"==typeof e?e:r,o[1]=p;for(var i=2;i<l;i++)o[i]=n[i];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5920:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>p,toc:()=>i});var a=n(7462),r=(n(7294),n(3905));const l={title:"Path",sidebar_position:7},o="PATH",p={unversionedId:"cypher/data-types/path",id:"cypher/data-types/path",title:"Path",description:"PATH is a logical type. Internally, PATH is processed as STRUCT type, more specifically, a STRUCT{LIST[NODE], LIST[REL]}. A PATH always contains a nodes field with key NODES and a rels field with key RELS.",source:"@site/docs/cypher/data-types/path.md",sourceDirName:"cypher/data-types",slug:"/cypher/data-types/path",permalink:"/docusaurus/cypher/data-types/path",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"Path",sidebar_position:7},sidebar:"docSidebar",previous:{title:"Null Value",permalink:"/docusaurus/cypher/data-types/null"},next:{title:"Rel",permalink:"/docusaurus/cypher/data-types/rel"}},s={},i=[{value:"Return <code>PATH</code> column",id:"return-path-column",level:3},{value:"Access all nodes on a path",id:"access-all-nodes-on-a-path",level:3},{value:"Access all rels on a path",id:"access-all-rels-on-a-path",level:3}],c={toc:i},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"path"},"PATH"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"PATH")," is a logical type. Internally, ",(0,r.kt)("inlineCode",{parentName:"p"},"PATH")," is processed as ",(0,r.kt)("inlineCode",{parentName:"p"},"STRUCT")," type, more specifically, a ",(0,r.kt)("inlineCode",{parentName:"p"},"STRUCT{LIST[NODE], LIST[REL]}"),". A ",(0,r.kt)("inlineCode",{parentName:"p"},"PATH")," always contains a nodes field with key ",(0,r.kt)("inlineCode",{parentName:"p"},"_NODES")," and a rels field with key ",(0,r.kt)("inlineCode",{parentName:"p"},"_RELS"),"."),(0,r.kt)("h3",{id:"return-path-column"},"Return ",(0,r.kt)("inlineCode",{parentName:"h3"},"PATH")," column"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"MATCH p = (a:User)-[:Follows]->(b:User) \nWHERE a.name = 'Adam' AND b.name = 'Karissa' \nRETURN p;\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"{_NODES: [{_ID: 0:0, _LABEL: User, name: Adam, age: 30},{_ID: 0:1, _LABEL: User, name: Karissa, age: 40}], _RELS: [(0:0)-{_LABEL: Follows, _ID: 2:0, since: 2020}->(0:1)]}\n")),(0,r.kt)("h3",{id:"access-all-nodes-on-a-path"},"Access all nodes on a path"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"MATCH p = (a:User)-[:Follows]->(b:User) \nWHERE a.name = 'Adam' AND b.name = 'Karissa' \nRETURN nodes(p);\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[{_ID: 0:0, _LABEL: User, name: Adam, age: 30},{_ID: 0:1, _LABEL: User, name: Karissa, age: 40}]\n")),(0,r.kt)("h3",{id:"access-all-rels-on-a-path"},"Access all rels on a path"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"MATCH p = (a:User)-[:Follows]->(b:User) \nWHERE a.name = 'Adam' AND b.name = 'Karissa' \nRETURN rels(p);\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[(0:0)-{_LABEL: Follows, _ID: 2:0, since: 2020}->(0:1)]\n")))}d.isMDXComponent=!0}}]);