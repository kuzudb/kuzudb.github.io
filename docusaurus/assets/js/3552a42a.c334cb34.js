"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[7083],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=s(n),c=a,f=m["".concat(p,".").concat(c)]||m[c]||d[c]||o;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7389:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={title:"NPY"},i="Data Import from NPY Files (**Experimental**)",l={unversionedId:"data-import/npy-import",id:"data-import/npy-import",title:"NPY",description:"The npy format is the standard binary file format in NumPy for persisting a single arbitrary numpy array on disk. K\xf9zu supports COPY FROM BY COLUMN statement to import a set of npy files into a node table.",source:"@site/docs/data-import/npy-import.md",sourceDirName:"data-import",slug:"/data-import/npy-import",permalink:"/docusaurus/data-import/npy-import",draft:!1,tags:[],version:"current",frontMatter:{title:"NPY"},sidebar:"tutorialSidebar",previous:{title:"CSV",permalink:"/docusaurus/data-import/csv-import"},next:{title:"Parquet",permalink:"/docusaurus/data-import/parquet-import"}},p={},s=[{value:"Notes",id:"notes",level:2},{value:"COPY NPY Files to a Node Table",id:"copy-npy-files-to-a-node-table",level:2}],u={toc:s},m="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"data-import-from-npy-files-experimental"},"Data Import from NPY Files (",(0,a.kt)("strong",{parentName:"h1"},"Experimental"),")"),(0,a.kt)("p",null,"The npy format is the standard binary file format in NumPy for persisting a single arbitrary numpy array on disk. K\xf9zu supports ",(0,a.kt)("inlineCode",{parentName:"p"},"COPY FROM BY COLUMN")," statement to import a set of npy files into a node table."),(0,a.kt)("h2",{id:"notes"},"Notes"),(0,a.kt)("p",null,"This feature is an experimental feature and will evolve. We are exploring how to enable bulk loading in a column by column manner. The primary use case is to load large node features that are stored in npy format. Currently we have the following constraints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Starting with empty tables"),": see ",(0,a.kt)("a",{parentName:"li",href:"/docusaurus/data-import/csv-import#several-notes"},"notes in CSV import")," for details."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"NPY file to column"),": An npy file will be loaded as a node table column. So in the copy statement, the number of npy files should be euqal to the number of columns defined in DDL."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Numerical type only"),": An npy file must contain numerical values only."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Importing to node table only"),": K\xf9zu only supports loading npy files into a node table.")),(0,a.kt)("h2",{id:"copy-npy-files-to-a-node-table"},"COPY NPY Files to a Node Table"),(0,a.kt)("p",null,"Consider a Paper table with an id column, a feature column of embedded vector of size 768, a year column and a label column as ground truth. We first define it's schema with the following statement."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"CREATE NODE TABLE Paper(id INT64, feat FLOAT[768], year INT64, label DOUBLE, PRIMARY KEY(id));\n")),(0,a.kt)("p",null,"The raw data is stored in npy formats where each column is represented as a numpy array on disk. The files are"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'node_id.npy", "node_feat_f32.npy", "node_year.npy", "node_label.npy"\n')),(0,a.kt)("p",null,"We can copy these four files with the following statement"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'COPY Paper FROM ("node_id.npy", "node_feat_f32.npy", "node_year.npy", "node_label.npy") BY COLUMN;\n')),(0,a.kt)("p",null,"Note that the number of npy files equals to the number of columns and are presented in the same order as they are defined in the DDL."))}d.isMDXComponent=!0}}]);