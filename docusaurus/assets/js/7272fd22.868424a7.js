"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[2161],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>y});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(r),m=a,y=u["".concat(p,".").concat(m)]||u[m]||d[m]||i;return r?n.createElement(y,o(o({ref:t},c),{},{components:r})):n.createElement(y,o({ref:t},c))}));function y(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},3049:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const i={title:"Struct",sidebar_position:11},o="STRUCT",l={unversionedId:"cypher/data-types/struct",id:"cypher/data-types/struct",title:"Struct",description:"A STRUCT is a dictionary of key-value pairs where keys are of type STRING. STRUCT is a fixed-size data type so values with the same STRUCT type must contain the same set of keys. User can think of a STRUCT column as a nested single column over multiple other columns.",source:"@site/docs/cypher/data-types/struct.md",sourceDirName:"cypher/data-types",slug:"/cypher/data-types/struct",permalink:"/docusaurus/cypher/data-types/struct",draft:!1,tags:[],version:"current",sidebarPosition:11,frontMatter:{title:"Struct",sidebar_position:11},sidebar:"tutorialSidebar",previous:{title:"String",permalink:"/docusaurus/cypher/data-types/string"},next:{title:"Timestamp",permalink:"/docusaurus/cypher/data-types/timestamp"}},p={},s=[{value:"<code>STRUCT</code> creation",id:"struct-creation",level:3},{value:"<code>STRUCT</code> extraction",id:"struct-extraction",level:3}],c={toc:s},u="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"struct"},"STRUCT"),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"STRUCT")," is a dictionary of key-value pairs where keys are of type STRING. ",(0,a.kt)("inlineCode",{parentName:"p"},"STRUCT")," is a fixed-size data type so values with the same ",(0,a.kt)("inlineCode",{parentName:"p"},"STRUCT")," type must contain the same set of keys. User can think of a ",(0,a.kt)("inlineCode",{parentName:"p"},"STRUCT")," column as a nested single column over multiple other columns."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,a.kt)("th",{parentName:"tr",align:null},"DDL definition"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"STRUCT"),(0,a.kt)("td",{parentName:"tr",align:null},"STRUCT(a INT64, b INT64)")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note"),": Updating ",(0,a.kt)("inlineCode",{parentName:"p"},"STRUCT")," with update statement is not yet supported."),(0,a.kt)("h3",{id:"struct-creation"},(0,a.kt)("inlineCode",{parentName:"h3"},"STRUCT")," creation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"RETURN {first:'Xiyang', last:'Feng'};\n")),(0,a.kt)("p",null,"Output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"-------------------------------\n| STRUCT_PACK(Xiyang,Feng)    |\n-------------------------------\n| {FIRST: Xiyang, LAST: Feng} |\n-------------------------------\n")),(0,a.kt)("h3",{id:"struct-extraction"},(0,a.kt)("inlineCode",{parentName:"h3"},"STRUCT")," extraction"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"WITH {first:'Xiyang', last:'Feng'} AS fullName\nRETURN fullName.first AS firstName;\n")),(0,a.kt)("p",null,"Output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"-------------\n| firstName |\n-------------\n| Xiyang    |\n-------------\n")),(0,a.kt)("p",null,"Alternatively you can use struct_extract() function"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"WITH {first:'Xiyang', last:'Feng'} AS fullName\nRETURN struct_extract(fullName, 'first') AS firstName;\n")))}d.isMDXComponent=!0}}]);