"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[8541],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>u});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},m="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=p(a),c=r,u=m["".concat(l,".").concat(c)]||m[c]||h[c]||i;return a?n.createElement(u,o(o({ref:t},d),{},{components:a})):n.createElement(u,o({ref:t},d))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},297:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>p,toc:()=>m});var n=a(7462),r=(a(7294),a(3905));const i=a.p+"assets/images/rdf-basics-example-0c13e58b9abe4cd426a143de54c0c241.png",o=a.p+"assets/images/reification-example-293dded65d8b3ac3de2fd3c61c7b9c15.png",s={title:"RDF Basics",sidebar_position:0},l="RDF Basics",p={unversionedId:"rdf-graphs/rdf-basics",id:"rdf-graphs/rdf-basics",title:"RDF Basics",description:"RDF is part of a set of semantic web standards by W3C consortium,",source:"@site/docs/rdf-graphs/rdf-basics.md",sourceDirName:"rdf-graphs",slug:"/rdf-graphs/rdf-basics",permalink:"/docusaurus/rdf-graphs/rdf-basics",draft:!1,tags:[],version:"current",sidebarPosition:0,frontMatter:{title:"RDF Basics",sidebar_position:0},sidebar:"docSidebar",previous:{title:"Motivation for RDF Graphs",permalink:"/docusaurus/rdf-graphs/"},next:{title:"Example RDFGraph",permalink:"/docusaurus/rdf-graphs/example-rdfgraph"}},d={},m=[{value:"Resources and IRIs",id:"resources-and-iris",level:2},{value:"RDF Literals",id:"rdf-literals",level:2},{value:"RDF Blank Nodes",id:"rdf-blank-nodes",level:2},{value:"RDF Triples and RDF/Knowledge Graphs",id:"rdf-triples-and-rdfknowledge-graphs",level:2},{value:"RDF Schema and OWL",id:"rdf-schema-and-owl",level:2},{value:"When to Use RDF vs Property Graphs",id:"when-to-use-rdf-vs-property-graphs",level:2},{value:"Reification",id:"reification",level:2}],h={toc:m},c="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"rdf-basics"},"RDF Basics"),(0,r.kt)("p",null,"RDF is part of a set of ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("a",{parentName:"em",href:"https://www.w3.org/2001/sw/wiki/Main_Page"},"semantic web standards"))," by W3C consortium,\nsuch as ",(0,r.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/rdf-schema/"},"RDF Schema")," and ",(0,r.kt)("a",{parentName:"p",href:"https://www.w3.org/OWL/"},"OWL")," that form\na well-founded knowledge representation system. The ",(0,r.kt)("a",{parentName:"p",href:"https://www.w3.org/"},"W3C website"),", and several books, such as the one\nby Allemang and Hendler, ",(0,r.kt)("a",{parentName:"p",href:"http://www.acad.bg/ebook/semantic/0123735564%20-%20Morgan%20Kaufmann%20-%20Semantic%20Web%20for%20the%20Working%20Ontologist%20Effective%20Modeling%20in%20RDFS%20and%20OWL%20-%20(2008).pdf"},"Semantic Web for the Working Ontologist"),"\n(see ",(0,r.kt)("a",{parentName:"p",href:"https://www.amazon.com/Semantic-Web-Working-Ontologist-Effective/dp/0123859654"},"this")," more recent but paid edition), contain a\nwealth of information about RDF and semantic web. Here we give a brief overview of RDF covering\nthe following elements of the data model:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Resources and IRIs"),(0,r.kt)("li",{parentName:"ul"},"Literals"),(0,r.kt)("li",{parentName:"ul"},"Blank nodes"),(0,r.kt)("li",{parentName:"ul"},"Triples and RDF/Knowledge Graphs"),(0,r.kt)("li",{parentName:"ul"},"RDF Schema and OWL (covered very briefly)")),(0,r.kt)("p",null,"At the end, we provide a note about when RDF is likely a better choice\nfor data modeling compared to property graphs."),(0,r.kt)("h2",{id:"resources-and-iris"},"Resources and IRIs"),(0,r.kt)("p",null,'The basic elements of data in RDF are "Resources",\nwhich are identified by\nunique ',(0,r.kt)("em",{parentName:"p"},"internationalized resource identifiers")," (IRIs). IRIs are similar to URLs\nand are strings of the form: ",(0,r.kt)("inlineCode",{parentName:"p"},"http://www.w3.org/1999/02/22-rdf-syntax-ns#type"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"http://www.w3.org/2000/01/rdf-schema#subClassOf")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"http://kuzu.io/rdf-ex#livesIn"),".\nIRIs are broadly in the form of <prefix-namespace:local-identifier>, where the prefix\nnamespace, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"http://www.w3.org/1999/02/22-rdf-syntax-ns#"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"http://www.w3.org/2000/01/rdf-schema#")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"http://kuzu.io/rdf-ex#"),",\nare repositories of vocabularies/elements about a specific domain.\nIn examples about RDF as well as in file representations of RDF,\nprefix namespaces are often abbreviated, such as:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rdf")," for ",(0,r.kt)("inlineCode",{parentName:"li"},"http://www.w3.org/1999/02/22-rdf-syntax-ns#")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rdfs")," for ",(0,r.kt)("inlineCode",{parentName:"li"},"http://www.w3.org/2000/01/rdf-schema#")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"kz")," for ",(0,r.kt)("inlineCode",{parentName:"li"},"http://kuzu.io/rdf-ex#"),".")),(0,r.kt)("p",null,"Using the namespace abbreviations, full IRIs are written\nin the ",(0,r.kt)("inlineCode",{parentName:"p"},"abbreviated-prefix:local-identifier")," form and stand for the concatenation of the prefix namespace\nand the local identifier. For example:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rdf:type")," is shorthand for ",(0,r.kt)("inlineCode",{parentName:"li"},"http://www.w3.org/1999/02/22-rdf-syntax-ns#type")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"kz:Adam")," is shorthand for ",(0,r.kt)("inlineCode",{parentName:"li"},"http://kuzu.io/rdf-ex#Adam"),".")),(0,r.kt)("p",null,"IRIs uniquely identify things, objects or concepts in the application that is being modeled. "),(0,r.kt)("p",null,"As an example, consider a database of information about a university\nand let ",(0,r.kt)("inlineCode",{parentName:"p"},"http://kuzu.io/rdf-ex#")," (",(0,r.kt)("inlineCode",{parentName:"p"},"kz"),") be a namespace to identify\nthings in the application. We can model the following as resources\nwith the following IRIs:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"kz:Adam"),": An object that represents a student in the university."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"kz:student"),": A schema concept that represents a student."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"kz:person"),": A schema concept that represents people."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"kz:name"),": A schema concept that represents the names of people."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"kz:age"),": A schema concept that represents the ages of people.")),(0,r.kt)("p",null,"RDF and the standards around RDF, such as RDF Schema (RDFS) contain\nstandardized vocabulary that we can also use in our database (and often these are widely\nused in practice). The ones we'll use are the following\n(see here for ",(0,r.kt)("a",{parentName:"p",href:"https://www.w3.org/1999/02/22-rdf-syntax-ns"},"full RDF vocabulary"),"\nand ",(0,r.kt)("a",{parentName:"p",href:"http://www.w3.org/2000/01/rdf-schema"},"full RDFS vocabulary"),"):"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rdf:type"),": A schema concept that represents the type of a resource."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rdfs:subClassOf"),": A schema concept that represents the sub-class relationship between two classes.")),(0,r.kt)("p",null,"We will describe other IRIs to identify other resources throughout the\nK\xf9zu RDFGraphs documentation. For the purpose of covering RDF basics,\nwe'll use the above resources/IRIs."),(0,r.kt)("h2",{id:"rdf-literals"},"RDF Literals"),(0,r.kt)("p",null,"Some properties of resources are not other resources but primitive values.\nFor example the age of the student Adam, identified by ",(0,r.kt)("inlineCode",{parentName:"p"},"kz:Adam"),", is 30.\nThis is not modeled as a resource but as a literal. Similarly, the name\nof ",(0,r.kt)("inlineCode",{parentName:"p"},"kz:Adam"),' is the string "Adam". These are called literals and literals\ndo not have IRIs. String literals can have an optional language tag indicated\nwith the "@" symbol at their ends. For example, consider two triples with strings\nliteral values about the Resource ',(0,r.kt)("inlineCode",{parentName:"p"},"ex:spiderman"),":\n(",(0,r.kt)("inlineCode",{parentName:"p"},"ex:spiderman"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"foaf:name"),", ",(0,r.kt)("inlineCode",{parentName:"p"},'"Spiderman"@en'),"), (",(0,r.kt)("inlineCode",{parentName:"p"},"ex:spiderman"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"foaf:name"),", ",(0,r.kt)("inlineCode",{parentName:"p"},'"\u0427\u0435\u043b\u043e\u0432\u0435\u043a-\u043f\u0430\u0443\u043a"@ru'),").\nThe first triple has tag ",(0,r.kt)("inlineCode",{parentName:"p"},"@en")," to indicate that the string is in English, and the second\none has tag ",(0,r.kt)("inlineCode",{parentName:"p"},"@ru")," to indicate that the string is in Russian."),(0,r.kt)("h2",{id:"rdf-blank-nodes"},"RDF Blank Nodes"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/rdf11-concepts/#section-blank-nodes"},"Blank nodes")," are RDF resources\nwhose IRIs are not known. These may appear in some RDF file formats, e.g.,\nin Turtle files, their IRIs appear with prefix ",(0,r.kt)("inlineCode",{parentName:"p"},"_:<some-label>")," or inside ",(0,r.kt)("inlineCode",{parentName:"p"},"[ ]"),". As many systems\nthat support RDF, when loading RDF data into K\xf9zu, K\xf9zu will generate\na specific IRI for blank nodes. See ",(0,r.kt)("a",{parentName:"p",href:"./rdf-import#blank-nodes"},"here")," for more details."),(0,r.kt)("h2",{id:"rdf-triples-and-rdfknowledge-graphs"},"RDF Triples and RDF/Knowledge Graphs"),(0,r.kt)("p",null,"Now we can describe how to express the information in the database.\nAll information in RDF is expressed as a set of <subject, predicate, object>\ntriples. We give several examples:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'<kz:Adam, kz:name, "Adam">'),': Data information that Adam\'s name is "Adam".'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<kz:Adam, kz:age, 30>"),": Data information that Adam's age is 30."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<kz:Adam, rdf:type, kz:student>"),": Schema information that Adam is an instance of student."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<kz:student, rdfs:subClassOf, kz:person>"),": Schema information that student is a subclass of person.")),(0,r.kt)("p",null,"A set of triples is called an RDF graph, aka a ",(0,r.kt)("em",{parentName:"p"},"knowledge graph"),". The following shows the\nabove RDF graph that consists of 4 triples pictorially. In the figure, each triple\nis an edge, each resource is a node, and each literal appears simply as a value without\nan ellipse around it."),(0,r.kt)("div",{class:"img-center"},(0,r.kt)("img",{src:i,style:{width:800}})),(0,r.kt)("h2",{id:"rdf-schema-and-owl"},"RDF Schema and OWL"),(0,r.kt)("p",null,"RDF is part of larger set of standards to model knowledge.\nFor example, ",(0,r.kt)("inlineCode",{parentName:"p"},"rdf:type")," is a common IRI that is used universally\nacross many RDF datasets. RDF Schema and OWL contain additional\nstandardized vocabulary to describe schemas of RDF graphs. For example,\n",(0,r.kt)("inlineCode",{parentName:"p"},"rdfs:subClassOf"),", which is used to form class hierarchies,\nor ",(0,r.kt)("inlineCode",{parentName:"p"},"owl:sameAs"),(0,r.kt)("sup",{parentName:"p",id:"fnref-1"},(0,r.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1")),",  which is used to\nidentify that two resources are the same resource,\nare additional common vocabularies you might see across many datasets.\nThese vocabularies have well-defined, clear semantics and enables\ninformation systems to be developed that can do automatic inference/reasoning.\nFor example, even in our small example, a system that understands\nthe meanings of these vocabularies can return ",(0,r.kt)("inlineCode",{parentName:"p"},"kz:Adam")," if a query\nasks for all ",(0,r.kt)("inlineCode",{parentName:"p"},"kz:person")," resources (because ",(0,r.kt)("inlineCode",{parentName:"p"},"kz:Adam")," is a ",(0,r.kt)("inlineCode",{parentName:"p"},"kz:student"),",\nwhich is an ",(0,r.kt)("inlineCode",{parentName:"p"},"rdfs:subClassOf")," ",(0,r.kt)("inlineCode",{parentName:"p"},"kz:person"),"). For now, the goal of K\xf9zu RDFGraphs\nis not to provide automatic inference capabilities over RDF triples.\nTherefore, when you query K\xf9zu RDFGraphs, you will not get the system\nto do automatic inference.\nInstead, they aim to provide a means to query RDF triples\nnatively in K\xf9zu using Cypher."),(0,r.kt)("h2",{id:"when-to-use-rdf-vs-property-graphs"},"When to Use RDF vs Property Graphs"),(0,r.kt)("p",null,"Questions about the choice of data models are at some level, a user decision.\nA rule of thumb is that if you have sufficient structure over your\nrecords and want to model them as a graph (e.g., to find paths, patterns, ask for\nrecursive and/or arbitrary connections between records), you should\nstructure them as property graphs.\nThe general principle is that DBMSs provide fast query performance over\nlarge sets of records by exploiting structure. Outside of this, some common\nscenarios for using RDF are the following:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"When your data is very heterogeneous and hard to tabulate."),(0,r.kt)("li",{parentName:"ol"},"You want to homogeneously represent and query both your data and metadata/schema information\nin the same format of triples. For the example above, we\nrepresented both data and schema information homogeneously as triples."),(0,r.kt)("li",{parentName:"ol"},"You need some automatic reasoning/inference capabilities.",(0,r.kt)("sup",{parentName:"li",id:"fnref-2"},(0,r.kt)("a",{parentName:"sup",href:"#fn-2",className:"footnote-ref"},"2")))),(0,r.kt)("h2",{id:"reification"},"Reification"),(0,r.kt)("p",null,"One of the major differences between RDF and property graph models is that in property\ngraphs you can add properties on edges (as well as nodes). This is not possible in RDF.\nSuppose you had a database with information about a person Karissa and a person Zhang\nand you wanted to model that Karissa follows Zhang (e.g., on Twitter) since 01-01-2021. In a property graph, you could\ndo this by having a Person node table with, say a name property, and a Follows relationship table\nfrom Person to Person with a ",(0,r.kt)("inlineCode",{parentName:"p"},"since")," property. Your tables would look as follows:"),(0,r.kt)("table",null,(0,r.kt)("tr",null,(0,r.kt)("th",null,"Person Node Table")," ",(0,r.kt)("th",null,"Follows Relationship Table")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"_id"),(0,r.kt)("th",{parentName:"tr",align:null},"name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"Karissa")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"Zhang"))))),(0,r.kt)("td",null,(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"from"),(0,r.kt)("th",{parentName:"tr",align:null},"to"),(0,r.kt)("th",{parentName:"tr",align:null},"since"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"01-01-2021"))))))),(0,r.kt)("p",null,"In RDF, you can have a triple in the form of <kz:Karissa, kz:follows, kz:Zhang>\nto represent that Karissa follows Zhang,\nbut then you cannot represent some information about this specific follow triple\nwith additional triples. That is you cannot attach information to the\n",(0,r.kt)("inlineCode",{parentName:"p"},"<kz:Karissa, kz:follows, kz:Zhang>")," triple/statement with additional triples. A standard solution to\nachieve this is called ",(0,r.kt)("a",{parentName:"p",href:"https://www.w3.org/wiki/RdfReification"},"reification"),', where you make the fact of "Karissa following\nZhang" a Resource itself, say with IRI ',(0,r.kt)("inlineCode",{parentName:"p"},"kz:KfollowsZ"),", and type rdf:Statement.\nThen we have the following triples about ",(0,r.kt)("inlineCode",{parentName:"p"},"kz:KfollowsZ"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<kz:KfollowsZ, rdf:type, rdf:Statement>"),": r is a statement."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<kz:KfollowsZ, rdf:subject, kz:Karissa>"),": The subject of r is Karissa."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<kz:KfollowsZ, rdf:predicate, kz:follows>"),": The predicate of r is follows."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<kz:KfollowsZ, rdf:object, kz:Zhang>"),": The object of r is Zhang."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<kz:KfollowsZ, kz:since, 01-01-2021>"),": The since property of r is 2024.")),(0,r.kt)("p",null,"So you have at least 4 triples, one with predicate ",(0,r.kt)("inlineCode",{parentName:"p"},"rdf:type"),", the other 3 with predicates\n",(0,r.kt)("inlineCode",{parentName:"p"},"rdf:subject"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"rdf:predicate"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"rdf:object"),", and then additional triples, one for each property you want\nto attach to the reified statement. In the above example, we attached the ",(0,r.kt)("inlineCode",{parentName:"p"},"kz:since")," property to the reified statement.\nThe following figure shows these triples pictorially."),(0,r.kt)("div",{class:"img-center"},(0,r.kt)("img",{src:o,style:{width:800}})),(0,r.kt)("p",null,'Note that this is similar to a strategy that property graph model\nusers apply to represent n-ary relationships. In a property graph model,\nrelationships can only be between two nodes. To represent a ternary relationship,\nfor example, an "Enrollment" relationship in a university database\nbetween a student, class, and a section of the class,\na standard technique is to have a new placeholder node of type "Enrollment" and\nfrom each Enrollment node connect to a Student node, a Class node, and a Section node.'),(0,r.kt)("p",null,"Note further that you do not have to follow the standardized reificiation strategy and vocabulary,\nso use ",(0,r.kt)("inlineCode",{parentName:"p"},"rdf:subject"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"rdf:predicate"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"rdf:object"),". You could have also made ",(0,r.kt)("inlineCode",{parentName:"p"},"kz:KfollowsZ")," a new Resource of\n",(0,r.kt)("inlineCode",{parentName:"p"},"rdf:type")," ",(0,r.kt)("inlineCode",{parentName:"p"},"kz:follows")," and then have only two triples <",(0,r.kt)("inlineCode",{parentName:"p"},"kz:KfollowsZ"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"kz:follower"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"kz:Karissa"),"> and\n<",(0,r.kt)("inlineCode",{parentName:"p"},"kz:KfollowsZ"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"kz:followee"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"kz:Zhang"),"> and keep the other two triple about the ",(0,r.kt)("inlineCode",{parentName:"p"},"since")," property as before.\nThis is an alternative representation that omits the ",(0,r.kt)("inlineCode",{parentName:"p"},"rdf:predicate")," triple (the predicate is implicit\nin the type ",(0,r.kt)("inlineCode",{parentName:"p"},"kz:follows")," of ",(0,r.kt)("inlineCode",{parentName:"p"},"kz:KfollowsZ"),")."),(0,r.kt)("div",{className:"footnotes"},(0,r.kt)("hr",{parentName:"div"}),(0,r.kt)("ol",{parentName:"div"},(0,r.kt)("li",{parentName:"ol",id:"fn-1"},(0,r.kt)("inlineCode",{parentName:"li"},"owl")," is the abbreviation for ",(0,r.kt)("inlineCode",{parentName:"li"},"http://www.w3.org/2002/07/owl")," namespace.",(0,r.kt)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"\u21a9")),(0,r.kt)("li",{parentName:"ol",id:"fn-2"},"RDFS or OWL-based inference is currently not supported in K\xf9zu.",(0,r.kt)("a",{parentName:"li",href:"#fnref-2",className:"footnote-backref"},"\u21a9")))))}u.isMDXComponent=!0}}]);