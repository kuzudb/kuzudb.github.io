"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[2805],{3905:(e,t,l)=>{l.d(t,{Zo:()=>m,kt:()=>c});var a=l(7294);function n(e,t,l){return t in e?Object.defineProperty(e,t,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[t]=l,e}function r(e,t){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),l.push.apply(l,a)}return l}function u(e){for(var t=1;t<arguments.length;t++){var l=null!=arguments[t]?arguments[t]:{};t%2?r(Object(l),!0).forEach((function(t){n(e,t,l[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):r(Object(l)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(l,t))}))}return e}function p(e,t){if(null==e)return{};var l,a,n=function(e,t){if(null==e)return{};var l,a,n={},r=Object.keys(e);for(a=0;a<r.length;a++)l=r[a],t.indexOf(l)>=0||(n[l]=e[l]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)l=r[a],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(n[l]=e[l])}return n}var k=a.createContext({}),s=function(e){var t=a.useContext(k),l=t;return e&&(l="function"==typeof e?e(t):u(u({},t),e)),l},m=function(e){var t=s(e.components);return a.createElement(k.Provider,{value:t},e.children)},o="mdxType",i={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},N=a.forwardRef((function(e,t){var l=e.components,n=e.mdxType,r=e.originalType,k=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),o=s(l),N=n,c=o["".concat(k,".").concat(N)]||o[N]||i[N]||r;return l?a.createElement(c,u(u({ref:t},m),{},{components:l})):a.createElement(c,u({ref:t},m))}));function c(e,t){var l=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=l.length,u=new Array(r);u[0]=N;var p={};for(var k in t)hasOwnProperty.call(t,k)&&(p[k]=t[k]);p.originalType=e,p[o]="string"==typeof e?e:n,u[1]=p;for(var s=2;s<r;s++)u[s]=l[s];return a.createElement.apply(null,u)}return a.createElement.apply(null,l)}N.displayName="MDXCreateElement"},8385:(e,t,l)=>{l.r(t),l.d(t,{assets:()=>k,contentTitle:()=>u,default:()=>i,frontMatter:()=>r,metadata:()=>p,toc:()=>s});var a=l(7462),n=(l(7294),l(3905));const r={title:"Value",sidebar_position:5},u="Value",p={unversionedId:"client-apis/cpp-api/value",id:"client-apis/cpp-api/value",title:"Value",description:"Value can hold data of different types.",source:"@site/docs/client-apis/cpp-api/value.md",sourceDirName:"client-apis/cpp-api",slug:"/client-apis/cpp-api/value",permalink:"/docusaurus/client-apis/cpp-api/value",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Value",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Tuple",permalink:"/docusaurus/client-apis/cpp-api/flat-tuple"},next:{title:"Prepared Statement",permalink:"/docusaurus/client-apis/cpp-api/prepared-statement"}},k={},s=[{value:"Available APIs",id:"available-apis",level:2},{value:"class kuzu::common::NodeVal",id:"class-kuzucommonnodeval",level:2},{value:"class kuzu::common::RelVal",id:"class-kuzucommonrelval",level:2},{value:"class kuzu::common::Value",id:"class-kuzucommonvalue",level:2}],m={toc:s},o="wrapper";function i(e){let{components:t,...l}=e;return(0,n.kt)(o,(0,a.Z)({},m,l,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"value"},"Value"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"Value")," can hold data of different types."),(0,n.kt)("h2",{id:"available-apis"},"Available APIs"),(0,n.kt)("h2",{id:"class-kuzucommonnodeval"},"class kuzu::common::NodeVal"),(0,n.kt)("p",null,"NodeVal represents a node in the graph and stores the nodeID, label and properties of that node.  "),(0,n.kt)("hr",null),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"NodeVal")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"NodeVal (std::unique_ptr< Value > idVal, std::unique_ptr< Value > labelVal)\n")),(0,n.kt)("p",null,"Constructs the NodeVal object with the given idVal and labelVal. "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"idVal")," the nodeID value. "),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"labelVal")," the name of the node. ")),(0,n.kt)("hr",null),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"NodeVal")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"NodeVal (const NodeVal & other)\n")),(0,n.kt)("p",null,"Constructs the NodeVal object from the other. "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"other")," the NodeVal to copy from. ")),(0,n.kt)("hr",null),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"addProperty")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"void addProperty (const std::string & key, std::unique_ptr< Value > value)\n")),(0,n.kt)("p",null,"Adds a property with the given {key,value} pair to the NodeVal. "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"key")," the name of the property. "),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"value")," the value of the property. ")),(0,n.kt)("hr",null),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"copy")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"std::unique_ptr<NodeVal> copy ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a copy of the current node. ")),(0,n.kt)("hr",null),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"getLabelName")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"std::string getLabelName ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"the name of the node in string format. ")),(0,n.kt)("hr",null),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"getLabelVal")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"Value* getLabelVal ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"the name of the node as a Value. ")),(0,n.kt)("hr",null),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"getNodeID")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"nodeID_t getNodeID ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"the nodeID of the node as a nodeID struct. ")),(0,n.kt)("hr",null),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"getNodeIDVal")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"Value* getNodeIDVal ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"the nodeID as a Value. ")),(0,n.kt)("hr",null),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"getProperties")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"const std::vector<std::pair<std::string, std::unique_ptr<Value> > >& getProperties ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"all properties of the NodeVal. ")),(0,n.kt)("hr",null),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"toString")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"std::string toString ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"the current node values in string format. ")),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"class-kuzucommonrelval"},"class kuzu::common::RelVal"),(0,n.kt)("p",null,"RelVal represents a rel in the graph and stores the relID, src/dst nodes and properties of that rel.  "),(0,n.kt)("hr",null),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"RelVal")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"RelVal (std::unique_ptr< Value > srcNodeIDVal, std::unique_ptr< Value > dstNodeIDVal, std::unique_ptr< Value > labelVal)\n")),(0,n.kt)("p",null,"Constructs the RelVal based on the srcNodeIDVal, dstNodeIDVal and labelVal. "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"srcNodeIDVal")," the src node. "),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"dstNodeIDVal")," the dst node. "),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"labelVal")," the name of the rel. ")),(0,n.kt)("hr",null),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"RelVal")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"RelVal (const RelVal & other)\n")),(0,n.kt)("p",null,"Constructs a RelVal from other. "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"other")," the RelVal to copy from. ")),(0,n.kt)("hr",null),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"addProperty")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"void addProperty (const std::string & key, std::unique_ptr< Value > value)\n")),(0,n.kt)("p",null,"Adds a property with the given {key,value} pair to the RelVal. "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"key")," the name of the property. "),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"value")," the value of the property. ")),(0,n.kt)("hr",null),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"copy")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"std::unique_ptr<RelVal> copy ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a copy of the RelVal. ")),(0,n.kt)("hr",null),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"getDstNodeID")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"nodeID_t getDstNodeID ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"the dst nodeID value of the RelVal as nodeID struct. ")),(0,n.kt)("hr",null),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"getDstNodeIDVal")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"Value* getDstNodeIDVal ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"the dst nodeID value of the RelVal in Value. ")),(0,n.kt)("hr",null),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"getLabelName")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"std::string getLabelName ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"the name of the RelVal. ")),(0,n.kt)("hr",null),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"getProperties")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"const std::vector<std::pair<std::string, std::unique_ptr<Value> > >& getProperties ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"all properties of the RelVal. ")),(0,n.kt)("hr",null),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"getSrcNodeID")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"nodeID_t getSrcNodeID ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"the src nodeID value of the RelVal as nodeID struct. ")),(0,n.kt)("hr",null),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"getSrcNodeIDVal")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"Value* getSrcNodeIDVal ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"the src nodeID value of the RelVal in Value. ")),(0,n.kt)("hr",null),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"toString")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"std::string toString ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"the value of the RelVal in string format. ")),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"class-kuzucommonvalue"},"class kuzu::common::Value"),(0,n.kt)("hr",null),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Value")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API Value (bool val_)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"val_")," the boolean value to set. ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a Value with BOOL type and val_ value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API Value (int8_t val_)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"val_")," the int8_t value to set. ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a Value with INT8 type and val_ value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API Value (int16_t val_)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"val_")," the int16_t value to set. ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a Value with INT16 type and val_ value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API Value (int32_t val_)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"val_")," the int32_t value to set. ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a Value with INT32 type and val_ value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API Value (int64_t val_)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"val_")," the int64_t value to set. ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a Value with INT64 type and val_ value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API Value (uint8_t val_)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"val_")," the uint8_t value to set. ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a Value with UINT8 type and val_ value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API Value (uint16_t val_)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"val_")," the uint16_t value to set. ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a Value with UINT16 type and val_ value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API Value (uint32_t val_)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"val_")," the uint32_t value to set. ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a Value with UINT32 type and val_ value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API Value (uint64_t val_)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"val_")," the uint64_t value to set. ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a Value with UINT64 type and val_ value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API Value (double val_)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"val_")," the double value to set. ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a Value with DOUBLE type and val_ value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API Value (float_t val_)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"val_")," the float value to set. ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a Value with FLOAT type and val_ value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API Value (date_t val_)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"val_")," the date value to set. ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a Value with DATE type and val_ value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API Value (timestamp_t val_)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"val_")," the timestamp value to set. ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a Value with TIMESTAMP type and val_ value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API Value (interval_t val_)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"val_")," the interval value to set. ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a Value with INTERVAL type and val_ value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API Value (internalID_t val_)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"val_")," the internalID value to set. ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a Value with INTERNAL",(0,n.kt)("em",{parentName:"li"},"ID type and val")," value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API Value (const char * val_)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"val_")," the string value to set. ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a Value with STRING type and val_ value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API Value (LogicalType type, const std::string & val_)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"val_")," the string value to set. ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a Value with type and val_ value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API Value (LogicalType dataType, std::vector< std::unique_ptr< Value >> children)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"vals")," the list value to set. ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a Value with dataType type and vals value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API Value (LogicalType dataType, const uint8_t * val_)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"val_")," the value to set. ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a Value with dataType type and val_ value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API Value (const Value & other)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"other")," the value to copy from. ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a Value with the same value as other. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API std::unique_ptr<Value> copy ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a copy of the current value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API void copyValueFrom (const uint8_t * value)\n")),(0,n.kt)("p",null,"Copies from the value. "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"value")," value to copy from. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API void copyValueFrom (const Value & other)\n")),(0,n.kt)("p",null,"Copies from the other. "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"other")," value to copy from. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"static KUZU_API Value createDefaultValue (const LogicalType & dataType)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"dataType")," the type of the non-NULL value. ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a default non-NULL value of the given type. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"static KUZU_API Value createNullValue ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a NULL value of ANY type. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"static KUZU_API Value createNullValue (LogicalType dataType)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"dataType")," the type of the NULL value. ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a NULL value of the given type. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<class T > static KUZU_API Value createValue (T value)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"value")," the value to Value object. ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a Value object based on value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API Value createValue (bool val)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"val")," the boolean value ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a Value with BOOL type and val value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API Value createValue (int16_t val)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"val")," the int16 value ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a Value with INT16 type and val value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API Value createValue (int32_t val)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"val")," the int32 value ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a Value with INT32 type and val value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API Value createValue (int64_t val)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"val")," the int64 value ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a Value with INT64 type and val value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API Value createValue (uint8_t val)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"val")," the uint8 value ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a Value with UINT8 type and val value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API Value createValue (uint16_t val)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"val")," the uint16 value ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a Value with UINT16 type and val value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API Value createValue (uint32_t val)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"val")," the uint32 value ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a Value with UINT32 type and val value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API Value createValue (uint64_t val)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"val")," the uint64 value ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a Value with UINT64 type and val value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API Value createValue (double val)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"val")," the double value ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a Value with DOUBLE type and val value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API Value createValue (date_t val)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"val")," the date_t value ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a Value with DATE type and val value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API Value createValue (timestamp_t val)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"val")," the timestamp_t value ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a Value with TIMESTAMP type and val value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API Value createValue (interval_t val)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"val")," the interval_t value ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a Value with INTERVAL type and val value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API Value createValue (nodeID_t val)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"val")," the nodeID_t value ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a Value with NODE_ID type and val value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API Value createValue (std::string val)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"val")," the string value ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a Value with type and val value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API Value createValue (const char * value)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"val")," the string value ")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a Value with STRING type and val value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API LogicalType* getDataType ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"the dataType of the value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<class T > KUZU_API T getValue ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"the value of the given type. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API bool getValue ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"boolean value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API int8_t getValue ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"int8 value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API int16_t getValue ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"int16 value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API int32_t getValue ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"int32 value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API int64_t getValue ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"int64 value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API uint64_t getValue ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"uint64 value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API uint32_t getValue ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"uint32 value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API uint16_t getValue ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"uint16 value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API uint8_t getValue ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"uint8 value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API float getValue ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"float value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API double getValue ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"double value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API date_t getValue ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"date_t value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API timestamp_t getValue ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"timestamp_t value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API interval_t getValue ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"interval_t value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API internalID_t getValue ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"internal_t value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API std::string getValue ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"string value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<class T > KUZU_API T& getValueReference ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a reference to the value of the given type. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API bool& getValueReference ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"the reference to the boolean value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API int8_t& getValueReference ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"the reference to the int8 value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API int16_t& getValueReference ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"the reference to the int16 value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API int32_t& getValueReference ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"the reference to the int32 value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API int64_t& getValueReference ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"the reference to the int64 value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API uint8_t& getValueReference ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"the reference to the uint8 value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API uint16_t& getValueReference ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"the reference to the uint16 value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API uint32_t& getValueReference ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"the reference to the uint32 value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API uint64_t& getValueReference ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"the reference to the uint64 value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API float_t& getValueReference ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"the reference to the float value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API double_t& getValueReference ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"the reference to the double value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API date_t& getValueReference ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"the reference to the date value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API timestamp_t& getValueReference ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"the reference to the timestamp value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API interval_t& getValueReference ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"the reference to the interval value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API nodeID_t& getValueReference ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"the reference to the internal_id value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"template<> KUZU_API std::string& getValueReference ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"the reference to the string value. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API bool isNull ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"whether the Value is null or not. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API void setDataType (const LogicalType & dataType_)\n")),(0,n.kt)("p",null,"Sets the data type of the Value. "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"dataType_")," the data type to set to. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API void setNull (bool flag)\n")),(0,n.kt)("p",null,"Sets the null flag of the Value. "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"flag")," null value flag to set. ")),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_API std::string toString ()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"the current value in string format. ")),(0,n.kt)("hr",null))}i.isMDXComponent=!0}}]);