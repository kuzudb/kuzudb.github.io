"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[1172],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>_});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var u=n.createContext({}),m=function(e){var t=n.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},s=function(e){var t=m(e.components);return n.createElement(u.Provider,{value:t},e.children)},d="mdxType",o={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,u=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=m(a),k=r,_=d["".concat(u,".").concat(k)]||d[k]||o[k]||l;return a?n.createElement(_,p(p({ref:t},s),{},{components:a})):n.createElement(_,p({ref:t},s))}));function _(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,p=new Array(l);p[0]=k;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[d]="string"==typeof e?e:r,p[1]=i;for(var m=2;m<l;m++)p[m]=a[m];return n.createElement.apply(null,p)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},5419:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>p,default:()=>o,frontMatter:()=>l,metadata:()=>i,toc:()=>m});var n=a(7462),r=(a(7294),a(3905));const l={title:"Prepared Statement",sidebar_position:6},p=void 0,i={unversionedId:"client-apis/c-api/prepared_statement",id:"client-apis/c-api/prepared_statement",title:"Prepared Statement",description:"struct kuzupreparedstatement",source:"@site/docs/client-apis/c-api/prepared_statement.md",sourceDirName:"client-apis/c-api",slug:"/client-apis/c-api/prepared_statement",permalink:"/docusaurus/client-apis/c-api/prepared_statement",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Prepared Statement",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Data Type",permalink:"/docusaurus/client-apis/c-api/datatype"},next:{title:"C++ API",permalink:"/docusaurus/client-apis/cpp-api/"}},u={},m=[{value:"struct kuzu_prepared_statement",id:"struct-kuzu_prepared_statement",level:2}],s={toc:m},d="wrapper";function o(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"struct-kuzu_prepared_statement"},"struct kuzu_prepared_statement"),(0,r.kt)("p",null,"kuzu_prepared_statement is a parameterized query which can avoid planning the same query for repeated execution.  "),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"KUZU_C_API bool kuzu_prepared_statement_allow_active_transaction (kuzu_prepared_statement * prepared_statement)\n")),(0,r.kt)("p",null,"DDL and COPY statements are automatically wrapped in a transaction and committed. As such, they cannot be part of an active transaction. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the prepared statement is allowed to be part of an active transaction. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"KUZU_C_API void kuzu_prepared_statement_bind_bool (kuzu_prepared_statement * prepared_statement, const char * param_name, bool value)\n")),(0,r.kt)("p",null,"Binds the given boolean value to the given parameter name in the prepared statement. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"prepared_statement")," The prepared statement instance to bind the value. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"param_name")," The parameter name to bind the value. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," The boolean value to bind. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"KUZU_C_API void kuzu_prepared_statement_bind_date (kuzu_prepared_statement * prepared_statement, const char * param_name, kuzu_date_t value)\n")),(0,r.kt)("p",null,"Binds the given date value to the given parameter name in the prepared statement. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"prepared_statement")," The prepared statement instance to bind the value. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"param_name")," The parameter name to bind the value. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," The date value to bind. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"KUZU_C_API void kuzu_prepared_statement_bind_double (kuzu_prepared_statement * prepared_statement, const char * param_name, double value)\n")),(0,r.kt)("p",null,"Binds the given double value to the given parameter name in the prepared statement. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"prepared_statement")," The prepared statement instance to bind the value. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"param_name")," The parameter name to bind the value. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," The double value to bind. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"KUZU_C_API void kuzu_prepared_statement_bind_float (kuzu_prepared_statement * prepared_statement, const char * param_name, float value)\n")),(0,r.kt)("p",null,"Binds the given float value to the given parameter name in the prepared statement. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"prepared_statement")," The prepared statement instance to bind the value. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"param_name")," The parameter name to bind the value. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," The float value to bind. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"KUZU_C_API void kuzu_prepared_statement_bind_int8 (kuzu_prepared_statement * prepared_statement, const char * param_name, int8_t value)\n")),(0,r.kt)("p",null,"Binds the given int8_t value to the given parameter name in the prepared statement. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"prepared_statement")," The prepared statement instance to bind the value. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"param_name")," The parameter name to bind the value. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," The int8_t value to bind. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"KUZU_C_API void kuzu_prepared_statement_bind_int16 (kuzu_prepared_statement * prepared_statement, const char * param_name, int16_t value)\n")),(0,r.kt)("p",null,"Binds the given int16_t value to the given parameter name in the prepared statement. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"prepared_statement")," The prepared statement instance to bind the value. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"param_name")," The parameter name to bind the value. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," The int16_t value to bind. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"KUZU_C_API void kuzu_prepared_statement_bind_int32 (kuzu_prepared_statement * prepared_statement, const char * param_name, int32_t value)\n")),(0,r.kt)("p",null,"Binds the given int32_t value to the given parameter name in the prepared statement. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"prepared_statement")," The prepared statement instance to bind the value. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"param_name")," The parameter name to bind the value. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," The int32_t value to bind. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"KUZU_C_API void kuzu_prepared_statement_bind_int64 (kuzu_prepared_statement * prepared_statement, const char * param_name, int64_t value)\n")),(0,r.kt)("p",null,"Binds the given int64_t value to the given parameter name in the prepared statement. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"prepared_statement")," The prepared statement instance to bind the value. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"param_name")," The parameter name to bind the value. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," The int64_t value to bind. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"KUZU_C_API void kuzu_prepared_statement_bind_uint8 (kuzu_prepared_statement * prepared_statement, const char * param_name, uint8_t value)\n")),(0,r.kt)("p",null,"Binds the given int8_t value to the given parameter name in the prepared statement. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"prepared_statement")," The prepared statement instance to bind the value. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"param_name")," The parameter name to bind the value. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," The int8_t value to bind. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"KUZU_C_API void kuzu_prepared_statement_bind_uint16 (kuzu_prepared_statement * prepared_statement, const char * param_name, uint16_t value)\n")),(0,r.kt)("p",null,"Binds the given uint16_t value to the given parameter name in the prepared statement. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"prepared_statement")," The prepared statement instance to bind the value. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"param_name")," The parameter name to bind the value. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," The uint16_t value to bind. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"KUZU_C_API void kuzu_prepared_statement_bind_uint32 (kuzu_prepared_statement * prepared_statement, const char * param_name, uint32_t value)\n")),(0,r.kt)("p",null,"Binds the given uint32_t value to the given parameter name in the prepared statement. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"prepared_statement")," The prepared statement instance to bind the value. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"param_name")," The parameter name to bind the value. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," The uint32_t value to bind. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"KUZU_C_API void kuzu_prepared_statement_bind_uint64 (kuzu_prepared_statement * prepared_statement, const char * param_name, uint64_t value)\n")),(0,r.kt)("p",null,"Binds the given uint64_t value to the given parameter name in the prepared statement. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"prepared_statement")," The prepared statement instance to bind the value. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"param_name")," The parameter name to bind the value.")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"KUZU_C_API void kuzu_prepared_statement_bind_interval (kuzu_prepared_statement * prepared_statement, const char * param_name, kuzu_interval_t value)\n")),(0,r.kt)("p",null,"Binds the given interval value to the given parameter name in the prepared statement. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"prepared_statement")," The prepared statement instance to bind the value. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"param_name")," The parameter name to bind the value. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," The interval value to bind. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"KUZU_C_API void kuzu_prepared_statement_bind_string (kuzu_prepared_statement * prepared_statement, const char * param_name, const char * value)\n")),(0,r.kt)("p",null,"Binds the given string value to the given parameter name in the prepared statement. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"prepared_statement")," The prepared statement instance to bind the value. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"param_name")," The parameter name to bind the value. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," The string value to bind. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"KUZU_C_API void kuzu_prepared_statement_bind_timestamp (kuzu_prepared_statement * prepared_statement, const char * param_name, kuzu_timestamp_t value)\n")),(0,r.kt)("p",null,"Binds the given timestamp value to the given parameter name in the prepared statement. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"prepared_statement")," The prepared statement instance to bind the value. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"param_name")," The parameter name to bind the value. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," The timestamp value to bind. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"KUZU_C_API void kuzu_prepared_statement_bind_value (kuzu_prepared_statement * prepared_statement, const char * param_name, kuzu_value * value)\n")),(0,r.kt)("p",null,"Binds the given kuzu value to the given parameter name in the prepared statement. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"prepared_statement")," The prepared statement instance to bind the value. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"param_name")," The parameter name to bind the value. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," The kuzu value to bind. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"KUZU_C_API void kuzu_prepared_statement_destroy (kuzu_prepared_statement * prepared_statement)\n")),(0,r.kt)("p",null,"Destroys the prepared statement instance and frees the allocated memory. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"prepared_statement")," The prepared statement instance to destroy. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"KUZU_C_API char* kuzu_prepared_statement_get_error_message (kuzu_prepared_statement * prepared_statement)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the error message if the statement is not prepared successfully. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"KUZU_C_API bool kuzu_prepared_statement_is_success (kuzu_prepared_statement * prepared_statement)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the query is prepared successfully or not. ")),(0,r.kt)("hr",null))}o.isMDXComponent=!0}}]);