"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[2321],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=s(n),m=r,k=u["".concat(p,".").concat(m)]||u[m]||h[m]||i;return n?a.createElement(k,l(l({ref:t},d),{},{components:n})):a.createElement(k,l({ref:t},d))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[u]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5868:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>p,toc:()=>d});var a=n(7462),r=(n(7294),n(3905)),i=n(1130);const l={title:"RDFGraphs Overview & Cypher Clauses",sidebar_position:2},o=void 0,p={unversionedId:"rdf-graphs/rdfgraphs-overview",id:"rdf-graphs/rdfgraphs-overview",title:"RDFGraphs Overview & Cypher Clauses",description:"The examples on this page use the below database, whose schema and data import commands are given here:",source:"@site/docs/rdf-graphs/rdfgraphs-overview.md",sourceDirName:"rdf-graphs",slug:"/rdf-graphs/rdfgraphs-overview",permalink:"/docusaurus/rdf-graphs/rdfgraphs-overview",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"RDFGraphs Overview & Cypher Clauses",sidebar_position:2},sidebar:"docSidebar",previous:{title:"Example RDFGraph",permalink:"/docusaurus/rdf-graphs/example-rdfgraph"},next:{title:"RDF Data Import",permalink:"/docusaurus/rdf-graphs/rdf-import"}},s={},d=[{value:"RDFGraphs Mapping of Triples to Property Graph Tables",id:"rdfgraphs-mapping-of-triples-to-property-graph-tables",level:2},{value:"Altering the Schemas of the Base Tables of RDFGraphs",id:"altering-the-schemas-of-the-base-tables-of-rdfgraphs",level:3},{value:"Mapping of RDF Literals as Separate Nodes",id:"mapping-of-rdf-literals-as-separate-nodes",level:3},{value:"Physical Storage of UniKG_rt and UniKG_lt Relationship Tables",id:"physical-storage-of-unikg_rt-and-unikg_lt-relationship-tables",level:3},{value:"Querying Triples in RDFGraphs",id:"querying-triples-in-rdfgraphs",level:2},{value:"Using RDFGraph Name to Query Both Relationship Tables",id:"using-rdfgraph-name-to-query-both-relationship-tables",level:3},{value:"Use of Namespace Prefixes in Queries",id:"use-of-namespace-prefixes-in-queries",level:3},{value:"Querying of Regular Node and Relationship Tables and RDFGraphs",id:"querying-of-regular-node-and-relationship-tables-and-rdfgraphs",level:3},{value:"Modifying RDFGraphs Using <code>CREATE</code>, <code>SET</code>, <code>MERGE</code> and <code>DELETE</code>",id:"modifying-rdfgraphs-using-create-set-merge-and-delete",level:2},{value:"Restrictions for Deleting Resource Nodes",id:"restrictions-for-deleting-resource-nodes",level:3},{value:"Malformed IRI Behavior In CREATE Statements vs Turtle Files",id:"malformed-iri-behavior-in-create-statements-vs-turtle-files",level:3},{value:"Using Blank Node IDs in CREATE Statements",id:"using-blank-node-ids-in-create-statements",level:3},{value:"Duplicate Triples",id:"duplicate-triples",level:2}],u={toc:d},h="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(h,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The examples on this page use the below database, whose schema and data import commands are given ",(0,r.kt)("a",{parentName:"p",href:"example-rdfgraph"},"here"),":"),(0,r.kt)("div",{class:"img-center"},(0,r.kt)("img",{src:i.Z,style:{width:800}})),(0,r.kt)("h1",{id:"rdfgraphs-creating-dropping-and-importing-data"},"RDFGraphs: Creating, Dropping, and Importing Data"),(0,r.kt)("p",null,"An RDFGraph is a lightweight extension to K\xf9zu's structured property graph data model\nto natively ingest and query RDF triples. You can create an RDFGraph using the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE RDFGraph UniKG;\n")),(0,r.kt)("p",null,"You can then ingest data into RDFGraphs using a ",(0,r.kt)("inlineCode",{parentName:"p"},"COPY FROM")," command. For example,\nthe following will ingest the triples in the ",(0,r.kt)("inlineCode",{parentName:"p"},"uni.ttl")," ",(0,r.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/turtle/"},"Turtle file"),"\ninto the ",(0,r.kt)("inlineCode",{parentName:"p"},"UniKG")," RDFGraph:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'COPY UniKG FROM "${PATH-TO-DIR}/uni.ttl" (in_memory=true);\n')),(0,r.kt)("p",null,"You can drop an RDFGraph using the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"DROP RDFGraph UniKG;\n")),(0,r.kt)("p",null,"Note that you cannot alter RDFGraphs. You can only create or drop them."),(0,r.kt)("h2",{id:"rdfgraphs-mapping-of-triples-to-property-graph-tables"},"RDFGraphs Mapping of Triples to Property Graph Tables"),(0,r.kt)("p",null,"Once you have imported your triples, you can query the triples with Cypher, K\xf9zu's query language.\nHowever, Cypher is not a query language that was designed for RDF. It assumes an underlying property graph data model.\nWhen you create an RDFGraph, K\xf9zu internally creates 2 node and 2 relationship tables.\nWhen you then ingest your triples using the ",(0,r.kt)("inlineCode",{parentName:"p"},"COPY FROM")," command, K\xf9zu maps the data in these triples into these\n4 tables. That is, RDFGraphs are a virtual layer that wraps and gives a common name to these 4 tables.\nTo query your triples with Cypher, it is important to first understand this mapping.\nThe specifics of the mapping are as follows:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Resources Node Table")," \u2014 ",(0,r.kt)("inlineCode",{parentName:"p"},"UniKG_r(iri STRING, PRIMARY KEY (iri))"),": Stores the ",(0,r.kt)("a",{parentName:"p",href:"rdf-basics#resources-and-iris"},"Resources")," (hence the ",(0,r.kt)("inlineCode",{parentName:"p"},"_r")," suffix) in the triples.\nEach unique IRI that appears in the subject, predicate, or object of triples is mapped to a separate ",(0,r.kt)("inlineCode",{parentName:"p"},"UniKG_r")," node.\nNote that even IRIs that appear only as predicates and never as objects or subjects in any triple are mapped to a ",(0,r.kt)("inlineCode",{parentName:"p"},"UniKG_r")," resource node (e.g.,\n",(0,r.kt)("inlineCode",{parentName:"p"},"rdf:type")," in the example database). Resource nodes have a\nsingle property, ",(0,r.kt)("inlineCode",{parentName:"p"},"iri"),", which stores the IRI of the resource as a string.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Literals Node Table")," \u2014 ",(0,r.kt)("inlineCode",{parentName:"p"},"UniKG_l(id SERIAL, val VARIANT, PRIMARY KEY (id))"),": Stores the ",(0,r.kt)("a",{parentName:"p",href:"rdf-basics#rdf-literals"},"Literals")," (hence the ",(0,r.kt)("inlineCode",{parentName:"p"},"_l")," suffix) in the triples.\nEach unique literal that appears in the triples is mapped to a separate ",(0,r.kt)("inlineCode",{parentName:"p"},"UniKG_l")," node. Literals have a\nsingle property, ",(0,r.kt)("inlineCode",{parentName:"p"},"val"),", which stores the value of the literal as a ",(0,r.kt)("a",{parentName:"p",href:"../cypher/data-types/variant"},"VARIANT data type"),"\nThere is a second ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," property of type ",(0,r.kt)("a",{parentName:"p",href:"../cypher/data-types/serial"},"SERIAL")," which can be ignored. It is there to provide a primary key for the table. ")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Resource-to-Resource Triples Relationship Table")," \u2014 ",(0,r.kt)("inlineCode",{parentName:"p"},"UniKG_rt(FROM UniKG_r, TO UniKG_r, iri STRING)"),": Stores the triples between UniKG_r resources and\nUniKG_r resources. ",(0,r.kt)("inlineCode",{parentName:"p"},"_rt"),' suffix stands for "',(0,r.kt)("strong",{parentName:"p"},"r"),"esource ",(0,r.kt)("strong",{parentName:"p"},"t"),'riples", i.e., triples whose objects are resources.\nThe ',(0,r.kt)("inlineCode",{parentName:"p"},"FROM")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"TO")," columns store the subject and object resources in the triple. The ",(0,r.kt)("inlineCode",{parentName:"p"},"iri")," property stores the IRI of the predicate of the triple.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Resource-to-Literal Triples Relationship Table")," \u2014 ",(0,r.kt)("inlineCode",{parentName:"p"},"UniKG_lt(FROM UniKG_r, TO UniKG_l, iri STRING)"),": Stores the triples between UniKG_r resources and\nUniKG_l literals. ",(0,r.kt)("inlineCode",{parentName:"p"},"_lt"),' suffix stands for "',(0,r.kt)("strong",{parentName:"p"},"l"),"iteral ",(0,r.kt)("strong",{parentName:"p"},"t"),'riples", i.e., triples whose objects are literals.\nThe ',(0,r.kt)("inlineCode",{parentName:"p"},"FROM")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"TO")," columns store the subject resource and the object literal in the triple. The ",(0,r.kt)("inlineCode",{parentName:"p"},"iri")," property stores the IRI of the predicate of the triple."))),(0,r.kt)("p",null,"The contents of these mapped tables are shown below:"),(0,r.kt)("table",null,(0,r.kt)("tr",null,(0,r.kt)("th",null,"UniKG_r")," ",(0,r.kt)("th",null,"UniKG_l")," ",(0,r.kt)("th",null,"UniKG_rt"),(0,r.kt)("th",null,"UniKG_lt")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"_id"),(0,r.kt)("th",{parentName:"tr",align:null},"iri"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"kz:Waterloo")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"rdf:type")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"kz:city")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"kz:name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"kz:population")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"5"),(0,r.kt)("td",{parentName:"tr",align:null},"kz:Adam")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"6"),(0,r.kt)("td",{parentName:"tr",align:null},"kz:person")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"7"),(0,r.kt)("td",{parentName:"tr",align:null},"kz:Karissa")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"8"),(0,r.kt)("td",{parentName:"tr",align:null},"kz:bornIn")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"9"),(0,r.kt)("td",{parentName:"tr",align:null},"kz:livesIn")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"10"),(0,r.kt)("td",{parentName:"tr",align:null},"kz:Zhang")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"11"),(0,r.kt)("td",{parentName:"tr",align:null},"rdf:student")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"12"),(0,r.kt)("td",{parentName:"tr",align:null},"kz:age")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"13"),(0,r.kt)("td",{parentName:"tr",align:null},"kz:subClassOf")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"14"),(0,r.kt)("td",{parentName:"tr",align:null},"kz:faculty"))))),(0,r.kt)("td",null,(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"_id"),(0,r.kt)("th",{parentName:"tr",align:null},"val"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"Waterloo (string)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"150000 (int64)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"Adam (string)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"30 (int64)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"Karissa (string)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"5"),(0,r.kt)("td",{parentName:"tr",align:null},"Zhang (string)"))))),(0,r.kt)("td",null,(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"from (s)"),(0,r.kt)("th",{parentName:"tr",align:null},"iri (p)"),(0,r.kt)("th",{parentName:"tr",align:null},"to (o)"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"rdf:type"),(0,r.kt)("td",{parentName:"tr",align:null},"2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"5"),(0,r.kt)("td",{parentName:"tr",align:null},"rdf:type"),(0,r.kt)("td",{parentName:"tr",align:null},"11")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"5"),(0,r.kt)("td",{parentName:"tr",align:null},"kz:livesIn"),(0,r.kt)("td",{parentName:"tr",align:null},"0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"7"),(0,r.kt)("td",{parentName:"tr",align:null},"rdf:type"),(0,r.kt)("td",{parentName:"tr",align:null},"11")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"7"),(0,r.kt)("td",{parentName:"tr",align:null},"kz:bornIn"),(0,r.kt)("td",{parentName:"tr",align:null},"0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"10"),(0,r.kt)("td",{parentName:"tr",align:null},"rdf:type"),(0,r.kt)("td",{parentName:"tr",align:null},"14")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"11"),(0,r.kt)("td",{parentName:"tr",align:null},"kz:bornIn"),(0,r.kt)("td",{parentName:"tr",align:null},"6")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"14"),(0,r.kt)("td",{parentName:"tr",align:null},"kz:bornIn"),(0,r.kt)("td",{parentName:"tr",align:null},"6"))))),(0,r.kt)("td",null,(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"from (s)"),(0,r.kt)("th",{parentName:"tr",align:null},"iri (p)"),(0,r.kt)("th",{parentName:"tr",align:null},"to (o)"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"kz:population"),(0,r.kt)("td",{parentName:"tr",align:null},"1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"kz:name"),(0,r.kt)("td",{parentName:"tr",align:null},"0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"5"),(0,r.kt)("td",{parentName:"tr",align:null},"kz:age"),(0,r.kt)("td",{parentName:"tr",align:null},"3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"5"),(0,r.kt)("td",{parentName:"tr",align:null},"kz:name"),(0,r.kt)("td",{parentName:"tr",align:null},"2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"7"),(0,r.kt)("td",{parentName:"tr",align:null},"kz:name"),(0,r.kt)("td",{parentName:"tr",align:null},"4")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"10"),(0,r.kt)("td",{parentName:"tr",align:null},"kz:name"),(0,r.kt)("td",{parentName:"tr",align:null},"5"))))))," "),(0,r.kt)("p",null,"For example, the (0, rdf:type, 2) tuple in the ",(0,r.kt)("inlineCode",{parentName:"p"},"UniKG_rt")," table corresponds to the (kz:Waterloo, rdf:type, kz:city) triple,\nwhile the (0, kz:population, 1) tuple in the ",(0,r.kt)("inlineCode",{parentName:"p"},"UniKG_lt")," table corresponds to the (kz:Waterloo, kz:population, 150000) triple."),(0,r.kt)("h3",{id:"altering-the-schemas-of-the-base-tables-of-rdfgraphs"},"Altering the Schemas of the Base Tables of RDFGraphs"),(0,r.kt)("p",null,"You cannot alter the schemas of any of the node and relationship tables of RDFGraphs.\nSo the schemas of ",(0,r.kt)("inlineCode",{parentName:"p"},"UniKG_r"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"UniKG_l"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"UniKG_rt"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"UniKG_lt")," tables are immutable. However,\nas ",(0,r.kt)("a",{parentName:"p",href:"#modifying-rdfgraphs-using-create-set-merge-and-delete"},"discussed below")," you can add or delete the records in these tables as if they are\nregular tables with several restrictions."),(0,r.kt)("h3",{id:"mapping-of-rdf-literals-as-separate-nodes"},"Mapping of RDF Literals as Separate Nodes"),(0,r.kt)("p",null,'Storing RDF Literals as separate "Literal nodes" may rightly look unintuitive at first. The other natural alternative would be to store literals as node\nproperties of the resources they are associated with. However, storing them as separate nodes has the advantage that\nyou can query both types of triples, those between resources and resources as well as between resources and literals\nhomogeneously with a relationship pattern. As will be discussed momentarily, you can for example use the\n',(0,r.kt)("inlineCode",{parentName:"p"},"MATCH (s)-[p:UniKG]-(o)")," pattern to match all triples. If you were to store literals as node properties, you would\nneed to use the previous pattern for triples between resources and resources and a different pattern ",(0,r.kt)("inlineCode",{parentName:"p"},"MATCH (s:UniKG_r)"),"\nand inspect the properties of the mapped resources to match triples between resources and literals."),(0,r.kt)("h3",{id:"physical-storage-of-unikg_rt-and-unikg_lt-relationship-tables"},"Physical Storage of UniKG_rt and UniKG_lt Relationship Tables"),(0,r.kt)("p",null,"If you inspect  the schema of ",(0,r.kt)("inlineCode",{parentName:"p"},"UniKG_rt")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"UniKG_rl")," tables, you will get the following Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'CALL table_info("UniKG_rt") RETURN *;\nOutput:\n------------------------------------\n| property id | name | type        |\n------------------------------------\n| 1           | pid  | INTERNAL_ID |\n------------------------------------\n')),(0,r.kt)("p",null,'Instead of storing the "iri" property as a STRING column, K\xf9zu stores it as an integer property\nthat stores the system-level id of the resource that corresponds to the IRI of the predicate.\nRecall that each IRI that appears in your dataset is mapped to a separate resource node even if it is not\nthe subject or object of a triple, such as "rdf:type" in our example. Consider\na triple where rdf:type appears as a predicate, such as "<kz:Waterloo, rdf:type, kz:city>".\nThis will be stored in the UniKG_rt relationship table as three integers: (0, 1, 2), where 0, 1, and 2, are\nrespectively the system-level internal ids of resources kz:Waterloo, rdf:type, and kz:city. However,\nyou can still query a "virtual" iri property of the ',(0,r.kt)("inlineCode",{parentName:"p"},"UniKG_rt")," relationship table, e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"MATCH (s)-[p:UniKG_rt]->(o) RETURN p.iri")," will\nreturn among other tuples, the ",(0,r.kt)("inlineCode",{parentName:"p"},"http://www.w3.org/1999/02/22-rdf-syntax-ns#type")," tuple. `"),(0,r.kt)("h2",{id:"querying-triples-in-rdfgraphs"},"Querying Triples in RDFGraphs"),(0,r.kt)("p",null,"Given the mapping of RDF triples into node and relationship tables, these tables can be queried using Cypher just like any other node and relationship\ntable in K\xf9zu. For example, you can query all the triples between one resource and another using\nthe following query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"MATCH (s)-[p:UniKG_rt]-(o) RETURN s.iri, p.iri, o.iri;\nOutput:\n---------------------------------------------------------------------------------------------------------------------\n| s.iri                          | p.iri                                           | o.iri                          |\n---------------------------------------------------------------------------------------------------------------------\n| http://kuzu.io/rdf-ex#Waterloo | http://www.w3.org/1999/02/22-rdf-syntax-ns#type | http://kuzu.io/rdf-ex#City     |\n---------------------------------------------------------------------------------------------------------------------\n| http://kuzu.io/rdf-ex#Adam     | http://www.w3.org/1999/02/22-rdf-syntax-ns#type | http://kuzu.io/rdf-ex#student  |\n---------------------------------------------------------------------------------------------------------------------\n| http://kuzu.io/rdf-ex#Adam     | http://kuzu.io/rdf-ex#livesIn                   | http://kuzu.io/rdf-ex#Waterloo |\n---------------------------------------------------------------------------------------------------------------------\n| http://kuzu.io/rdf-ex#Karissa  | http://www.w3.org/1999/02/22-rdf-syntax-ns#type | http://kuzu.io/rdf-ex#student  |\n---------------------------------------------------------------------------------------------------------------------\n| http://kuzu.io/rdf-ex#Karissa  | http://kuzu.io/rdf-ex#bornIn                    | http://kuzu.io/rdf-ex#Waterloo |\n---------------------------------------------------------------------------------------------------------------------\n| http://kuzu.io/rdf-ex#Zhang    | http://www.w3.org/1999/02/22-rdf-syntax-ns#type | http://kuzu.io/rdf-ex#faculty  |\n---------------------------------------------------------------------------------------------------------------------\n| http://kuzu.io/rdf-ex#student  | http://www.w3.org/2000/01/rdf-schema#subClassOf | http://kuzu.io/rdf-ex#person   |\n---------------------------------------------------------------------------------------------------------------------\n| http://kuzu.io/rdf-ex#faculty  | http://www.w3.org/2000/01/rdf-schema#subClassOf | http://kuzu.io/rdf-ex#person   |\n---------------------------------------------------------------------------------------------------------------------\n")),(0,r.kt)("h3",{id:"using-rdfgraph-name-to-query-both-relationship-tables"},"Using RDFGraph Name to Query Both Relationship Tables"),(0,r.kt)("p",null,"We have also added syntactic sugar to make it easier to query the triples. Specifically, the RDFGraph name,\nwhich is the prefix of all of the 4 tables, can be used to refer to both relationship table names.\nThat is, the RDFGraph name acts as a ",(0,r.kt)("a",{parentName:"p",href:"../cypher/data-definition/create-table#create-rel-table-group"},"rel table group"),",\nwhich are syntactic sugars that use a common name to refer to multiple possible relationship tables. In our example,\nthe RDFGraph's name is UniKG, and instead of using ",(0,r.kt)("inlineCode",{parentName:"p"},"UniKG_rt")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"UniKG_rl"),", you can use UniKG as a relationship name\nto query both relationship tables as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"MATCH (s)-[p:UniKG]->(o) \nRETURN s.iri, p.iri, o.iri, o.val;\nOutput:\n--------------------------------------------------------------------------------------------------------------------------------\n| s.iri                          | p.iri                                           | o.iri                          | o.val    |\n--------------------------------------------------------------------------------------------------------------------------------\n| http://kuzu.io/rdf-ex#Waterloo | http://kuzu.io/rdf-ex#name                      |                                | Waterloo |\n--------------------------------------------------------------------------------------------------------------------------------\n| http://kuzu.io/rdf-ex#Waterloo | http://kuzu.io/rdf-ex#population                |                                | 150000   |\n--------------------------------------------------------------------------------------------------------------------------------\n| http://kuzu.io/rdf-ex#Adam     | http://kuzu.io/rdf-ex#name                      |                                | Adam     |\n--------------------------------------------------------------------------------------------------------------------------------\n|          ...                   |                        ...                      |             ...                |    ...   |\n--------------------------------------------------------------------------------------------------------------------------------\n| http://kuzu.io/rdf-ex#Karissa  | http://kuzu.io/rdf-ex#bornIn                    | http://kuzu.io/rdf-ex#Waterloo |          |\n--------------------------------------------------------------------------------------------------------------------------------\n| http://kuzu.io/rdf-ex#Adam     | http://kuzu.io/rdf-ex#livesIn                   | http://kuzu.io/rdf-ex#Waterloo |          |\n--------------------------------------------------------------------------------------------------------------------------------\n|          ...                   |                        ...                      |             ...                |    ...   |\n--------------------------------------------------------------------------------------------------------------------------------\n")),(0,r.kt)("p",null,"Note that for the triples whose objects are literals, the ",(0,r.kt)("inlineCode",{parentName:"p"},"o.iri")," field is null and ",(0,r.kt)("inlineCode",{parentName:"p"},"o.val")," is non-null. Similarly,\nfor the triples whose objects are resources, the ",(0,r.kt)("inlineCode",{parentName:"p"},"o.val")," is null and ",(0,r.kt)("inlineCode",{parentName:"p"},"o.iri")," is non-null.\n",(0,r.kt)("inlineCode",{parentName:"p"},"[p:UniKG]")," is simply a syntactic sugar for the ",(0,r.kt)("a",{parentName:"p",href:"https://kuzudb.com/docusaurus/cypher/query-clauses/match/#match-relationships-with-multi-labels"},"multi-label relationship pattern")," of ",(0,r.kt)("inlineCode",{parentName:"p"},"[p:UniKG_rt|UniKG_lt]"),".\nThat is, the above query is equivalent to the following query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"MATCH (s)-[p:UniKG_rt|UniKG_lt]->(o)\nRETURN s.iri, p.iri, o.iri, o.val;\n")),(0,r.kt)("p",null,"We do not have a syntactic sugar option for querying both the resource and literal node tables. However, you can simply\nomit the label of the nodes as done in the above query. In the above query, variable ",(0,r.kt)("inlineCode",{parentName:"p"},"o")," does not have a label,\nand K\xf9zu resolves it to the  2 labels ",(0,r.kt)("inlineCode",{parentName:"p"},"(o:UniKG_r:UniKG_l)"),", which is the syntax for representing multi label\nnode variables in Cypher. "),(0,r.kt)("h3",{id:"use-of-namespace-prefixes-in-queries"},"Use of Namespace Prefixes in Queries"),(0,r.kt)("p",null,'Writing IRI namespaces, which are the prefix strings, such as "',(0,r.kt)("a",{parentName:"p",href:"http://www.w3.org/1999/02/22-rdf-syntax-ns#%22"},'http://www.w3.org/1999/02/22-rdf-syntax-ns#"'),',\n"',(0,r.kt)("a",{parentName:"p",href:"http://kuzu.io/rdf-ex#%22"},'http://kuzu.io/rdf-ex#"'),' or "',(0,r.kt)("a",{parentName:"p",href:"http://xmlns.com/foaf/0.1/%22"},'http://xmlns.com/foaf/0.1/"'),', can be verbose.\nIn SPARQL, which is the standard query language for RDF, you can define a variable with "PREFIX" keyword,\nsuch as "PREFIX kz: ',(0,r.kt)("inlineCode",{parentName:"p"},"<http://kuzu.io/rdf-ex#>"),'" and then use the defined variable as a shorthand, as in\n',(0,r.kt)("inlineCode",{parentName:"p"},"kz:student")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"http://kuzu.io/rdf-ex#student"),". In K\xf9zu, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"WITH")," clause\nin the beginning of your queries to define aliases. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'WITH "http://kuzu.io/rdf-ex#" as kz, \n     "http://www.w3.org/1999/02/22-rdf-syntax-ns#" as rdf\nMATCH (s {iri: kz + "Adam"})-[p:UniKG {iri: rdf + "type"}]->(o)\nRETURN s.iri, p.iri, o.iri;\nOutput:\n----------------------------------------------------------------------------------------------------------------\n| s.iri                      | p.iri                                           | o.iri                         |\n----------------------------------------------------------------------------------------------------------------\n| http://kuzu.io/rdf-ex#Adam | http://www.w3.org/1999/02/22-rdf-syntax-ns#type | http://kuzu.io/rdf-ex#student |\n----------------------------------------------------------------------------------------------------------------\n')),(0,r.kt)("p",null,"Note that in the above query if you instead projected every variable in scope with ",(0,r.kt)("inlineCode",{parentName:"p"},"RETURN *"),', the "kz" and "rdf"\naliases, which are also in scope would also be returned as columns in the output.'),(0,r.kt)("h3",{id:"querying-of-regular-node-and-relationship-tables-and-rdfgraphs"},"Querying of Regular Node and Relationship Tables and RDFGraphs"),(0,r.kt)("p",null,"Since RDFGraphs are simply a set of node and relationship tables, you can link the node tables to other node\ntables in your database. This can especially be useful if you would like to enrich some of\nthe resources with additional information. Suppose you had another source of information about\nthe phone numbers of students at universities and you stored those in a separate Student node table.\nLet's suppose that the Student node table has the following schema and 3 records:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'CREATE NODE TABLE Student(name String, phone String, primary key(name));\nCREATE (:Student {name: "Adam", phone: "123456789"}),\n       (:Student {name: "Karissa", phone: "987654321"});\n')),(0,r.kt)("p",null,"You can now link the students in the Student node table to the students in the UniKG RDFGraph,\nspecifically the Resource nodes that represent students ",(0,r.kt)("inlineCode",{parentName:"p"},"Adam")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Karissa"),". Let us first create\na relationship table ",(0,r.kt)("inlineCode",{parentName:"p"},"SameStudent")," that links the two node tables:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE REL TABLE SameStudent(FROM UniKG_r TO Student);\n")),(0,r.kt)("p",null,"Let us now link the Student node records with name Adam with the resource node with iri\n",(0,r.kt)("inlineCode",{parentName:"p"},"kz:Adam"),". Similarly, let us link the Student node record with name Karissa with the resource node with iri\n",(0,r.kt)("inlineCode",{parentName:"p"},"kz:Karissa"),". We can do this as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'MATCH (a:UniKG_r {iri: "http://kuzu.io/rdf-ex#Adam"}), (b:Student {name: "Adam"})\nCREATE (a)-[:SameStudent]->(b);\n\nMATCH (a:UniKG_r {iri: "http://kuzu.io/rdf-ex#Karissa"}), (b:Student {name: "Karissa"})\nCREATE (a)-[:SameStudent]->(b);\n')),(0,r.kt)("p",null,"Now, we can query the RDFGraph and the Student node table together as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'MATCH (a:Student {name:"Adam"})-[:SameStudent]-(s)-[p:UniKG]->(o) \nRETURN a.phone, s.iri, p.iri, o.val, o.iri, a.phone;\n\nOutput:\n-------------------------------------------------------------------------------------------------------------------------------------\n| a.phone   | s.iri                      | p.iri                                           | o.val | o.iri                          |\n-------------------------------------------------------------------------------------------------------------------------------------\n| 123456789 | http://kuzu.io/rdf-ex#Adam | http://kuzu.io/rdf-ex#name                      | Adam  |                                |\n-------------------------------------------------------------------------------------------------------------------------------------\n| 123456789 | http://kuzu.io/rdf-ex#Adam | http://kuzu.io/rdf-ex#age                       | 30    |                                |\n-------------------------------------------------------------------------------------------------------------------------------------\n| 123456789 | http://kuzu.io/rdf-ex#Adam | http://kuzu.io/rdf-ex#livesIn                   |       | http://kuzu.io/rdf-ex#Waterloo |\n-------------------------------------------------------------------------------------------------------------------------------------\n| 123456789 | http://kuzu.io/rdf-ex#Adam | http://www.w3.org/1999/02/22-rdf-syntax-ns#type |       | http://kuzu.io/rdf-ex#student  |\n-------------------------------------------------------------------------------------------------------------------------------------\n')),(0,r.kt)("p",null,"Above, a is a node table record from the Student node table, s is a resource node from the ",(0,r.kt)("inlineCode",{parentName:"p"},"UniKG_r")," node table,\n",(0,r.kt)("inlineCode",{parentName:"p"},"p")," is either a relationship record from the ",(0,r.kt)("inlineCode",{parentName:"p"},"UniKG_rt")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"UniKG_lt")," relationship tables, and ",(0,r.kt)("inlineCode",{parentName:"p"},"o")," is either a resource or literal\nrecord from the ",(0,r.kt)("inlineCode",{parentName:"p"},"UniKG_r")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"UniKG_l")," node tables."),(0,r.kt)("h2",{id:"modifying-rdfgraphs-using-create-set-merge-and-delete"},"Modifying RDFGraphs Using ",(0,r.kt)("inlineCode",{parentName:"h2"},"CREATE"),", ",(0,r.kt)("inlineCode",{parentName:"h2"},"SET"),", ",(0,r.kt)("inlineCode",{parentName:"h2"},"MERGE")," and ",(0,r.kt)("inlineCode",{parentName:"h2"},"DELETE")),(0,r.kt)("p",null,"Similar to how you can query the base 4 tables in RDFGraphs, you can also manipulate the base tables of RDFGraphs\nthrough the regular ",(0,r.kt)("a",{parentName:"p",href:"../cypher/data-manipulation-clauses/create"},"CREATE"),",\n",(0,r.kt)("a",{parentName:"p",href:"../cypher/data-manipulation-clauses/merge"},"MERGE"),",\n",(0,r.kt)("a",{parentName:"p",href:"../cypher/data-manipulation-clauses/delete"},"DELETE")," and ",(0,r.kt)("a",{parentName:"p",href:"../cypher/data-manipulation-clauses/delete#detach-delete"},"DETACH DELETE"),"\nstatements of Cypher with some restrictions: "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Restriction 1:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"SET")," operations, including those used after ",(0,r.kt)("inlineCode",{parentName:"li"},"MERGE"),", such as\n",(0,r.kt)("inlineCode",{parentName:"li"},"ON MATCH/ON CREATE SET")," are not supported. For example, you cannot change the ",(0,r.kt)("inlineCode",{parentName:"li"},"iri")," property of a Resource node or\nthe ",(0,r.kt)("inlineCode",{parentName:"li"},"val")," property of a Literal node."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Restriction 2:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"DELETE")," operations on Resource node tables are not allowed.")),(0,r.kt)("p",null,"In short, we support inserting and deleting of records from the relationship tables, inserting records into Resource node tables,\nand inserting and deleting Literal node tables. We provide a few examples below and discuss some of the restrictions.\nFor details please see the documentation of the respective clauses."),(0,r.kt)("p",null,"Here is an example of how you can create a new resource node in the ",(0,r.kt)("inlineCode",{parentName:"p"},"UniKG_r")," node table."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'WITH "http://kuzu.io/rdf-ex#" as kz \nCREATE (r:UniKG_r {iri: kz+"Nour"}) \nRETURN r;\n')),(0,r.kt)("p",null,"Here is an example of how you can create a new triple in the UniKG_rt relationship table:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'WITH "http://kuzu.io/rdf-ex#" as kz, "http://www.w3.org/1999/02/22-rdf-syntax-ns#" as rdf\nMATCH (s:UniKG_r {iri: kz+"Nour"})\nCREATE (s)-[p1:UniKG_rt {iri: rdf + "type"}]->(o1:UniKG_r {iri: kz + "student"})\nCREATE (s)-[p2:UniKG_lt {iri: kz + "lastName"}]->(o2:UniKG_l {val: "Salah"});\n\nWITH "http://kuzu.io/rdf-ex#" as kz \nMATCH (s:UniKG_r {iri: kz+"Nour"})-[p:UniKG]->(o) \nRETURN s.iri, p.iri, o.iri, o.val;\nOutput:\n------------------------------------------------------------------------------------------------------------------------\n| s.iri                      | p.iri                                           | o.iri                         | o.val |\n------------------------------------------------------------------------------------------------------------------------\n| http://kuzu.io/rdf-ex#Nour | http://kuzu.io/rdf-ex#lastName                  |                               | Salah |\n------------------------------------------------------------------------------------------------------------------------\n| http://kuzu.io/rdf-ex#Nour | http://www.w3.org/1999/02/22-rdf-syntax-ns#type | http://kuzu.io/rdf-ex#student |       |\n------------------------------------------------------------------------------------------------------------------------\n')),(0,r.kt)("p",null,"Note that the second CREATE statement creates a new ",(0,r.kt)("inlineCode",{parentName:"p"},"UniKG_r")," resource node with IRI ",(0,r.kt)("inlineCode",{parentName:"p"},"http://kuzu.io/rdf-ex#lastName"),",\nwhich was not present in our example RDFGraph before. Recall that every unique IRI that appears in an RDFGraph, whether as a subject,\npredicate or object, gets a corresponding node in the ",(0,r.kt)("inlineCode",{parentName:"p"},"UniKG_r")," node table (see item 1. in the ",(0,r.kt)("a",{parentName:"p",href:"#rdfgraphs-mapping-of-triples-to-property-graph-tables"},"section above"),"\ndescribing the mapping of triples to node and relationship tables)."),(0,r.kt)("p",null,"Finally, here is an example of how you can delete the last literal nodes with val 150000 and all its relationships/triples."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"MATCH (l:UniKG_l {val: 150000})\nDETACH DELETE l;\n")),(0,r.kt)("p",null,"Only the literal node in the <",(0,r.kt)("inlineCode",{parentName:"p"},"kz:Waterloo"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"kz:population"),", 150000> triple will match ",(0,r.kt)("inlineCode",{parentName:"p"},"l"),". So ",(0,r.kt)("inlineCode",{parentName:"p"},"l")," and the\ntriple <",(0,r.kt)("inlineCode",{parentName:"p"},"kz:Waterloo"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"kz:population"),", 150000> will be deleted."),(0,r.kt)("h3",{id:"restrictions-for-deleting-resource-nodes"},"Restrictions for Deleting Resource Nodes"),(0,r.kt)("p",null,'As listed among the above restrictions, Resource node table is append only, i.e., you cannot delete resource nodes.\nThe reason for this restriction is that\ndeleting a resource node correctly requires deleting all the relationships and triples that "refer" to it.\nRecall that every IRI in an RDF dataset is modeled as a resource node, including those IRIs that appear in the\npredicates of some triples (see item 1. in the ',(0,r.kt)("a",{parentName:"p",href:"#rdfgraphs-mapping-of-triples-to-property-graph-tables"},"section above"),"\ndescribing the mapping of triples to node and relationship tables). For example, in our running example, we have the following triple:\n< ",(0,r.kt)("inlineCode",{parentName:"p"},"kz:Waterloo"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"rdf:type"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"kz:City")," >.\nThe IRI ",(0,r.kt)("inlineCode",{parentName:"p"},"rdf:type")," is a resource node in the ",(0,r.kt)("inlineCode",{parentName:"p"},"UniKG_r")," node table. Specifically, it is the 2nd row above\nin the ",(0,r.kt)("inlineCode",{parentName:"p"},"UniKG_r")," table where we show the mapping of triples to node and relationship tables.\nTo correctly delete this node, we would have to delete all triples/relationships in the ",(0,r.kt)("inlineCode",{parentName:"p"},"UniKG_rt")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"UniKG_lt")," relationship tables\nthat have ",(0,r.kt)("inlineCode",{parentName:"p"},"rdf:type")," as their ",(0,r.kt)("inlineCode",{parentName:"p"},"iri"),". For example, there are 4 such relationships in ",(0,r.kt)("inlineCode",{parentName:"p"},"UniKG_rt"),".\nThis is a non-trivial operation and we have not yet implemented it in K\xf9zu."),(0,r.kt)("h3",{id:"malformed-iri-behavior-in-create-statements-vs-turtle-files"},"Malformed IRI Behavior In CREATE Statements vs Turtle Files"),(0,r.kt)("p",null,"K\xf9zu does not require that the values stored in the ",(0,r.kt)("inlineCode",{parentName:"p"},"iri")," property of the Resource node table is a valid IRI\naccording to the ",(0,r.kt)("a",{parentName:"p",href:"https://www.ietf.org/rfc/rfc3987.txt"},"official IRI standard"),". From K\xf9zu's perspective they can be arbitrary strings.\nThey only need be unique because ",(0,r.kt)("inlineCode",{parentName:"p"},"iri")," is a primary key of the Resource node table. For example, you can insert a Resource node table\nwith the following ",(0,r.kt)("inlineCode",{parentName:"p"},"<http://full IRI/#ex>")," string, which is not a valid IRI for two reasons, first it starts with\nangle bracket and second because it contains the space character. However, you can insert it and the ",(0,r.kt)("inlineCode",{parentName:"p"},"iri"),' that will\nbe stored would be the "<http://full IRI/#ex>" string. However, when doing bulk data ingestion from Turtle files,\ntriples with malformed IRIs will be ignored and not inserted into K\xf9zu. That is a side effect of the parser\n',(0,r.kt)("a",{parentName:"p",href:"https://github.com/drobilla/serd"},"Serd"),' that K\xf9zu uses, which skips such triples (in fact it may skip an\nentire "chunk" of triples in the Turtle file; see the ',(0,r.kt)("a",{parentName:"p",href:"./rdf-import#behavior-during-importing-malformed-triples-in-turtle-files"},"documentation")," on this behavior here)."),(0,r.kt)("h3",{id:"using-blank-node-ids-in-create-statements"},"Using Blank Node IDs in CREATE Statements"),(0,r.kt)("p",null,"K\xf9zu has the convention that during bulk data import from Turtle or N-Triples files,\nblank nodes are replaced with specific IRIs of the form ",(0,r.kt)("inlineCode",{parentName:"p"},"_:ibj"),", where i and j are some integers.\nIf you use IRIs of this form, say ",(0,r.kt)("inlineCode",{parentName:"p"},"_:7b4"),", in your CREATE statements for Resource nodes,\nK\xf9zu will interpret these as simple strings. For example, if\na blank node with IRI ",(0,r.kt)("inlineCode",{parentName:"p"},"_:7b4")," already exists, K\xf9zu will not CREATE a new Resource node and instead error.\nFurther, you cannot have predicates whose IRIs of the form ",(0,r.kt)("inlineCode",{parentName:"p"},"_:ibj")," (as in Turtle files).\nK\xf9zu will error on CREATE statements that try to create a relationship\nrecord in the ",(0,r.kt)("inlineCode",{parentName:"p"},"_rt")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"_lt")," relationship tables with a predicate\nwhose IRI is of the form ",(0,r.kt)("inlineCode",{parentName:"p"},"_:ibj"),"."),(0,r.kt)("h2",{id:"duplicate-triples"},"Duplicate Triples"),(0,r.kt)("p",null,"Some RDF stores do not allow duplicate triples to be inserted into a database.\nIn K\xf9zu, because each triple is a relationship record, and K\xf9zu supports multiple relationships between\nthe same pair of nodes, it is possible to insert duplicate triples into K\xf9zu RDFGraphs."))}m.isMDXComponent=!0},1130:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/rdf-running-example-3931e199eafc4feb946b6c0c7fe51d94.png"}}]);