"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[413],{3905:(t,e,n)=>{n.d(e,{Zo:()=>s,kt:()=>f});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function p(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var o=a.createContext({}),u=function(t){var e=a.useContext(o),n=e;return t&&(n="function"==typeof t?t(e):p(p({},e),t)),n},s=function(t){var e=u(t.components);return a.createElement(o.Provider,{value:e},t.children)},c="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,l=t.originalType,o=t.parentName,s=i(t,["components","mdxType","originalType","parentName"]),c=u(n),d=r,f=c["".concat(o,".").concat(d)]||c[d]||m[d]||l;return n?a.createElement(f,p(p({ref:e},s),{},{components:n})):a.createElement(f,p({ref:e},s))}));function f(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=n.length,p=new Array(l);p[0]=d;var i={};for(var o in e)hasOwnProperty.call(e,o)&&(i[o]=e[o]);i.originalType=t,i[c]="string"==typeof t?t:r,p[1]=i;for(var u=2;u<l;u++)p[u]=n[u];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5537:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>o,contentTitle:()=>p,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const l={title:"Map Functions",description:"Map functions are used to create and manipulate maps."},p="Map Functions",i={unversionedId:"cypher/expressions/map-functions",id:"cypher/expressions/map-functions",title:"Map Functions",description:"Map functions are used to create and manipulate maps.",source:"@site/docs/cypher/expressions/map-functions.md",sourceDirName:"cypher/expressions",slug:"/cypher/expressions/map-functions",permalink:"/docusaurus/cypher/expressions/map-functions",draft:!1,tags:[],version:"current",frontMatter:{title:"Map Functions",description:"Map functions are used to create and manipulate maps."},sidebar:"docSidebar",previous:{title:"Logical Operators",permalink:"/docusaurus/cypher/expressions/logical-operators"},next:{title:"Node/Rel Functions",permalink:"/docusaurus/cypher/expressions/node-rel-functions"}},o={},u=[],s={toc:u},c="wrapper";function m(t){let{components:e,...n}=t;return(0,r.kt)(c,(0,a.Z)({},s,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"map-functions"},"Map Functions"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Function"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Example"),(0,r.kt)("th",{parentName:"tr",align:null},"Result"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"map(keys, values)"),(0,r.kt)("td",{parentName:"tr",align:null},"create a map"),(0,r.kt)("td",{parentName:"tr",align:null},"map(","[1, 2]",", ","['a', 'b']",")"),(0,r.kt)("td",{parentName:"tr",align:null},"{1=a, 2=b}")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"map_extract(map, key)"),(0,r.kt)("td",{parentName:"tr",align:null},"returning a list containing the value for given key or empty list if key is not found"),(0,r.kt)("td",{parentName:"tr",align:null},"map_extract(map(","[1, 2]",", ","['a', 'b']","), 1)"),(0,r.kt)("td",{parentName:"tr",align:null},"['a']")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"element_at(map, key)"),(0,r.kt)("td",{parentName:"tr",align:null},"alias of map_extract"),(0,r.kt)("td",{parentName:"tr",align:null},"element_at(map(","[1, 2]",", ","['a', 'b']","), 1)"),(0,r.kt)("td",{parentName:"tr",align:null},"['a']")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"cardinality(map)"),(0,r.kt)("td",{parentName:"tr",align:null},"returns the size of the map"),(0,r.kt)("td",{parentName:"tr",align:null},"cardinality(map(","[1, 2]",", ","['a', 'b']","))"),(0,r.kt)("td",{parentName:"tr",align:null},"2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"map_keys(map)"),(0,r.kt)("td",{parentName:"tr",align:null},"returns all keys in the map"),(0,r.kt)("td",{parentName:"tr",align:null},"map_keys(map(","[1, 2]",", ","['a', 'b']","))"),(0,r.kt)("td",{parentName:"tr",align:null},"[1,2]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"map_values(map)"),(0,r.kt)("td",{parentName:"tr",align:null},"returns all values in the map"),(0,r.kt)("td",{parentName:"tr",align:null},"map_values(map(","[1, 2]",", ","['a', 'b']","))"),(0,r.kt)("td",{parentName:"tr",align:null},"[a,b]")))))}m.isMDXComponent=!0}}]);