"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[9486],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>h});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(r),m=a,h=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return r?n.createElement(h,i(i({ref:t},c),{},{components:r})):n.createElement(h,i({ref:t},c))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8505:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const o={title:"Operating System Compatibility",sidebar_position:20},i=void 0,s={unversionedId:"getting-started/os",id:"getting-started/os",title:"Operating System Compatibility",description:"CLI, C and C++",source:"@site/docs/getting-started/os.md",sourceDirName:"getting-started",slug:"/getting-started/os",permalink:"/docusaurus/getting-started/os",draft:!1,tags:[],version:"current",sidebarPosition:20,frontMatter:{title:"Operating System Compatibility",sidebar_position:20},sidebar:"docSidebar",previous:{title:"Java",permalink:"/docusaurus/getting-started/java"},next:{title:"Data Import",permalink:"/docusaurus/data-import/"}},p={},l=[{value:"CLI, C and C++",id:"cli-c-and-c",level:2},{value:"Python",id:"python",level:2},{value:"Node.js",id:"nodejs",level:2},{value:"Java",id:"java",level:2},{value:"Rust",id:"rust",level:2}],c={toc:l},d="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"cli-c-and-c"},"CLI, C and C++"),(0,a.kt)("p",null,"K\xf9zu CLI, C and C++ API are pre-compiled for ",(0,a.kt)("strong",{parentName:"p"},"macOS >= 10.15 for Intel-based Macs")," and ",(0,a.kt)("strong",{parentName:"p"},"macOS >= 11.0 for ARM-based Macs"),". For Linux, K\xf9zu CLI, C and C++ API are pre-compiled for x86-64 architecture and supports most modern Linux distros such as ",(0,a.kt)("strong",{parentName:"p"},"RHEL/CentOS/Rocky Linux/Oracle Linux 7.0 or later and Ubuntu 18.04 or later"),". For a specific list of Linux distros that we tested on, please refer to ",(0,a.kt)("a",{parentName:"p",href:"https://docs.google.com/spreadsheets/d/13A3MA3IsBJB_CJBSMqWFktIzyb6unJqH0-3njDycDpQ/"},"this spreadsheet"),". For Windows, K\xf9zu CLI, C and C++ API works on Windows 10 and 11."),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("p",null,"K\xf9zu Python API wheels has been pre-compiled for ",(0,a.kt)("strong",{parentName:"p"},"CPython 3.7 to 3.11"),". For macOS, the OS compatibility is the same as the pre-compiled CLI, C and C++ API (i.e.  macOS >= 10.15 for Intel-based Macs and macOS >= 11.0 for ARM-based Macs). For Linux, the pre-compiled wheels follows ",(0,a.kt)("inlineCode",{parentName:"p"},"manylinux2014_x86_64")," standard. Please refer to ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/pypa/manylinux"},"this link")," to check the compatibility with your distro. For Windows, the OS compatibility is the same as the pre-compiled CLI and C++ API (i.e. Windows 10 and 11)."),(0,a.kt)("h2",{id:"nodejs"},"Node.js"),(0,a.kt)("p",null,"K\xf9zu Node.js API is based on Node-API version 5. For a list of compatible Node.js versions, please refer to ",(0,a.kt)("a",{parentName:"p",href:"https://nodejs.org/api/n-api.html#node-api-version-matrix"},"the official documentation"),". For macOS, the OS compatibility is the same as the pre-compiled CLI and C++ API (i.e.  macOS >= 10.15 for Intel-based Macs and macOS >= 11.0 for ARM-based Macs). For Linux, the pre-compiled has been tested on ",(0,a.kt)("a",{parentName:"p",href:"https://docs.google.com/spreadsheets/d/13A3MA3IsBJB_CJBSMqWFktIzyb6unJqH0-3njDycDpQ/#gid=1200966755"},"these platforms"),". Note that you may have to install to a newer version of Node.js manually if your distribution comes with an older version of Node.js. The Node.js API is currently not compatible with Windows. "),(0,a.kt)("h2",{id:"java"},"Java"),(0,a.kt)("p",null,"K\xf9zu Java API is compatible with Java 8+. The OS compatibility is the same as C/C++ APIs. For MacOS, it supports >=10.15 for Intel-based Macs and >= 11.0 for ARM-based Macs. For Linux, it supports most modern Linux distros such as RHEL/CentOS/Rocky Linux/Oracle Linux 7.0 or later and Ubuntu 18.04 or later on x86-64 architecture. For Windows, it supports Windows 10 and 11."),(0,a.kt)("h2",{id:"rust"},"Rust"),(0,a.kt)("p",null,"The K\xf9zu Rust API links against K\xf9zu's C++ API. By default it compiles the C++ library from source, and the build process has been tested on Windows using MSVC, and macOS and Linux using GCC. If linking to the release binaries (see ",(0,a.kt)("a",{parentName:"p",href:"https://docs.rs/kuzu/latest/kuzu/#building"},"here"),") the restrictions mentioned for the C++ API above apply."))}u.isMDXComponent=!0}}]);