"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[9202],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),s=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=s(e.components);return n.createElement(i.Provider,{value:t},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),c=s(r),m=a,d=c["".concat(i,".").concat(m)]||c[m]||g[m]||l;return r?n.createElement(d,o(o({ref:t},p),{},{components:r})):n.createElement(d,o({ref:t},p))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,o=new Array(l);o[0]=m;var u={};for(var i in t)hasOwnProperty.call(t,i)&&(u[i]=t[i]);u.originalType=e,u[c]="string"==typeof e?e:a,o[1]=u;for(var s=2;s<l;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4072:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>g,frontMatter:()=>l,metadata:()=>u,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const l={title:"Aggregate Functions",description:"Aggregate functions are used to compute a single result from a set of input values."},o="Aggregate Functions",u={unversionedId:"cypher/expressions/aggregate-functions",id:"cypher/expressions/aggregate-functions",title:"Aggregate Functions",description:"Aggregate functions are used to compute a single result from a set of input values.",source:"@site/docs/cypher/expressions/aggregate-functions.md",sourceDirName:"cypher/expressions",slug:"/cypher/expressions/aggregate-functions",permalink:"/docusaurus/cypher/expressions/aggregate-functions",draft:!1,tags:[],version:"current",frontMatter:{title:"Aggregate Functions",description:"Aggregate functions are used to compute a single result from a set of input values."},sidebar:"tutorialSidebar",previous:{title:"Functions and Expressions",permalink:"/docusaurus/cypher/expressions/"},next:{title:"Case Expression",permalink:"/docusaurus/cypher/expressions/case-expression"}},i={},s=[],p={toc:s},c="wrapper";function g(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"aggregate-functions"},"Aggregate Functions"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Function"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Example"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"avg(arg)"),(0,a.kt)("td",{parentName:"tr",align:null},"returns the average value of all tuples in arg"),(0,a.kt)("td",{parentName:"tr",align:null},"avg(a.length)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"count(arg)"),(0,a.kt)("td",{parentName:"tr",align:null},"returns the number of tuples in arg"),(0,a.kt)("td",{parentName:"tr",align:null},"count(a.ID)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"min(arg)"),(0,a.kt)("td",{parentName:"tr",align:null},"returns the minimum value of arg"),(0,a.kt)("td",{parentName:"tr",align:null},"min(a.legnth)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"max(arg)"),(0,a.kt)("td",{parentName:"tr",align:null},"returns the maximum value of arg"),(0,a.kt)("td",{parentName:"tr",align:null},"max(a.length)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"sum(arg)"),(0,a.kt)("td",{parentName:"tr",align:null},"returns the sum value of all tuples in arg"),(0,a.kt)("td",{parentName:"tr",align:null},"sum(a.length)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"collect(arg)"),(0,a.kt)("td",{parentName:"tr",align:null},"returns a list containing values returned by arg expression"),(0,a.kt)("td",{parentName:"tr",align:null},"collect(a.age)")))))}g.isMDXComponent=!0}}]);