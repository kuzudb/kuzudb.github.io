"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[9867],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(r),y=a,m=u["".concat(s,".").concat(y)]||u[y]||d[y]||o;return r?n.createElement(m,i(i({ref:t},p),{},{components:r})):n.createElement(m,i({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=y;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}y.displayName="MDXCreateElement"},8424:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const o={title:"Serial",sidebar_position:7},i="SERIAL",l={unversionedId:"cypher/data-types/serial",id:"cypher/data-types/serial",title:"Serial",description:"SERIAL is a logical data type and usually used for creating an incremental sequence of unique identifier column (similar to AUTO_INCREMENT supported by some other databases).",source:"@site/docs/cypher/data-types/serial.md",sourceDirName:"cypher/data-types",slug:"/cypher/data-types/serial",permalink:"/docusaurus/cypher/data-types/serial",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cypher/data-types/serial.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"Serial",sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Struct",permalink:"/docusaurus/cypher/data-types/struct"},next:{title:"Null Value",permalink:"/docusaurus/cypher/data-types/null"}},s={},c=[{value:"Using <code>SERIAL</code> as Primary Key Column",id:"using-serial-as-primary-key-column",level:3}],p={toc:c},u="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"serial"},"SERIAL"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"SERIAL")," is a logical data type and usually used for creating an incremental sequence of unique identifier column (similar to ",(0,a.kt)("inlineCode",{parentName:"p"},"AUTO_INCREMENT")," supported by some other databases)."),(0,a.kt)("h3",{id:"using-serial-as-primary-key-column"},"Using ",(0,a.kt)("inlineCode",{parentName:"h3"},"SERIAL")," as Primary Key Column"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"person.csv")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Alice\nBob\nCarol\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"CREATE NODE TABLE Person(ID SERIAL, name STRING, PRIMARY KEY(ID));\nCOPY Person FROM `person.csv`;\nMATCH (a:Person) RETURN a;\n")),(0,a.kt)("p",null,"Output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"-------------------------------------------\n| a                                       |\n-------------------------------------------\n| (label:Person, 3:0, {ID:0, name:Alice}) |\n-------------------------------------------\n| (label:Person, 3:1, {ID:1, name:Bob})   |\n-------------------------------------------\n| (label:Person, 3:2, {ID:2, name:Carol}) |\n-------------------------------------------\n")))}d.isMDXComponent=!0}}]);