"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[7794],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),i=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=i(e.components);return r.createElement(p.Provider,{value:t},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),s=i(n),d=a,f=s["".concat(p,".").concat(d)]||s[d]||m[d]||o;return n?r.createElement(f,l(l({ref:t},c),{},{components:n})):r.createElement(f,l({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var u={};for(var p in t)hasOwnProperty.call(t,p)&&(u[p]=t[p]);u.originalType=e,u[s]="string"==typeof e?e:a,l[1]=u;for(var i=2;i<o;i++)l[i]=n[i];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9455:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>u,toc:()=>i});var r=n(7462),a=(n(7294),n(3905));const o={title:"Schema Functions",description:"Schema functions are used to get information about nodes and relationships."},l="Schema Functions",u={unversionedId:"cypher/expressions/schema-functions",id:"cypher/expressions/schema-functions",title:"Schema Functions",description:"Schema functions are used to get information about nodes and relationships.",source:"@site/docs/cypher/expressions/schema-functions.md",sourceDirName:"cypher/expressions",slug:"/cypher/expressions/schema-functions",permalink:"/docusaurus/cypher/expressions/schema-functions",draft:!1,tags:[],version:"current",frontMatter:{title:"Schema Functions",description:"Schema functions are used to get information about nodes and relationships."},sidebar:"tutorialSidebar",previous:{title:"Pattern Matching Functions",permalink:"/docusaurus/cypher/expressions/pattern-matching"},next:{title:"Struct Functions",permalink:"/docusaurus/cypher/expressions/struct-functions"}},p={},i=[{value:"ID Function",id:"id-function",level:3},{value:"LABEL Function",id:"label-function",level:3},{value:"OFFSET Function",id:"offset-function",level:3},{value:"LENGTH Function",id:"length-function",level:3}],c={toc:i},s="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(s,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"schema-functions"},"Schema Functions"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Function"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"ID(NODE/RELATIONSHIP)"),(0,a.kt)("td",{parentName:"tr",align:null},"returns the internal ID of node/rel")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"LABEL(NODE/RELATIONSHIP)"),(0,a.kt)("td",{parentName:"tr",align:null},"returns the label name of node/rel")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"OFFSET(INTERNAL_ID)"),(0,a.kt)("td",{parentName:"tr",align:null},"returns the offset of internal ID")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"LEGNTH(RECURSIVE_RELATIONSHIP)"),(0,a.kt)("td",{parentName:"tr",align:null},"returns the length of recursive rel")))),(0,a.kt)("h3",{id:"id-function"},"ID Function"),(0,a.kt)("p",null,"Returns the internal ID of node/rel."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Input Type"),": NODE/RELATIONSHIP"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Output Type"),": INTERNAL_ID"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"MATCH (a:User) RETURN ID(a) AS ID LIMIT 1;\n")),(0,a.kt)("p",null,"Output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"-------\n| ID  |\n-------\n| 0:0 |\n-------\n")),(0,a.kt)("h3",{id:"label-function"},"LABEL Function"),(0,a.kt)("p",null,"Returns the label name of node/rel."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Input Type"),": NODE/RELATIONSHIP"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Output Type"),": STRING"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"MATCH (a) RETURN LABEL(a) AS LABEL LIMIT 1;\n")),(0,a.kt)("p",null,"Output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"---------\n| LABEL |\n---------\n| User  |\n---------\n")),(0,a.kt)("h3",{id:"offset-function"},"OFFSET Function"),(0,a.kt)("p",null,"Returns the offset of internal ID"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Input Type"),": INTERNAL_ID"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Output Type"),": INT64"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"MATCH (a) RETURN OFFSET(ID(a)) AS OFFSET LIMIT 1;\n")),(0,a.kt)("p",null,"Output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"----------\n| OFFSET |\n----------\n| 0      |\n----------\n")),(0,a.kt)("h3",{id:"length-function"},"LENGTH Function"),(0,a.kt)("p",null,"Returns the length of recursive relationship"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Input Type"),": RECURSIVE_RELATIONSHIP"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Output Type"),": INT64"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"MATCH (a:User)-[e*SHORTEST 1 .. 5]->(b:City)\nWHERE a.name = 'Adam'\nRETURN b.name, length(e) AS length;\n")),(0,a.kt)("p",null,"Output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"----------------------\n| b.name    | length |\n----------------------\n| Waterloo  | 1      |\n----------------------\n| Kitchener | 2      |\n----------------------\n| Guelph    | 3      |\n----------------------\n")))}m.isMDXComponent=!0}}]);