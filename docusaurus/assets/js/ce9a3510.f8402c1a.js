"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[4699],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},v=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(a),v=r,m=u["".concat(s,".").concat(v)]||u[v]||d[v]||i;return a?n.createElement(m,o(o({ref:t},c),{},{components:a})):n.createElement(m,o({ref:t},c))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=v;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}v.displayName="MDXCreateElement"},6854:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const i={title:"Vector",sidebar_position:2},o="Vector",l={unversionedId:"development/database-internal/vector",id:"development/database-internal/vector",title:"Vector",description:"ValueVector",source:"@site/docs/development/database-internal/vector.md",sourceDirName:"development/database-internal",slug:"/development/database-internal/vector",permalink:"/docusaurus/development/database-internal/vector",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Vector",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"DataType",permalink:"/docusaurus/development/database-internal/datatype"},next:{title:"Execution",permalink:"/docusaurus/development/database-internal/execution"}},s={},p=[{value:"ValueVector",id:"valuevector",level:2},{value:"Primitive Type ValueVector",id:"primitive-type-valuevector",level:4},{value:"String Type ValueVector",id:"string-type-valuevector",level:4},{value:"Nested Type ValueVector",id:"nested-type-valuevector",level:4},{value:"SelectionState",id:"selectionstate",level:2},{value:"DataChunk",id:"datachunk",level:2},{value:"ResultSet",id:"resultset",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"vector"},"Vector"),(0,r.kt)("h2",{id:"valuevector"},"ValueVector"),(0,r.kt)("p",null,"Value vector is our column-oriented in-memory data structure to store a chunk of data of the same data type. The size of value vector is defined by ",(0,r.kt)("inlineCode",{parentName:"p"},"DEFAULT_VECTOR_CAPACITY")," which is 2048. This is an empiracal size hoping data stored in thie value vector will fit into cpu cache."),(0,r.kt)("p",null,"A value vector has the following core fields:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"data"),": stores the actual data which is a trivial bytes arrary managed by unique pointer. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"nullMask"),": aligned with ",(0,r.kt)("inlineCode",{parentName:"li"},"data")," and indicate if each entry is ",(0,r.kt)("inlineCode",{parentName:"li"},"NULL")," or not."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"auxilaryBuffer"),": keeps track of additional data that does NOT fit in ",(0,r.kt)("inlineCode",{parentName:"li"},"data"),".")),(0,r.kt)("h4",{id:"primitive-type-valuevector"},"Primitive Type ValueVector"),(0,r.kt)("p",null,"For primitive data type, we can represents data in ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," field. E.g. to represent 0 to 99 elements with ",(0,r.kt)("inlineCode",{parentName:"p"},"INT64")," data type, ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," is simply a ",(0,r.kt)("inlineCode",{parentName:"p"},"int64_t[]")," with size 100."),(0,r.kt)("h4",{id:"string-type-valuevector"},"String Type ValueVector"),(0,r.kt)("p",null,"The privious storage requires each element to have a fixed size. This however, does NOT work with ",(0,r.kt)("inlineCode",{parentName:"p"},"STRING")," type whose size may vary. We implemnt ",(0,r.kt)("inlineCode",{parentName:"p"},"STRING")," as a 16 bytes data structure with first 8 bytes as prefix and last 8 bytes as a pointer pointing to a memory location storing the rest of string. The fixed length part of ",(0,r.kt)("inlineCode",{parentName:"p"},"STRING")," is stored in ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," and the overflow part is stored in ",(0,r.kt)("inlineCode",{parentName:"p"},"auxilaryBuffer"),"."),(0,r.kt)("h4",{id:"nested-type-valuevector"},"Nested Type ValueVector"),(0,r.kt)("p",null,"Although nested type value vector can be organized as overflow in the same way as ",(0,r.kt)("inlineCode",{parentName:"p"},"STRING"),", we want to utilize the fact that the child type of a nested type is known and can still be stored in column-oriented value vector."),(0,r.kt)("p",null,"For ",(0,r.kt)("inlineCode",{parentName:"p"},"STRUCT")," type, we store children vectors in ",(0,r.kt)("inlineCode",{parentName:"p"},"auxilaryBuffer"),". E.g."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Data to represent:\n    [{11,12}, {13,14}, {15,16}]\n\nSTRUCT value vector\n    data: [0, 1, 2] // offset\n    auxilaryBuffer:\n        child vector:\n            data: [11, 13, 15]\n        child vector\n            data: [12, 14, 16]\n")),(0,r.kt)("p",null,"For ",(0,r.kt)("inlineCode",{parentName:"p"},"VAR_LIST")," type, we store size and offset of each entry in ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," and elements in ",(0,r.kt)("inlineCode",{parentName:"p"},"auxilaryBuffer"),". E.g."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Data to represent:\n    [[10], [11,12], [13,14,15]]\n\nList value vector\n    data: [(0,1), (1,2), (3,3)] // offset,size\n    auxilaryBuffer:\n        child vector:\n            data: [10,11,12,13,14,15]\n")),(0,r.kt)("h2",{id:"selectionstate"},"SelectionState"),(0,r.kt)("p",null,"Selection state keeps track of data that are valid. This is mainly used to select a subset of data (e.g. data that satisfy filer) without performing a copy."),(0,r.kt)("p",null,"A selection state has the following core fields:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"selectedPositions"),": a vector of ",(0,r.kt)("inlineCode",{parentName:"li"},"uint16_t")," that maps to a position of ",(0,r.kt)("inlineCode",{parentName:"li"},"data")," vector."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"selectedSize"),": size of selected positions")),(0,r.kt)("p",null,"E.g."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Value vector\n    data: [10, 11, 12, 13, 14]\n\nSelection state:\n    selectedPositions: [0, 2]\n    selectedSize: 2\n\nData being represented:\n    [10, 12]\n")),(0,r.kt)("h2",{id:"datachunk"},"DataChunk"),(0,r.kt)("p",null,"A data chunk is a collection of value vector with the same state."),(0,r.kt)("p",null,"E.g."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Data chunk\n    Value vector: [1, 2, 3]\n    Value vector: [a, b, c]\n\n\nData being represented:\n[(1,a), (2,b), (3,c)]\n")),(0,r.kt)("h2",{id:"resultset"},"ResultSet"),(0,r.kt)("p",null,"A result set is a collection of data chunk that forms a cartesian product.\nE.g."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Result set\n    Data chunk\n        Value vector: [1, 2, 3]\n        Value vector: [a, b, c]\n    Data Chunk\n        Value vector: [10, 11]\n\nData being represented:\n    [(1,a,10), (2,b,10), (3,c,10), (1,a,11), (2,b,11), (3,c,11)]\n")))}d.isMDXComponent=!0}}]);