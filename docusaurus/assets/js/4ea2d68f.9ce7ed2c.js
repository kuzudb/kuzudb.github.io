"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[8543],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var r=n(7294);function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){u(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,u=function(e,t){if(null==e)return{};var n,r,u={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(u[n]=e[n]);return u}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(u[n]=e[n])}return u}var o=r.createContext({}),i=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=i(e.components);return r.createElement(o.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},_=r.forwardRef((function(e,t){var n=e.components,u=e.mdxType,a=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=i(n),_=u,k=d["".concat(o,".").concat(_)]||d[_]||p[_]||a;return n?r.createElement(k,l(l({ref:t},c),{},{components:n})):r.createElement(k,l({ref:t},c))}));function k(e,t){var n=arguments,u=t&&t.mdxType;if("string"==typeof e||u){var a=n.length,l=new Array(a);l[0]=_;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[d]="string"==typeof e?e:u,l[1]=s;for(var i=2;i<a;i++)l[i]=n[i];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}_.displayName="MDXCreateElement"},6990:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>i});var r=n(7462),u=(n(7294),n(3905));const a={title:"C",sidebar_position:3},l=void 0,s={unversionedId:"getting-started/c",id:"getting-started/c",title:"C",description:"The K\xf9zu C API shares the same so/dylib/dll+lib library files with the C++ API and can be used by including the C header file (kuzu.h). The C API can be downloaded here. The detailed docs for C API can be found here.",source:"@site/docs/getting-started/c.md",sourceDirName:"getting-started",slug:"/getting-started/c",permalink:"/docusaurus/getting-started/c",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"C",sidebar_position:3},sidebar:"docSidebar",previous:{title:"C++",permalink:"/docusaurus/getting-started/cpp"},next:{title:"Node.js",permalink:"/docusaurus/getting-started/nodejs"}},o={},i=[],c={toc:i},d="wrapper";function p(e){let{components:t,...n}=e;return(0,u.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,u.kt)("p",null,"The K\xf9zu C API shares the same so/dylib/dll+lib library files with the C++ API and can be used by including the C header file (",(0,u.kt)("inlineCode",{parentName:"p"},"kuzu.h"),"). The C API can be downloaded ",(0,u.kt)("a",{parentName:"p",href:"https://github.com/kuzudb/kuzu/releases/latest"},"here"),". The detailed docs for C API can be ",(0,u.kt)("a",{parentName:"p",href:"https://kuzudb.com/api-docs/c/kuzu_8h.html"},"found here"),".\nHere is a brief guide on how to get started."),(0,u.kt)("ul",null,(0,u.kt)("li",{parentName:"ul"},"Setup:\nIn this example, we assume that the so/dylib, the header file, the CSV files, and the C code file is under the same directory:")),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre"},"\u251c\u2500\u2500 include                                    \n\u2502   \u251c\u2500\u2500 kuzu.h\n\u2502\xa0\xa0 \u2514\u2500\u2500 ......\n\u251c\u2500\u2500 libkuzu.so / libkuzu.dylib\n\u251c\u2500\u2500 test.c                                           \n\u251c\u2500\u2500 user.csv\n\u251c\u2500\u2500 city.csv\n\u251c\u2500\u2500 follows.csv\n\u2514\u2500\u2500 lives-in.csv\n")),(0,u.kt)("ul",null,(0,u.kt)("li",{parentName:"ul"},"The ",(0,u.kt)("inlineCode",{parentName:"li"},"test.c")," program:")),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>\n\n#include "include/kuzu.h"\n\nint main()\n{\n    // Create an empty database.\n    kuzu_database *db = kuzu_database_init("test", 0);\n\n    // Connect to the database.\n    kuzu_connection *conn = kuzu_connection_init(db);\n\n    // Create the schema.\n    kuzu_query_result *result = kuzu_connection_query(conn, "CREATE NODE TABLE User(name STRING, age INT64, PRIMARY KEY (name))");\n    kuzu_query_result_destroy(result);\n    result = kuzu_connection_query(conn, "CREATE NODE TABLE City(name STRING, population INT64, PRIMARY KEY (name))");\n    kuzu_query_result_destroy(result);\n    result = kuzu_connection_query(conn, "CREATE REL TABLE Follows(FROM User TO User, since INT64)");\n    kuzu_query_result_destroy(result);\n    result = kuzu_connection_query(conn, "CREATE REL TABLE LivesIn(FROM User TO City)");\n    kuzu_query_result_destroy(result);\n\n    // Load data.\n    result = kuzu_connection_query(conn, "COPY User FROM \\"user.csv\\"");\n    kuzu_query_result_destroy(result);\n    result = kuzu_connection_query(conn, "COPY City FROM \\"city.csv\\"");\n    kuzu_query_result_destroy(result);\n    result = kuzu_connection_query(conn, "COPY Follows FROM \\"follows.csv\\"");\n    kuzu_query_result_destroy(result);\n    result = kuzu_connection_query(conn, "COPY LivesIn FROM \\"lives-in.csv\\"");\n    kuzu_query_result_destroy(result);\n\n    // Execute a simple query.\n    result = kuzu_connection_query(conn, "MATCH (a:User)-[f:Follows]->(b:User) RETURN a.name, f.since, b.name;");\n\n    // Output query result.\n    while (kuzu_query_result_has_next(result))\n    {\n        kuzu_flat_tuple *tuple = kuzu_query_result_get_next(result);\n\n        kuzu_value *value = kuzu_flat_tuple_get_value(tuple, 0);\n        char *name = kuzu_value_get_string(value);\n        kuzu_value_destroy(value);\n\n        value = kuzu_flat_tuple_get_value(tuple, 1);\n        int64_t since = kuzu_value_get_int64(value);\n        kuzu_value_destroy(value);\n\n        value = kuzu_flat_tuple_get_value(tuple, 2);\n        char *name2 = kuzu_value_get_string(value);\n        kuzu_value_destroy(value);\n\n        printf("%s follows %s since %lld \\n", name, name2, since);\n        free(name);\n        free(name2);\n        kuzu_flat_tuple_destroy(tuple);\n    }\n\n    kuzu_query_result_destroy(result);\n    kuzu_connection_destroy(conn);\n    kuzu_database_destroy(db);\n    return 0;\n}\n')),(0,u.kt)("ul",null,(0,u.kt)("li",{parentName:"ul"},"Compile and run ",(0,u.kt)("inlineCode",{parentName:"li"},"test.c"),":\nSince we did not install the ",(0,u.kt)("inlineCode",{parentName:"li"},"libkuzu")," as a system library, we need to override the linker search path to correctly compile the C code and run the compiled program.")),(0,u.kt)("p",null,"On Linux:"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-bash"},"env LIBRARY_PATH=. LD_LIBRARY_PATH=. gcc test.c -lkuzu\nenv LIBRARY_PATH=. LD_LIBRARY_PATH=. ./a.out\n")),(0,u.kt)("p",null,"On macOS:"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-bash"},"env DYLD_LIBRARY_PATH=. LIBRARY_PATH=. clang test.c -lkuzu\nenv DYLD_LIBRARY_PATH=. LIBRARY_PATH=. ./a.out\n")),(0,u.kt)("p",null,"On Windows the library file is passed to the compiler directly and the current directory is used automatically when searching for ",(0,u.kt)("inlineCode",{parentName:"p"},"kuzu_shared.dll")," at runtime:"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre"},"cl test.c kuzu_shared.lib\n./test.exe\n")),(0,u.kt)("p",null,"Expected output:"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre"},"Adam follows Karissa since 2020 \nAdam follows Zhang since 2020 \nKarissa follows Zhang since 2021 \nZhang follows Noura since 2022 \n")))}p.isMDXComponent=!0}}]);