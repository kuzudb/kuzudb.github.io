"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[2161],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>y});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,y=u["".concat(p,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(y,o(o({ref:t},s),{},{components:n})):r.createElement(y,o({ref:t},s))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3049:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={title:"Struct",sidebar_position:11},o="STRUCT",l={unversionedId:"cypher/data-types/struct",id:"cypher/data-types/struct",title:"Struct",description:"A STRUCT is a dictionary of key-value pairs where keys are of type STRING. STRUCT is a fixed-size data type so values with the same STRUCT type must contain the same set of keys. User can think of a STRUCT column as a nested single column over multiple other columns.",source:"@site/docs/cypher/data-types/struct.md",sourceDirName:"cypher/data-types",slug:"/cypher/data-types/struct",permalink:"/docusaurus/cypher/data-types/struct",draft:!1,tags:[],version:"current",sidebarPosition:11,frontMatter:{title:"Struct",sidebar_position:11},sidebar:"docSidebar",previous:{title:"String",permalink:"/docusaurus/cypher/data-types/string"},next:{title:"Timestamp",permalink:"/docusaurus/cypher/data-types/timestamp"}},p={},c=[{value:"<code>STRUCT</code> creation",id:"struct-creation",level:3},{value:"<code>STRUCT</code> extraction",id:"struct-extraction",level:3}],s={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"struct"},"STRUCT"),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"STRUCT")," is a dictionary of key-value pairs where keys are of type STRING. ",(0,a.kt)("inlineCode",{parentName:"p"},"STRUCT")," is a fixed-size data type so values with the same ",(0,a.kt)("inlineCode",{parentName:"p"},"STRUCT")," type must contain the same set of keys. User can think of a ",(0,a.kt)("inlineCode",{parentName:"p"},"STRUCT")," column as a nested single column over multiple other columns."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,a.kt)("th",{parentName:"tr",align:null},"DDL definition"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"STRUCT"),(0,a.kt)("td",{parentName:"tr",align:null},"STRUCT(a INT64, b INT64)")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note"),": Updating ",(0,a.kt)("inlineCode",{parentName:"p"},"STRUCT")," with update statement is not yet supported."),(0,a.kt)("h3",{id:"struct-creation"},(0,a.kt)("inlineCode",{parentName:"h3"},"STRUCT")," creation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"RETURN {first:'Xiyang', last:'Feng'};\n")),(0,a.kt)("p",null,"Output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"-------------------------------\n| STRUCT_PACK(Xiyang,Feng)    |\n-------------------------------\n| {FIRST: Xiyang, LAST: Feng} |\n-------------------------------\n")),(0,a.kt)("h3",{id:"struct-extraction"},(0,a.kt)("inlineCode",{parentName:"h3"},"STRUCT")," extraction"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"WITH {first:'Xiyang', last:'Feng'} AS fullName\nRETURN fullName.first AS firstName;\n")),(0,a.kt)("p",null,"Output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"-------------\n| firstName |\n-------------\n| Xiyang    |\n-------------\n")),(0,a.kt)("p",null,"Alternatively you can use struct_extract() function"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"WITH {first:'Xiyang', last:'Feng'} AS fullName\nRETURN struct_extract(fullName, 'first') AS firstName;\n")))}d.isMDXComponent=!0}}]);