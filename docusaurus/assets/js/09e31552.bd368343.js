"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[1426],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>h});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=n.createContext({}),l=function(e){var r=n.useContext(u),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},p=function(e){var r=l(e.components);return n.createElement(u.Provider,{value:r},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},y=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(t),y=o,h=d["".concat(u,".").concat(y)]||d[y]||c[y]||a;return t?n.createElement(h,s(s({ref:r},p),{},{components:t})):n.createElement(h,s({ref:r},p))}));function h(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=y;var i={};for(var u in r)hasOwnProperty.call(r,u)&&(i[u]=r[u]);i.originalType=e,i[d]="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=t[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}y.displayName="MDXCreateElement"},859:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>y,frontMatter:()=>s,metadata:()=>u,toc:()=>p});var n=t(7462),o=(t(7294),t(3905)),a=t(5973);const s={title:"Order By",sidebar_position:6,description:"ORDER BY is the clause where you define the order in which you want the query results to be displayed or sort a set of tuples you computed up to a point in your query."},i="Database",u={unversionedId:"cypher/query-clauses/order-by",id:"cypher/query-clauses/order-by",title:"Order By",description:"ORDER BY is the clause where you define the order in which you want the query results to be displayed or sort a set of tuples you computed up to a point in your query.",source:"@site/docs/cypher/query-clauses/order-by.md",sourceDirName:"cypher/query-clauses",slug:"/cypher/query-clauses/order-by",permalink:"/docusaurus/cypher/query-clauses/order-by",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Order By",sidebar_position:6,description:"ORDER BY is the clause where you define the order in which you want the query results to be displayed or sort a set of tuples you computed up to a point in your query."},sidebar:"docSidebar",previous:{title:"Return",permalink:"/docusaurus/cypher/query-clauses/return"},next:{title:"Skip",permalink:"/docusaurus/cypher/query-clauses/skip"}},l={},p=[{value:"Basic Example",id:"basic-example",level:2},{value:"Ordering Using Multiple Properties/Expressions",id:"ordering-using-multiple-propertiesexpressions",level:2},{value:"Note on Using ORDER BY after WITH:",id:"note-on-using-order-by-after-with",level:4}],d={toc:p},c="wrapper";function y(e){let{components:r,...t}=e;return(0,o.kt)(c,(0,n.Z)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"database"},"Database"),(0,o.kt)("p",null,"We will use the database, whose schema and data import commands are given ",(0,o.kt)("a",{parentName:"p",href:"/docusaurus/cypher/query-clauses/example-database"},"here"),":"),(0,o.kt)("img",{src:a.Z,style:{width:800}}),(0,o.kt)("p",null,"You can import this database by copy pasting the commands on that page. "),(0,o.kt)("h1",{id:"order-by"},"ORDER BY"),(0,o.kt)("p",null,"Order by is the clause where you define the order in which you want the query results to be displayed\nor sort a set of tuples you computed up to a point in your query.  K\xf9zu currently supports two\nsorting orders: ",(0,o.kt)("inlineCode",{parentName:"p"},"ASC"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"DESC"),". By default if no sorting order is specified, K\xf9zu sorts\nrows in ascending order and NULLs are placed first. "),(0,o.kt)("h2",{id:"basic-example"},"Basic Example"),(0,o.kt)("p",null,"The following query returns the user's name and age ordered by user's age using the default ordering(asc order):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"MATCH (u:User)\nRETURN u.name, u.age\nORDER BY u.age;\n")),(0,o.kt)("p",null,"Output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"-------------------\n| u.name  | u.age |\n-------------------\n| Noura   | 25    |\n-------------------\n| Adam    | 30    |\n-------------------\n| Karissa | 40    |\n-------------------\n| Zhang   | 50    |\n-------------------\n")),(0,o.kt)("p",null,"View example in ",(0,o.kt)("a",{parentName:"p",href:"https://colab.research.google.com/drive/1NcR-xL4Rb7nprgbvk6N2dIP30oqyUucm#scrollTo=KQlKQCWZBWzL"},"Colab"),"."),(0,o.kt)("p",null,"Similarly, the following returns the users' names who lives in Waterloo ordered by user's age,\nbut in descending order."),(0,o.kt)("p",null,"Query:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"MATCH (u:User)-[:LivesIn]->(c:City)\nWHERE c.name = 'Waterloo'\nRETURN u.name, u.age\nORDER BY u.age DESC;\n")),(0,o.kt)("p",null,"Output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"-------------------\n| u.name  | u.age |\n-------------------\n| Karissa | 40    |\n-------------------\n| Adam    | 30    |\n-------------------\n")),(0,o.kt)("h2",{id:"ordering-using-multiple-propertiesexpressions"},"Ordering Using Multiple Properties/Expressions"),(0,o.kt)("p",null,"You can also order using multiple properties or expressions that are in scope in your query.\nThe meaning is that the first expression forms the primary order, then ties are broken\naccording to the second order, then further ties are broken according third order, etc.\nEach order can be ascending or descending independent of the others.\nFor example, the following query sorts the results of 1-hop ",(0,o.kt)("inlineCode",{parentName:"p"},"(a:User)-[:Follows]->(b:User)"),"\nqueries first by ",(0,o.kt)("inlineCode",{parentName:"p"},"b.age")," and then by ",(0,o.kt)("inlineCode",{parentName:"p"},"a.name")," both in descending order."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"MATCH (a:User)-[:Follows]->(b:User)\nRETURN b.age, a.name \nORDER BY b.age DESC, a.name DESC;\n")),(0,o.kt)("p",null,"Output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"-------------------\n| b.age | a.name  |\n-------------------\n| 50    | Karissa |\n-------------------\n| 50    | Adam    |\n-------------------\n| 40    | Adam    |\n-------------------\n| 25    | Zhang   |\n-------------------\n")),(0,o.kt)("p",null,"View example in ",(0,o.kt)("a",{parentName:"p",href:"https://colab.research.google.com/drive/1NcR-xL4Rb7nprgbvk6N2dIP30oqyUucm#scrollTo=KQlKQCWZBWzL"},"Colab"),"."),(0,o.kt)("p",null,"Noe that there is tie for b.age in first two rows and the order is\ndecided based on a.name (in descending order). If you removed the\nlast ",(0,o.kt)("inlineCode",{parentName:"p"},"DESC")," in the above query, the first two tuples in the result\nwould be swapped."),(0,o.kt)("h4",{id:"note-on-using-order-by-after-with"},"Note on Using ORDER BY after WITH:"),(0,o.kt)("p",null,"You can use ORDER BY after ",(0,o.kt)("a",{parentName:"p",href:"/docusaurus/cypher/query-clauses/with"},"WITH"),' only if you use a LIMIT and/or SKIP, so you should\nuse it to keep or remove the "top-k" or "bottom-k" of a set of intermediate tuples. The reason for this\nrestriction is that otherwise, ordering intermediate results is not useful, because if\na query has more computation to do after the WITH and ORDER BY, the operators on those following\nparts ignore the order. So if there is no LIMIT or SKIP ordering does get your query any guarantees.'))}y.isMDXComponent=!0},5973:(e,r,t)=>{t.d(r,{Z:()=>n});const n=t.p+"assets/images/running-example-db76aa393fd70d29c831f1527455440a.png"}}]);