"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[1572],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>f});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=a.createContext({}),c=function(e){var n=a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=c(e.components);return a.createElement(u.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=c(t),d=r,f=p["".concat(u,".").concat(d)]||p[d]||m[d]||o;return t?a.createElement(f,i(i({ref:n},s),{},{components:t})):a.createElement(f,i({ref:n},s))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6107:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=t(7462),r=(t(7294),t(3905));const o={title:"Load From",sidebar_position:12,description:"Direct scan over file"},i="LOAD FROM",l={unversionedId:"cypher/query-clauses/load_from",id:"cypher/query-clauses/load_from",title:"Load From",description:"Direct scan over file",source:"@site/docs/cypher/query-clauses/load_from.md",sourceDirName:"cypher/query-clauses",slug:"/cypher/query-clauses/load_from",permalink:"/docusaurus/cypher/query-clauses/load_from",draft:!1,tags:[],version:"current",sidebarPosition:12,frontMatter:{title:"Load From",sidebar_position:12,description:"Direct scan over file"},sidebar:"docSidebar",previous:{title:"Call",permalink:"/docusaurus/cypher/query-clauses/call"},next:{title:"Copy",permalink:"/docusaurus/cypher/copy"}},u={},c=[{value:"Schema Information",id:"schema-information",level:2},{value:"CSV Detection",id:"csv-detection",level:3},{value:"Parquet Detection",id:"parquet-detection",level:3},{value:"Manually Speficy",id:"manually-speficy",level:3},{value:"Notes",id:"notes",level:4}],s={toc:c},p="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"load-from"},"LOAD FROM"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"LOAD FROM")," clause performs a direct scan over input file without loading it into the database. This can be useful when performing quick testing over a small sample of the file. ",(0,r.kt)("inlineCode",{parentName:"p"},"LOAD FROM")," can be used in the exact same way as ",(0,r.kt)("inlineCode",{parentName:"p"},"MATCH"),", meaning it can be followed by arbitrary clauses like ",(0,r.kt)("inlineCode",{parentName:"p"},"WHERE, RETURN, CREATE, ..."),". Some example usage are as following."),(0,r.kt)("p",null,"E.g. Filtering and aggregating over input file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'LOAD FROM "user.csv" (header = true)\nWHERE to_int64(age) > 25 \nRETURN COUNT(*);\n----------------\n| COUNT_STAR() |\n----------------\n| 3            |\n----------------\n')),(0,r.kt)("p",null,"E.g. Create nodes from input file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'LOAD FROM "user.csv" (header = true)\nCREATE (:User {name: name, age:to_int64(age)});\n\nMATCH (u:User) RETURN u;\n----------------------------------------------------\n| u                                                |\n----------------------------------------------------\n| {_ID: 0:0, _LABEL: User, name: Adam, age: 30}    |\n----------------------------------------------------\n| {_ID: 0:1, _LABEL: User, name: Karissa, age: 40} |\n----------------------------------------------------\n| {_ID: 0:2, _LABEL: User, name: Zhang, age: 50}   |\n----------------------------------------------------\n| {_ID: 0:3, _LABEL: User, name: Noura, age: 25}   |\n----------------------------------------------------\n')),(0,r.kt)("h2",{id:"schema-information"},"Schema Information"),(0,r.kt)("h3",{id:"csv-detection"},"CSV Detection"),(0,r.kt)("p",null,"When loading from a CSV file, user can specify the same set of configuration as ",(0,r.kt)("a",{parentName:"p",href:"/docusaurus/data-import/csv-import"},"importing from CSV through COPY"),"."),(0,r.kt)("p",null,"If no header information is available, K\xf9zu will use the default cofiguration and parse each column as ",(0,r.kt)("inlineCode",{parentName:"p"},"STRING")," type with name ",(0,r.kt)("inlineCode",{parentName:"p"},"column0, column1, ..."),". E.g."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'LOAD FROM "test.csv" RETURN *;\n-----------\n| column0 |\n-----------\n| a       |\n-----------\n| b       |\n-----------\n')),(0,r.kt)("p",null,"If header information is available in the file, K\xf9zu will parse the header and use data types and names as specified in the header. E.g."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'LOAD FROM "user.csv" (header = true) RETURN *;\n-----------------\n| name    | age |\n-----------------\n| Adam    | 30  |\n-----------------\n| Karissa | 40  |\n-----------------\n| Zhang   | 50  |\n-----------------\n| Noura   | 25  |\n-----------------\n')),(0,r.kt)("h3",{id:"parquet-detection"},"Parquet Detection"),(0,r.kt)("p",null,"Since parquet file contains schema, K\xf9zu will always use parquet schema information. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'LOAD FROM "user.parquet" RETURN *;\n----------------\n| f0      | f1 |\n----------------\n| Adam    | 30 |\n----------------\n| Karissa | 40 |\n----------------\n| Zhang   | 50 |\n----------------\n| Noura   | 25 |\n----------------\n')),(0,r.kt)("h3",{id:"manually-speficy"},"Manually Speficy"),(0,r.kt)("p",null,"To specify the schema information, user can use ",(0,r.kt)("inlineCode",{parentName:"p"},"LOAD WITH HEADERS (<name> <dataType>, ...) FROM ...")),(0,r.kt)("p",null,"E.g. the following query will bind first column to ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," with STRING type and second column to ",(0,r.kt)("inlineCode",{parentName:"p"},"age")," with INT64 type."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"LOAD WITH HEADERS (name STRING, age INT64) FROM \"user.csv\" (header = true)\nWHERE name =~ 'Adam*'\nRETURN name, age;\n--------------\n| name | age |\n--------------\n| Adam | 30  |\n--------------\n")),(0,r.kt)("h4",{id:"notes"},"Notes"),(0,r.kt)("p",null,"If header is specified manually"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"K\xf9zu will throw an exception if given does not match number of columns in the file."),(0,r.kt)("li",{parentName:"ul"},"K\xf9zu will always try to cast to the type specified header. An exception will be thrown if cast fails.")))}m.isMDXComponent=!0}}]);