"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[9793],{3905:(e,t,r)=>{r.d(t,{Zo:()=>o,kt:()=>_});var u=r(7294);function l(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(e);t&&(u=u.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,u)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){l(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,u,l=function(e,t){if(null==e)return{};var r,u,l={},n=Object.keys(e);for(u=0;u<n.length;u++)r=n[u],t.indexOf(r)>=0||(l[r]=e[r]);return l}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(u=0;u<n.length;u++)r=n[u],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(l[r]=e[r])}return l}var i=u.createContext({}),p=function(e){var t=u.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},o=function(e){var t=p(e.components);return u.createElement(i.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return u.createElement(u.Fragment,{},t)}},k=u.forwardRef((function(e,t){var r=e.components,l=e.mdxType,n=e.originalType,i=e.parentName,o=s(e,["components","mdxType","originalType","parentName"]),m=p(r),k=l,_=m["".concat(i,".").concat(k)]||m[k]||c[k]||n;return r?u.createElement(_,a(a({ref:t},o),{},{components:r})):u.createElement(_,a({ref:t},o))}));function _(e,t){var r=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var n=r.length,a=new Array(n);a[0]=k;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[m]="string"==typeof e?e:l,a[1]=s;for(var p=2;p<n;p++)a[p]=r[p];return u.createElement.apply(null,a)}return u.createElement.apply(null,r)}k.displayName="MDXCreateElement"},8432:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>c,frontMatter:()=>n,metadata:()=>s,toc:()=>p});var u=r(7462),l=(r(7294),r(3905));const n={title:"Query Result",sidebar_position:2},a=void 0,s={unversionedId:"client-apis/c-api/query_result",id:"client-apis/c-api/query_result",title:"Query Result",description:"class kuzuqueryresult",source:"@site/docs/client-apis/c-api/query_result.md",sourceDirName:"client-apis/c-api",slug:"/client-apis/c-api/query_result",permalink:"/docusaurus/client-apis/c-api/query_result",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/client-apis/c-api/query_result.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Query Result",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Connection",permalink:"/docusaurus/client-apis/c-api/connection"},next:{title:"Tuple",permalink:"/docusaurus/client-apis/c-api/tuple"}},i={},p=[{value:"class kuzu_query_result",id:"class-kuzu_query_result",level:2},{value:"class kuzu_query_summary",id:"class-kuzu_query_summary",level:2}],o={toc:p},m="wrapper";function c(e){let{components:t,...r}=e;return(0,l.kt)(m,(0,u.Z)({},o,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"class-kuzu_query_result"},"class kuzu_query_result"),(0,l.kt)("p",null,"kuzu_query_result stores the result of a query.  "),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"class-kuzu_query_summary"},"class kuzu_query_summary"),(0,l.kt)("p",null,"kuzu_query_summary stores the execution time, plan, compiling time and query options of a query.  "),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API void kuzu_query_result_destroy (kuzu_query_result * query_result)\n")),(0,l.kt)("p",null,"Destroys the given query result instance. "),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"query_result")," The query result instance to destroy. ")),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API kuzu_logical_type* kuzu_query_result_get_column_data_type (kuzu_query_result * query_result, uint64_t index)\n")),(0,l.kt)("p",null,"Returns the data type of the column at the given index. "),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"query_result")," The query result instance to return. "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"index")," The index of the column to return data type. ")),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API char* kuzu_query_result_get_column_name (kuzu_query_result * query_result, uint64_t index)\n")),(0,l.kt)("p",null,"Returns the column name at the given index. "),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"query_result")," The query result instance to return. "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"index")," The index of the column to return name. ")),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API char* kuzu_query_result_get_error_message (kuzu_query_result * query_result)\n")),(0,l.kt)("p",null,"Returns the error message if the query is failed. "),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"query_result")," The query result instance to check and return error message. ")),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API kuzu_flat_tuple* kuzu_query_result_get_next (kuzu_query_result * query_result)\n")),(0,l.kt)("p",null,"Returns the next tuple in the query result. Throws an exception if there is no more tuple. "),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"query_result")," The query result instance to return. ")),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API uint64_t kuzu_query_result_get_num_columns (kuzu_query_result * query_result)\n")),(0,l.kt)("p",null,"Returns the number of columns in the query result. "),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"query_result")," The query result instance to return. ")),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API uint64_t kuzu_query_result_get_num_tuples (kuzu_query_result * query_result)\n")),(0,l.kt)("p",null,"Returns the number of tuples in the query result. "),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"query_result")," The query result instance to return. ")),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API kuzu_query_summary* kuzu_query_result_get_query_summary (kuzu_query_result * query_result)\n")),(0,l.kt)("p",null,"Returns the query summary of the query result. "),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"query_result")," The query result instance to return. ")),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API bool kuzu_query_result_has_next (kuzu_query_result * query_result)\n")),(0,l.kt)("p",null,"Returns true if we have not consumed all tuples in the query result, false otherwise. "),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"query_result")," The query result instance to check. ")),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API bool kuzu_query_result_is_success (kuzu_query_result * query_result)\n")),(0,l.kt)("p",null,"Returns true if the query is executed successful, false otherwise. "),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"query_result")," The query result instance to check. ")),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API void kuzu_query_result_reset_iterator (kuzu_query_result * query_result)\n")),(0,l.kt)("p",null,"Resets the iterator of the query result to the beginning of the query result. "),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"query_result")," The query result instance to reset iterator. ")),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API char* kuzu_query_result_to_string (kuzu_query_result * query_result)\n")),(0,l.kt)("p",null,"Returns the query result as a string. "),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"query_result")," The query result instance to return. ")),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API void kuzu_query_result_write_to_csv (kuzu_query_result * query_result, const char * file_path, char delimiter, char escape_char, char new_line)\n")),(0,l.kt)("p",null,"Writes the query result to the given file path as CSV. "),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"query_result")," The query result instance to write. "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"file_path")," The file path to write the query result. "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"delimiter")," The delimiter character to use when writing csv file. "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"escape_char")," The escape character to use when writing csv file. "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"new_line")," The new line character to use when writing csv file. ")),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API void kuzu_query_summary_destroy (kuzu_query_summary * query_summary)\n")),(0,l.kt)("p",null,"Destroys the given query summary. "),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"query_summary")," The query summary to destroy. ")),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API double kuzu_query_summary_get_compiling_time (kuzu_query_summary * query_summary)\n")),(0,l.kt)("p",null,"Returns the compilation time of the given query summary. "),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"query_summary")," The query summary to get compilation time. ")),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API double kuzu_query_summary_get_execution_time (kuzu_query_summary * query_summary)\n")),(0,l.kt)("p",null,"Returns the execution time of the given query summary. "),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"query_summary")," The query summary to get execution time. ")),(0,l.kt)("hr",null))}c.isMDXComponent=!0}}]);