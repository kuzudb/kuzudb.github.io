"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[5458],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):u(u({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=l(n),m=a,y=p["".concat(i,".").concat(m)]||p[m]||d[m]||o;return n?r.createElement(y,u(u({ref:t},c),{},{components:n})):r.createElement(y,u({ref:t},c))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,u=new Array(o);u[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[p]="string"==typeof e?e:a,u[1]=s;for(var l=2;l<o;l++)u[l]=n[l];return r.createElement.apply(null,u)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},955:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>u,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={title:"Rust",sidebar_position:6},u=void 0,s={unversionedId:"getting-started/rust",id:"getting-started/rust",title:"Rust",description:"The rust API can be used by adding the kuzu crate to your dependencies in Cargo.toml:",source:"@site/docs/getting-started/rust.md",sourceDirName:"getting-started",slug:"/getting-started/rust",permalink:"/docusaurus/getting-started/rust",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Rust",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Node.js",permalink:"/docusaurus/getting-started/nodejs"},next:{title:"Java",permalink:"/docusaurus/getting-started/java"}},i={},l=[],c={toc:l},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The rust API can be used by adding the kuzu crate to your dependencies in ",(0,a.kt)("inlineCode",{parentName:"p"},"Cargo.toml"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\nkuzu = "0.0.9"\n')),(0,a.kt)("p",null,"Below is an example to get you started. Full documentation can be found ",(0,a.kt)("a",{parentName:"p",href:"https://docs.rs/kuzu/latest/kuzu/"},"here"),"."),(0,a.kt)("p",null,"The kuzu crate will by default build and statically link kuzu's C++ library from source. You can also link against the dynamic release libraries (see ",(0,a.kt)("a",{parentName:"p",href:"https://docs.rs/kuzu/latest/kuzu/#building"},"the docs")," for details)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'use kuzu::{Database, Connection, Error, SystemConfig};\n\nfn main() -> Result<(), Error> {\n    // Create an empty database and connect to it\n    let db = Database::new("./test", SystemConfig::default())?;\n    let conn = Connection::new(&db)?;\n\n    // Create the tables\n    conn.query(\n        "CREATE NODE TABLE User(name STRING, age INT64, PRIMARY KEY (name))"\n    )?;\n    conn.query(\n        "CREATE NODE TABLE City(name STRING, population INT64, PRIMARY KEY (name))"\n    )?;\n    conn.query("CREATE REL TABLE Follows(FROM User TO User, since INT64)")?;\n    conn.query("CREATE REL TABLE LivesIn(FROM User TO City)")?;\n\n    // Load the data\n    conn.query("COPY User FROM \'user.csv\'")?;\n    conn.query("COPY City FROM \'city.csv\'")?;\n    conn.query("COPY Follows FROM \'follows.csv\'")?;\n    conn.query("COPY LivesIn FROM \'lives-in.csv\'")?;\n\n    let query_result = conn.query("MATCH (u:User) RETURN u.name, u.age;")?;\n\n    // Print the rows\n    for row in query_result {\n        println!("Name: {}, Age: {}", row[0], row[1]);\n    }\n    Ok(())\n}\n')),(0,a.kt)("p",null,"Output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Name: Adam, Age: 30\nName: Karissa, Age: 40\nName: Zhang, Age: 50\nName: Noura, Age: 25\n")))}d.isMDXComponent=!0}}]);