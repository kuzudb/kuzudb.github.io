"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[8314],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(n),y=a,m=d["".concat(p,".").concat(y)]||d[y]||u[y]||o;return n?r.createElement(m,i(i({ref:t},s),{},{components:n})):r.createElement(m,i({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=y;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},6120:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={title:"Node",sidebar_position:5},i="Node",l={unversionedId:"cypher/data-types/node",id:"cypher/data-types/node",title:"Node",description:"NODE is a logical type. Internally, NODE is processed as STRUCT type. A NODE always contains an internal ID field with key ID and a label field with key LABEL. The rest fields are node properties.",source:"@site/docs/cypher/data-types/node.md",sourceDirName:"cypher/data-types",slug:"/cypher/data-types/node",permalink:"/docusaurus/cypher/data-types/node",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Node",sidebar_position:5},sidebar:"docSidebar",previous:{title:"List",permalink:"/docusaurus/cypher/data-types/list"},next:{title:"Null Value",permalink:"/docusaurus/cypher/data-types/null"}},p={},c=[{value:"Return <code>NODE</code> column",id:"return-node-column",level:3}],s={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"node"},"Node"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"NODE")," is a logical type. Internally, ",(0,a.kt)("inlineCode",{parentName:"p"},"NODE")," is processed as ",(0,a.kt)("inlineCode",{parentName:"p"},"STRUCT")," type. A ",(0,a.kt)("inlineCode",{parentName:"p"},"NODE")," always contains an internal ID field with key ",(0,a.kt)("inlineCode",{parentName:"p"},"_ID")," and a label field with key ",(0,a.kt)("inlineCode",{parentName:"p"},"_LABEL"),". The rest fields are node properties."),(0,a.kt)("h3",{id:"return-node-column"},"Return ",(0,a.kt)("inlineCode",{parentName:"h3"},"NODE")," column"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"MATCH (a:User)\nRETURN a;\n")),(0,a.kt)("p",null,"Output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"----------------------------------------------------\n| a                                                |\n----------------------------------------------------\n| {_ID: 0:0, _LABEL: User, name: Adam, age: 30}    |\n----------------------------------------------------\n| {_ID: 0:1, _LABEL: User, name: Karissa, age: 40} |\n----------------------------------------------------\n| {_ID: 0:2, _LABEL: User, name: Zhang, age: 50}   |\n----------------------------------------------------\n| {_ID: 0:3, _LABEL: User, name: Noura, age: 25}   |\n----------------------------------------------------\n")))}u.isMDXComponent=!0}}]);