"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[7812],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),u=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(i.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),m=a,y=p["".concat(i,".").concat(m)]||p[m]||d[m]||o;return n?r.createElement(y,l(l({ref:t},c),{},{components:n})):r.createElement(y,l({ref:t},c))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[p]="string"==typeof e?e:a,l[1]=s;for(var u=2;u<o;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2541:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var r=n(7462),a=(n(7294),n(3905)),o=n(5973);const l={title:"Unwind",sidebar_position:10,description:'UNWIND allows you to "unnest" a list L that has k elements in it, into a table T with k element.'},s="Database",i={unversionedId:"cypher/query-clauses/unwind",id:"cypher/query-clauses/unwind",title:"Unwind",description:'UNWIND allows you to "unnest" a list L that has k elements in it, into a table T with k element.',source:"@site/docs/cypher/query-clauses/unwind.md",sourceDirName:"cypher/query-clauses",slug:"/cypher/query-clauses/unwind",permalink:"/docusaurus/cypher/query-clauses/unwind",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cypher/query-clauses/unwind.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{title:"Unwind",sidebar_position:10,description:'UNWIND allows you to "unnest" a list L that has k elements in it, into a table T with k element.'},sidebar:"tutorialSidebar",previous:{title:"Union",permalink:"/docusaurus/cypher/query-clauses/union"},next:{title:"Data Manipulation",permalink:"/docusaurus/cypher/data-manipulation-clauses/"}},u={},c=[],p={toc:c},d="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"database"},"Database"),(0,a.kt)("p",null,"We will use the database, whose schema and data import commands are given ",(0,a.kt)("a",{parentName:"p",href:"/docusaurus/cypher/query-clauses/example-database"},"here"),":"),(0,a.kt)("img",{src:o.Z,style:{width:800}}),(0,a.kt)("p",null,"You can import this database by copy pasting the commands on that page. "),(0,a.kt)("h1",{id:"unwind"},"UNWIND"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"UNWIND"),' allows you to "unnest" a list L that has k elements in it,\ninto a table T with k element.\nWhen using UNWIND, you need to specify an alias to refer to the elements\nof the unnested list, i.e., T.'),(0,a.kt)("p",null,'For example, the following unnests a literal "list of strings" into multiple rows\nand return them:'),(0,a.kt)("p",null,"Query:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'UNWIND ["Amy", "Bob", "Carol"] AS x\nRETURN x;\n')),(0,a.kt)("p",null,"Output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"---------\n| x     |\n---------\n| Amy   |\n---------\n| Bob   |\n---------\n| Carol |\n---------\n")),(0,a.kt)("p",null,"View example in ",(0,a.kt)("a",{parentName:"p",href:"https://colab.research.google.com/drive/1NcR-xL4Rb7nprgbvk6N2dIP30oqyUucm#scrollTo=jDbutdTaDZsB"},"Colab"),"."),(0,a.kt)("p",null,"If the unwinded list L contained as elements other lists,\nthen the output would be elements with one fewer nesting. For example, if L was a list of\nlist of strings, after unwinding, you'd get a table of list of strings. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'UNWIND [["Amy"], ["Bob", "Carol"]] AS x\nRETURN x;\n')),(0,a.kt)("p",null,"Output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"---------------\n| x           |\n---------------\n| [Amy]       |\n---------------\n| [Bob,Carol] |\n---------------\n")),(0,a.kt)("p",null,"View example in ",(0,a.kt)("a",{parentName:"p",href:"https://colab.research.google.com/drive/1NcR-xL4Rb7nprgbvk6N2dIP30oqyUucm#scrollTo=jDbutdTaDZsB"},"Colab"),"."))}m.isMDXComponent=!0},5973:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/running-example-db76aa393fd70d29c831f1527455440a.png"}}]);