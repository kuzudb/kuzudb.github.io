"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[5768],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),m=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=m(e.components);return a.createElement(p.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),s=m(n),d=r,k=s["".concat(p,".").concat(d)]||s[d]||u[d]||o;return n?a.createElement(k,l(l({ref:t},c),{},{components:n})):a.createElement(k,l({ref:t},c))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[s]="string"==typeof e?e:r,l[1]=i;for(var m=2;m<o;m++)l[m]=n[m];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4219:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>m});var a=n(7462),r=(n(7294),n(3905));const o={},l="Connection",i={unversionedId:"client-apis/nodejs-api/connection",id:"client-apis/nodejs-api/connection",title:"Connection",description:"- Connection",source:"@site/docs/client-apis/nodejs-api/connection.md",sourceDirName:"client-apis/nodejs-api",slug:"/client-apis/nodejs-api/connection",permalink:"/docusaurus/client-apis/nodejs-api/connection",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/client-apis/nodejs-api/connection.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Node.js API",permalink:"/docusaurus/client-apis/nodejs-api/"},next:{title:"Database",permalink:"/docusaurus/client-apis/nodejs-api/database"}},p={},m=[{value:"new Connection(database)",id:"new-connectiondatabase",level:3},{value:"connection.init()",id:"connectioninit",level:3},{value:"connection.execute(preparedStatement, params) \u21d2 <code>Promise.&lt;kuzu.QueryResult&gt;</code>",id:"connectionexecutepreparedstatement-params--promisekuzuqueryresult",level:3},{value:"connection.prepare(statement) \u21d2 <code>Promise.&lt;kuzu.PreparedStatement&gt;</code>",id:"connectionpreparestatement--promisekuzupreparedstatement",level:3},{value:"connection.query(statement) \u21d2 <code>Promise.&lt;kuzu.QueryResult&gt;</code>",id:"connectionquerystatement--promisekuzuqueryresult",level:3},{value:"connection.setMaxNumThreadForExec(numThreads)",id:"connectionsetmaxnumthreadforexecnumthreads",level:3},{value:"connection.getNodeTableNames() \u21d2 <code>Promise.&lt;Array.&lt;String&gt;&gt;</code>",id:"connectiongetnodetablenames--promisearraystring",level:3},{value:"connection.getRelTableNames() \u21d2 <code>Promise.&lt;Array.&lt;String&gt;&gt;</code>",id:"connectiongetreltablenames--promisearraystring",level:3},{value:"connection.getNodePropertyNames(tableName) \u21d2 <code>Promise.&lt;Array.&lt;Object&gt;&gt;</code>",id:"connectiongetnodepropertynamestablename--promisearrayobject",level:3},{value:"connection.getRelPropertyNames(tableName) \u21d2 <code>Promise.&lt;Object&gt;</code>",id:"connectiongetrelpropertynamestablename--promiseobject",level:3}],c={toc:m},s="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(s,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"connection"},"Connection"),(0,r.kt)("a",{name:"#Connection"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#connection"},"Connection"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#new-connectiondatabase"},"new Connection(database)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#connectioninit"},"connection.init()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#connectionexecutepreparedstatement-params--promisekuzuqueryresult"},"connection.execute(preparedStatement, params) \u21d2 Promise.<kuzu.QueryResult",">")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#connectionpreparestatement--promisekuzupreparedstatement"},"connection.prepare(statement) \u21d2 Promise.<kuzu.PreparedStatement",">")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#connectionquerystatement--promisekuzuqueryresult"},"connection.query(statement) \u21d2 Promise.<kuzu.QueryResult",">")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#connectionsetmaxnumthreadforexecnumthreads"},"connection.setMaxNumThreadForExec(numThreads)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#connectiongetnodetablenames--promisearraystring"},"connection.getNodeTableNames() \u21d2 Promise.<Array.<String",">",">")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#connectiongetreltablenames--promisearraystring"},"connection.getRelTableNames() \u21d2 Promise.<Array.<String",">",">")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#connectiongetnodepropertynamestablename--promisearrayobject"},"connection.getNodePropertyNames(tableName) \u21d2 Promise.<Array.<Object",">",">")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#connectiongetrelpropertynamestablename--promiseobject"},"connection.getRelPropertyNames(tableName) \u21d2 Promise.<Object",">"))))),(0,r.kt)("a",{name:"new_Connection_new"}),(0,r.kt)("h3",{id:"new-connectiondatabase"},"new Connection(database)"),(0,r.kt)("p",null,"Initialize a new Connection object. Note that the initialization is done\nlazily, so the connection is not initialized until the first query is\nexecuted. To initialize the connection immediately, call the ",(0,r.kt)("inlineCode",{parentName:"p"},"init()"),"\nfunction on the returned object."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Param"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"database"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("code",null,"kuzu.Database")),(0,r.kt)("td",{parentName:"tr",align:null},"the database object to connect to.")))),(0,r.kt)("a",{name:"Connection+init"}),(0,r.kt)("h3",{id:"connectioninit"},"connection.init()"),(0,r.kt)("p",null,"Initialize the connection. Calling this function is optional, as the\nconnection is initialized automatically when the first query is executed."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Kind"),": instance method of ",(0,r.kt)("a",{parentName:"p",href:"#Connection"},(0,r.kt)("code",null,"Connection")),"  "),(0,r.kt)("a",{name:"Connection+execute"}),(0,r.kt)("h3",{id:"connectionexecutepreparedstatement-params--promisekuzuqueryresult"},"connection.execute(preparedStatement, params) \u21d2 ",(0,r.kt)("code",null,"Promise.","<","kuzu.QueryResult",">")),(0,r.kt)("p",null,"Execute a prepared statement with the given parameters."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Kind"),": instance method of ",(0,r.kt)("a",{parentName:"p",href:"#Connection"},(0,r.kt)("code",null,"Connection")),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"Returns"),": ",(0,r.kt)("code",null,"Promise.","<","kuzu.QueryResult",">")," - a promise that resolves to the query result. The promise is rejected if there is an error.  "),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Param"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"preparedStatement"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("code",null,"kuzu.PreparedStatement")),(0,r.kt)("td",{parentName:"tr",align:null},"the prepared statement to execute.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"params"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("code",null,"Object")),(0,r.kt)("td",{parentName:"tr",align:null},"a plain object mapping parameter names to values.")))),(0,r.kt)("a",{name:"Connection+prepare"}),(0,r.kt)("h3",{id:"connectionpreparestatement--promisekuzupreparedstatement"},"connection.prepare(statement) \u21d2 ",(0,r.kt)("code",null,"Promise.","<","kuzu.PreparedStatement",">")),(0,r.kt)("p",null,"Prepare a statement for execution."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Kind"),": instance method of ",(0,r.kt)("a",{parentName:"p",href:"#Connection"},(0,r.kt)("code",null,"Connection")),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"Returns"),": ",(0,r.kt)("code",null,"Promise.","<","kuzu.PreparedStatement",">")," - a promise that resolves to the prepared statement. The promise is rejected if there is an error.  "),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Param"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"statement"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("code",null,"String")),(0,r.kt)("td",{parentName:"tr",align:null},"the statement to prepare.")))),(0,r.kt)("a",{name:"Connection+query"}),(0,r.kt)("h3",{id:"connectionquerystatement--promisekuzuqueryresult"},"connection.query(statement) \u21d2 ",(0,r.kt)("code",null,"Promise.","<","kuzu.QueryResult",">")),(0,r.kt)("p",null,"Execute a query."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Kind"),": instance method of ",(0,r.kt)("a",{parentName:"p",href:"#Connection"},(0,r.kt)("code",null,"Connection")),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"Returns"),": ",(0,r.kt)("code",null,"Promise.","<","kuzu.QueryResult",">")," - a promise that resolves to the query result. The promise is rejected if there is an error.  "),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Param"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"statement"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("code",null,"String")),(0,r.kt)("td",{parentName:"tr",align:null},"the statement to execute.")))),(0,r.kt)("a",{name:"Connection+setMaxNumThreadForExec"}),(0,r.kt)("h3",{id:"connectionsetmaxnumthreadforexecnumthreads"},"connection.setMaxNumThreadForExec(numThreads)"),(0,r.kt)("p",null,"Set the maximum number of threads to use for query execution."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Kind"),": instance method of ",(0,r.kt)("a",{parentName:"p",href:"#Connection"},(0,r.kt)("code",null,"Connection")),"  "),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Param"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"numThreads"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("code",null,"Number")),(0,r.kt)("td",{parentName:"tr",align:null},"the maximum number of threads to use for query execution.")))),(0,r.kt)("a",{name:"Connection+getNodeTableNames"}),(0,r.kt)("h3",{id:"connectiongetnodetablenames--promisearraystring"},"connection.getNodeTableNames() \u21d2 ",(0,r.kt)("code",null,"Promise.","<","Array.","<","String",">",">")),(0,r.kt)("p",null,"Get the names of all node tables in the database."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Kind"),": instance method of ",(0,r.kt)("a",{parentName:"p",href:"#Connection"},(0,r.kt)("code",null,"Connection")),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"Returns"),": ",(0,r.kt)("code",null,"Promise.","<","Array.","<","String",">",">")," - a promise that resolves to an array of table names. The promise is rejected if there is an error.  "),(0,r.kt)("a",{name:"Connection+getRelTableNames"}),(0,r.kt)("h3",{id:"connectiongetreltablenames--promisearraystring"},"connection.getRelTableNames() \u21d2 ",(0,r.kt)("code",null,"Promise.","<","Array.","<","String",">",">")),(0,r.kt)("p",null,"Get the names of all relationship tables in the database."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Kind"),": instance method of ",(0,r.kt)("a",{parentName:"p",href:"#Connection"},(0,r.kt)("code",null,"Connection")),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"Returns"),": ",(0,r.kt)("code",null,"Promise.","<","Array.","<","String",">",">")," - a promise that resolves to an array of table names. The promise is rejected if there is an error.  "),(0,r.kt)("a",{name:"Connection+getNodePropertyNames"}),(0,r.kt)("h3",{id:"connectiongetnodepropertynamestablename--promisearrayobject"},"connection.getNodePropertyNames(tableName) \u21d2 ",(0,r.kt)("code",null,"Promise.","<","Array.","<","Object",">",">")),(0,r.kt)("p",null,"Get the names and types of all properties in the given node table. Each\nproperty is represented as an object with the following properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name"),": the name of the property."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type"),": the type of the property."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"isPrimaryKey"),": whether the property is a primary key.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Kind"),": instance method of ",(0,r.kt)("a",{parentName:"p",href:"#Connection"},(0,r.kt)("code",null,"Connection")),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"Returns"),": ",(0,r.kt)("code",null,"Promise.","<","Array.","<","Object",">",">")," - a promise that resolves to an array of property names. The promise is rejected if there is an error.  "),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Param"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"tableName"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("code",null,"String")),(0,r.kt)("td",{parentName:"tr",align:null},"the name of the node table.")))),(0,r.kt)("a",{name:"Connection+getRelPropertyNames"}),(0,r.kt)("h3",{id:"connectiongetrelpropertynamestablename--promiseobject"},"connection.getRelPropertyNames(tableName) \u21d2 ",(0,r.kt)("code",null,"Promise.","<","Object",">")),(0,r.kt)("p",null,"Get the names and types of all properties in the given rel table.\nThe result is an object with the following properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name"),": the name of the rel table."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"src"),": the name of the source node table."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dst"),": the name of the destination node table."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"props"),": an array of property names and types.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Kind"),": instance method of ",(0,r.kt)("a",{parentName:"p",href:"#Connection"},(0,r.kt)("code",null,"Connection")),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"Returns"),": ",(0,r.kt)("code",null,"Promise.","<","Object",">")," - a promise that resolves to an object representing the properties of the rel table. The promise is rejected if there is an error.  "),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Param"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"tableName"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("code",null,"String")),(0,r.kt)("td",{parentName:"tr",align:null},"the name of the rel table.")))))}u.isMDXComponent=!0}}]);