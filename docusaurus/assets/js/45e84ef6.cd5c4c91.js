"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[7584],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=i,f=u["".concat(p,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:i,a[1]=l;for(var s=2;s<o;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4413:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(7462),i=(n(7294),n(3905));const o={title:"Execution",sidebar_position:3},a="Execution",l={unversionedId:"development/database-internal/execution",id:"development/database-internal/execution",title:"Execution",description:"Pipeline",source:"@site/docs/development/database-internal/execution.md",sourceDirName:"development/database-internal",slug:"/development/database-internal/execution",permalink:"/docusaurus/development/database-internal/execution",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Execution",sidebar_position:3},sidebar:"docSidebar",previous:{title:"Vector",permalink:"/docusaurus/development/database-internal/vector"},next:{title:"Overview",permalink:"/docusaurus/extensions/"}},p={},s=[{value:"Pipeline",id:"pipeline",level:2},{value:"Pipeline decompistion",id:"pipeline-decompistion",level:4},{value:"Morsel-driven parallelism",id:"morsel-driven-parallelism",level:4}],c={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"execution"},"Execution"),(0,i.kt)("h2",{id:"pipeline"},"Pipeline"),(0,i.kt)("p",null,"We decompose ",(0,i.kt)("inlineCode",{parentName:"p"},"PhysicalPlan")," into ",(0,i.kt)("inlineCode",{parentName:"p"},"Pipeline"),"s. A pipeline is a linear sequence of physical operators. The leaf opeartor of a pipeline is a source operator that scans from disk, storage or the output of other pipelines. The last operator of a pipeline is a sink operator that accumulates the intermediate results of the pipeline. Within a pipeline, data flows between operators without materialization until sink."),(0,i.kt)("h4",{id:"pipeline-decompistion"},"Pipeline decompistion"),(0,i.kt)("p",null,"Given a physical plan, we decompose into pipelines when we encounter a sink operator. A sink operator is operators that must exhaust its input in order to process correctly, e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"HASH_JOIN_BUILD"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"AGGREGATE"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"ORDER BY"),", .... Pipelines have dependencies meaning one pipeline may depends on the output of another pipeline, e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"HASH_JOIN_PROBE")," pipeline must depend on a ",(0,i.kt)("inlineCode",{parentName:"p"},"HASH_JOIN_BUILD")," pipeline."),(0,i.kt)("h4",{id:"morsel-driven-parallelism"},"Morsel-driven parallelism"),(0,i.kt)("p",null,"A pipeline can be executed with multiple threads. The granularity of multi-threading is controlled by its source operator who is responsible of dispatching source data to different threads' pipeline. E.g. to parallel scan a csv file, the source operator will first count number of lines in the file and dispatch different lines to different threads."))}d.isMDXComponent=!0}}]);