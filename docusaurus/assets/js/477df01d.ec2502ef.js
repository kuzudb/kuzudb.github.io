"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[8929],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,h=d["".concat(s,".").concat(m)]||d[m]||f[m]||i;return n?r.createElement(h,l(l({ref:t},u),{},{components:n})):r.createElement(h,l({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9015:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>f,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={title:"RDF Data Import",sidebar_position:3},l="Overview",o={unversionedId:"rdf-graphs/rdf-import",id:"rdf-graphs/rdf-import",title:"RDF Data Import",description:"K\xf9zu currently supports bulk importing triples into RDFGraphs through RDF Turtle (ttl)",source:"@site/docs/rdf-graphs/rdf-import.md",sourceDirName:"rdf-graphs",slug:"/rdf-graphs/rdf-import",permalink:"/docusaurus/rdf-graphs/rdf-import",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"RDF Data Import",sidebar_position:3},sidebar:"docSidebar",previous:{title:"RDFGraphs Overview & Cypher Clauses",permalink:"/docusaurus/rdf-graphs/rdfgraphs-overview"},next:{title:"Preloaded RDFGraphs",permalink:"/docusaurus/rdf-graphs/rdfgraphs-repo"}},s={},p=[{value:"RDF Data Import From Turtle Files Using COPY FROM",id:"rdf-data-import-from-turtle-files-using-copy-from",level:2},{value:"Turtle Configuration",id:"turtle-configuration",level:3},{value:"Importing Multiple Turtle Files",id:"importing-multiple-turtle-files",level:3},{value:"Full IRIs, Prefixes, and Relative IRIs",id:"full-iris-prefixes-and-relative-iris",level:3},{value:"Behavior During Importing Malformed Triples in Turtle Files",id:"behavior-during-importing-malformed-triples-in-turtle-files",level:3},{value:"Blank Nodes",id:"blank-nodes",level:3},{value:"Language Tag for Literals and Size Limitation",id:"language-tag-for-literals-and-size-limitation",level:3},{value:"Converting Other RDF Files to Turtle and Validating Turtle Files",id:"converting-other-rdf-files-to-turtle-and-validating-turtle-files",level:3}],u={toc:p},d="wrapper";function f(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"overview"},"Overview"),(0,a.kt)("p",null,"K\xf9zu currently supports bulk importing triples into RDFGraphs through ",(0,a.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/turtle/"},"RDF Turtle (ttl)"),"\nand ",(0,a.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/n-triples/"},"N-Triples (.nt)")," files, which are a subset of Turtle files. Specifically,\nN-Triples files are uncompressed versions of Turtle files where each triple is written out as a separate line\nand without any prefix or base abbreviations in the IRIs. Triples can also be ingested through ",(0,a.kt)("inlineCode",{parentName:"p"},"CREATE")," statements. See the\nsection on CREATE and DELETE statements in the ",(0,a.kt)("a",{parentName:"p",href:"./rdfgraphs-overview#modifying-rdfgraphs-using-create-set-merge-and-delete"},"RDFGraphs Overview and Cypher Clauses"),"\nfor how to ingest triples through ",(0,a.kt)("inlineCode",{parentName:"p"},"CREATE")," statements."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note on importing N-Triples files:")," N-Triples can be ingested\nwith the same ",(0,a.kt)("inlineCode",{parentName:"p"},"COPY FROM")," commands and options as Turtle files, and do not require special handling.\nThat is why below we only cover the ",(0,a.kt)("inlineCode",{parentName:"p"},"COPY FROM")," statement for importing triples from Turtle files."),(0,a.kt)("h2",{id:"rdf-data-import-from-turtle-files-using-copy-from"},"RDF Data Import From Turtle Files Using COPY FROM"),(0,a.kt)("p",null,"Turtle files represent triples in the following format: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'@prefix ex: <http://example.org/#> .\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\n@prefix foaf: <http://xmlns.com/foaf/0.1/> .\n@prefix rel: <http://www.perceive.net/schemas/relationship/> .\n\nex:green-goblin\n    rel:enemyOf ex:spiderman ;\n    rel:enemyOf _:super-character-1 ;\n    rel:enemyOf _:super-character-2 ;\n    a foaf:Person ;    # in the context of the Marvel universe\n    foaf:name "Green Goblin" .\n\nex:spiderman\n    rel:enemyOf ex:green-goblin ;\n    rel:friendOf _:super-character-1 ;\n    a foaf:Person ;\n    foaf:name "Spiderman", "\u0427\u0435\u043b\u043e\u0432\u0435\u043a-\u043f\u0430\u0443\u043a"@ru .\n')),(0,a.kt)("p",null,"This file, copy-pasted from the original ",(0,a.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/turtle/"},"Turtle specification")," contains 7 triples, 5 with ",(0,a.kt)("inlineCode",{parentName:"p"},"ex:green-goblin")," as the subject and\n5 with ",(0,a.kt)("inlineCode",{parentName:"p"},"ex:spiderman")," as the subject. It also demonstrates a few features of RDF and Turtle files:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The predicate ",(0,a.kt)("inlineCode",{parentName:"li"},"a")," is shorthand for ",(0,a.kt)("inlineCode",{parentName:"li"},"rdf:type"),"."),(0,a.kt)("li",{parentName:"ul"},"The use of ",(0,a.kt)("inlineCode",{parentName:"li"},";")," to separate triples with the same subject (e.g., the 4 triples of ",(0,a.kt)("inlineCode",{parentName:"li"},"ex:green-goblin")," are separated with ",(0,a.kt)("inlineCode",{parentName:"li"},";"),")."),(0,a.kt)("li",{parentName:"ul"},"The use of ",(0,a.kt)("inlineCode",{parentName:"li"},",")," to separate multiple objects for the same predicate (the last two triples are <",(0,a.kt)("inlineCode",{parentName:"li"},"ex:spiderman"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"foaf:name"),", ",(0,a.kt)("inlineCode",{parentName:"li"},'"Spiderman"'),"> and <",(0,a.kt)("inlineCode",{parentName:"li"},"ex:spiderman"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"foaf:name"),", ",(0,a.kt)("inlineCode",{parentName:"li"},'"\u0427\u0435\u043b\u043e\u0432\u0435\u043a-\u043f\u0430\u0443\u043a"@ru'),">.")),(0,a.kt)("p",null,"Please see ",(0,a.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/turtle/"},"official Turtle specification")," for more details on the format of Turtle files."),(0,a.kt)("p",null,"You can bulk-insert Turtle files using the COPY FROM command. Assuming the above file is stored in ",(0,a.kt)("inlineCode",{parentName:"p"},"${PATH-TO-DIR}/turtle-ex.ttl")," file\nand your RDFGraph is called TurtleEx, you can call:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'COPY TurtleEx FROM "${PATH-TO-DIR}/turtle-ex.ttl" (IN_MEMORY=true);\n')),(0,a.kt)("h3",{id:"turtle-configuration"},"Turtle Configuration"),(0,a.kt)("p",null,"Similar to CSV configuration, Turtle import configuration can be manually changed by specifying them inside ",(0,a.kt)("inlineCode",{parentName:"p"},"( )")," at the end of the the ",(0,a.kt)("inlineCode",{parentName:"p"},"COPY FROM")," command.\nCurrently we support these options:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Default Value"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"IN_MEMORY"),(0,a.kt)("td",{parentName:"tr",align:"left"},"Whether the entire file should be cached in memory during loading"),(0,a.kt)("td",{parentName:"tr",align:"left"},"false")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"STRICT"),(0,a.kt)("td",{parentName:"tr",align:"left"},"Whether malformed lines should be ignored"),(0,a.kt)("td",{parentName:"tr",align:"left"},"false")))),(0,a.kt)("p",null,"Setting ",(0,a.kt)("inlineCode",{parentName:"p"},"IN_MEMORY")," to true makes loading faster because we currently go over the triples multiple times\nduring bulk loading. If you have enough memory to load all of the Turtle file into memory plus\nthe additional memory that K\xf9zu will use during loading, you should set this option to true.\nIf you are ingesting a large Turtle file and you are running into memory issues, you can set ",(0,a.kt)("inlineCode",{parentName:"p"},"IN_MEMORY=false")," or\nleave it out of the ",(0,a.kt)("inlineCode",{parentName:"p"},"COPY FROM")," command."),(0,a.kt)("p",null,"By default, K\xf9zu will ignore malformed lines during loading. Setting ",(0,a.kt)("inlineCode",{parentName:"p"},"STRICT=true")," will make the system throw a runtime exception\nwhen a malformed line is encountered and stop loading."),(0,a.kt)("h3",{id:"importing-multiple-turtle-files"},"Importing Multiple Turtle Files"),(0,a.kt)("p",null,"Similar to importing multiple CSV or Parquet files, you can also import multiple Turtle files by specifying a glob pattern.\nFor example, you can import all the Turtle files in the ",(0,a.kt)("inlineCode",{parentName:"p"},"${PATH-TO-DIR}")," directory as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'COPY TurtleEx FROM "${PATH-TO-DIR}/*.ttl";\n')),(0,a.kt)("p",null,"Please refer to the ",(0,a.kt)("a",{parentName:"p",href:"https://kuzudb.com/docusaurus/data-import/csv-import#copy-from-multiple-csv-files-to-a-single-table"},"COPY FROM MULTIPLE CSV Files")," section for details."),(0,a.kt)("h3",{id:"full-iris-prefixes-and-relative-iris"},"Full IRIs, Prefixes, and Relative IRIs"),(0,a.kt)("p",null,"IRIs in Turtle files can be specified in one of 3 ways:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Full IRIs: are enclosed between angle brackets ",(0,a.kt)("inlineCode",{parentName:"li"},"<")," and ",(0,a.kt)("inlineCode",{parentName:"li"},">"),": e.g., ",(0,a.kt)("inlineCode",{parentName:"li"},"<http:://fullIRI/#ex>")),(0,a.kt)("li",{parentName:"ul"},'Relative IRIs: are also enclosed between angle brackets but start with "#" e.g., ',(0,a.kt)("inlineCode",{parentName:"li"},"<#baseIRIEx>"),". These will resolve to ",(0,a.kt)("inlineCode",{parentName:"li"},"${baseIRI}#baseIRI"),",\nwhere ",(0,a.kt)("inlineCode",{parentName:"li"},"${baseIRI}")," is the base IRI specified in the Turtle file with BASE or @base directives."),(0,a.kt)("li",{parentName:"ul"},"Prefixed names: are not enclosed between angle brackets and are in the form of prefixlabel:localname, e.g., ",(0,a.kt)("inlineCode",{parentName:"li"},"kz:prefixIRIEx"),",\nwhere the prefixlabel is prefixed with a prefix defined in the Turtle file with the PREFIX or @prefix directives.")),(0,a.kt)("p",null,"The following example shows three triples. Only the first one will be ingested because the second and third triples\ncontain malformed IRIs."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"@base <http://base-prefix/> .\n@prefix foaf: <http://xmlns.com/foaf/0.1/> .\n\n<#baseIRIEx> foaf:prefixIRIEx <http://fullIRI/#ex>  .\n\n#baseIRIEx foaf:prefixIRIEx <http://fullIRI/#ex> .\n\n<#baseIRIEx> foo:prefixIRIEx <http://fullIRI/#ex> .\n")),(0,a.kt)("p",null,"This will insert only the first triple as follows: < ",(0,a.kt)("inlineCode",{parentName:"p"},"http://base-prefix/#baseIRIEx"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"http://xmlns.com/foaf/0.1/prefixIRIEx"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"http://fullIRI/#ex")," >.\nIn the second triple ",(0,a.kt)("inlineCode",{parentName:"p"},"#baseIRI")," is malformed because it is not enclosed between angle brackets.\nIn the third triple ",(0,a.kt)("inlineCode",{parentName:"p"},"foo:prefixIRIEx")," is malformed because ",(0,a.kt)("inlineCode",{parentName:"p"},"foo")," is not defined as a prefix in the Turtle file."),(0,a.kt)("h3",{id:"behavior-during-importing-malformed-triples-in-turtle-files"},"Behavior During Importing Malformed Triples in Turtle Files"),(0,a.kt)("p",null,'If your Turtle file contains malformed triples, e.g., if the subject, predicate, or object is not a valid IRI,\nK\xf9zu will skip the rest of "chunk" of triples after the first malformed triple. A chunk is a set of\ntriples spearated by ";" grouped with the same subject. In the below example there are 2 chunks,\none for ',(0,a.kt)("inlineCode",{parentName:"p"},"ex:spiderman")," and the other for ",(0,a.kt)("inlineCode",{parentName:"p"},"ex:goblin"),". For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"@prefix ex: <http://example.org/#> .\n@prefix rel: <http://www.perceive.net/schemas/relationship/> .\n\nex:spiderman\n    rel:enemyOf ex:green-goblin ;\n    <foo<bar> _:batman ;\n    <foobar> ex:superman .\n    \nex:green-goblin\n    rel:enemyOf ex:spiderman .\n")),(0,a.kt)("p",null,"In this example the ",(0,a.kt)("inlineCode",{parentName:"p"},"<foo<bar>")," is an invalid IRI, so the K\xf9zu Turtle parser\nparses the first triple <",(0,a.kt)("inlineCode",{parentName:"p"},"ex:spiderman"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"rel:enemyOf"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"ex:green-goblin"),"> that comes before it\nbut skips the rest of the chunk of triples about ",(0,a.kt)("inlineCode",{parentName:"p"},"ex:spiderman"),".\nThe second chunk, which contains the single triple <",(0,a.kt)("inlineCode",{parentName:"p"},"ex:green-goblin"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"rel:enemyOf"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"ex:spiderman"),">\nwill also be inserted. "),(0,a.kt)("p",null,"You can also set copy configuration ",(0,a.kt)("inlineCode",{parentName:"p"},"(strict=true)")," to throw exceptions and stop loading when a malformed line is detected\nas described ",(0,a.kt)("a",{parentName:"p",href:"#turtle-configuration"},"above"),"."),(0,a.kt)("h3",{id:"blank-nodes"},"Blank Nodes"),(0,a.kt)("p",null,"Blank nodes in Turtle files can appear in one of two formats:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Labeled Blank Nodes: appear in the file with the ",(0,a.kt)("inlineCode",{parentName:"li"},"_:opt-label")," prefix. For example,\nthe example in the beginning of this page contains 2 blank nodes: ",(0,a.kt)("inlineCode",{parentName:"li"},"_:super-character-1")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"_:super-character-2"),".\nK\xf9zu assigns labeled blank nodes in Turtle files an IRI of the form: ",(0,a.kt)("inlineCode",{parentName:"li"},"_:iopt-label"),", where i is an integers,\nsuch as ",(0,a.kt)("inlineCode",{parentName:"li"},"_:3super-character-1"),". If you have blank nodes in\nyour triples, you will see such generated IRIs, which may not exist in the original Turtle files, when you query your triples."),(0,a.kt)("li",{parentName:"ul"},"Unlabeled Blank Nodes: appear in the file with the ",(0,a.kt)("inlineCode",{parentName:"li"},"[]")," syntax. assigns unlabeled blank nodes an IRI of the form ",(0,a.kt)("inlineCode",{parentName:"li"},"_:ibj"),".\nFor example, the following example (copy-pasted from the original Turtle specification)\ncontains two unlabeled blank nodes ",(0,a.kt)("inlineCode",{parentName:"li"},"_:0b1")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"_:0b2"),":")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'@prefix foaf: <http://xmlns.com/foaf/0.1/> .\n\n# Someone knows someone else, who has the name "Bob".\n[] foaf:knows [ foaf:name "Bob" ] .\n')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"_:0b2")," is the nested blank node's IRI with triple",(0,a.kt)("inlineCode",{parentName:"p"},'<_:0b2, foaf:name, "Bob">')," and ",(0,a.kt)("inlineCode",{parentName:"p"},"_:0b1")," is the IRI of\nthe blank node that knows ",(0,a.kt)("inlineCode",{parentName:"p"},"_:0b2"),":",(0,a.kt)("inlineCode",{parentName:"p"},"<_:0b1, foaf:knows, _:0b2>"),"."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"You cannot use blank nodes as predicates in Turtle files according to Turtle standards. If you do, K\xf9zu will skip the triple.")),(0,a.kt)("h3",{id:"language-tag-for-literals-and-size-limitation"},"Language Tag for Literals and Size Limitation"),(0,a.kt)("p",null,"RDF Literals consist of a data type, a value, and an optional language tag.\nFor example, the example in the beginning of this page contains the following triple: (",(0,a.kt)("inlineCode",{parentName:"p"},"http://example.org/#spiderman"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"foaf:name"),", ",(0,a.kt)("inlineCode",{parentName:"p"},'"\u0427\u0435\u043b\u043e\u0432\u0435\u043a-\u043f\u0430\u0443\u043a"@ru'),'). The object here\nis an RDF Literal with data type string, value "\u0427\u0435\u043b\u043e\u0432\u0435\u043a-\u043f\u0430\u0443\u043a", and language tag @ru indicating\nthat it is Russian. K\xf9zu loads the language tag into a separate ',(0,a.kt)("inlineCode",{parentName:"p"},"lang")," property column."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'WITH "http://xmlns.com/foaf/0.1/" as foaf, "http://example.org/" as ex\nMATCH (s {iri: ex + "spiderman"})-[p:TurtleEx {iri: foaf + "name"}]-(o) \nRETURN s.iri, p.iri, o.val, o.lang;\nOutput:\n-----------------------------------------------------------------------------------------\n| s.iri                        | p.iri                          | o.val        | o.lang |\n-----------------------------------------------------------------------------------------\n| http://example.org/spiderman | http://xmlns.com/foaf/0.1/name | Spiderman    |        |\n-----------------------------------------------------------------------------------------\n| http://example.org/spiderman | http://xmlns.com/foaf/0.1/name | \u0427\u0435\u043b\u043e\u0432\u0435\u043a-\u043f\u0430\u0443\u043a | ru     |\n-----------------------------------------------------------------------------------------\n')),(0,a.kt)("p",null,"Further, there is currently a size limitation that your literal strings can be of size at most 256KB in characters.\nIf you are storing longer text, we will truncate them while ingesting your literals."),(0,a.kt)("h3",{id:"converting-other-rdf-files-to-turtle-and-validating-turtle-files"},"Converting Other RDF Files to Turtle and Validating Turtle Files"),(0,a.kt)("p",null,"If you have RDF files in formats other than Turtle and N-Triples, such as\n",(0,a.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/rdf-syntax-grammar/"},"RDF/XML")," or ",(0,a.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/json-ld11/"},"JSON-LD"),",\ncurrently you need to convert them to Turtle to ingest them into K\xf9zu.\nBelow are several pointers to a few useful tools online for reference only.\nPlease use them at your own discretion. There are many other tools and libraries you can use for similar purposes."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://rdftools.ga.gov.au/convert"},"RDF Tools"),": a web interface tool that uses RDFLib Python library (see below)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://pypi.org/project/rdflib/"},"RDFLib"),": a Python library that can be used to convert RDF files to Turtle."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.easyrdf.org/converter"},"EasyRDF"),": another web interface tool."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/drobilla/serd"},"Serd"),": a lightweight C library that supports parsing and writing RDF triples\nin several formats.")),(0,a.kt)("p",null,"You can also use the ",(0,a.kt)("a",{parentName:"p",href:"https://www.w3.org/2015/03/ShExValidata/"},"Validata")," tool by W3C to validate your Turtle files.\nThis is an advanced tool to validate RDF files against a Shape Expression (ShEx) schema,\nbut it can also validate general errors in your Turtle files."))}f.isMDXComponent=!0}}]);