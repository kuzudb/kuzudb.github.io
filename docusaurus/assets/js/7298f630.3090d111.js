"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[3766],{3905:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>c});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},l=Object.keys(t);for(r=0;r<l.length;r++)n=l[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(r=0;r<l.length;r++)n=l[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var o=r.createContext({}),u=function(t){var e=r.useContext(o),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},p=function(t){var e=u(t.components);return r.createElement(o.Provider,{value:e},t.children)},m="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},g=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,l=t.originalType,o=t.parentName,p=s(t,["components","mdxType","originalType","parentName"]),m=u(n),g=a,c=m["".concat(o,".").concat(g)]||m[g]||d[g]||l;return n?r.createElement(c,i(i({ref:e},p),{},{components:n})):r.createElement(c,i({ref:e},p))}));function c(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var l=n.length,i=new Array(l);i[0]=g;var s={};for(var o in e)hasOwnProperty.call(e,o)&&(s[o]=e[o]);s.originalType=t,s[m]="string"==typeof t?t:a,i[1]=s;for(var u=2;u<l;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},1584:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const l={title:"Text Functions",description:"Text functions are used to manipulate text."},i="Text Operators",s={unversionedId:"cypher/expressions/text-functions",id:"cypher/expressions/text-functions",title:"Text Functions",description:"Text functions are used to manipulate text.",source:"@site/docs/cypher/expressions/text-functions.md",sourceDirName:"cypher/expressions",slug:"/cypher/expressions/text-functions",permalink:"/docusaurus/cypher/expressions/text-functions",draft:!1,tags:[],version:"current",frontMatter:{title:"Text Functions",description:"Text functions are used to manipulate text."},sidebar:"docSidebar",previous:{title:"Struct Functions",permalink:"/docusaurus/cypher/expressions/struct-functions"},next:{title:"Timestamp Functions",permalink:"/docusaurus/cypher/expressions/timestamp-functions"}},o={},u=[],p={toc:u},m="wrapper";function d(t){let{components:e,...n}=t;return(0,a.kt)(m,(0,r.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"text-operators"},"Text Operators"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Operator"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Example"),(0,a.kt)("th",{parentName:"tr",align:null},"Result"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"[index]"),(0,a.kt)("td",{parentName:"tr",align:null},"alias of array extract"),(0,a.kt)("td",{parentName:"tr",align:null},'STRING("TEXT")',"[1]"),(0,a.kt)("td",{parentName:"tr",align:null},'"T"')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"[begin:end]"),(0,a.kt)("td",{parentName:"tr",align:null},"alias of array slice"),(0,a.kt)("td",{parentName:"tr",align:null},'STRING("TEXT")',"[1:3]"),(0,a.kt)("td",{parentName:"tr",align:null},'"TEX"')))),(0,a.kt)("h1",{id:"text-functions"},"Text Functions"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Function"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Example"),(0,a.kt)("th",{parentName:"tr",align:null},"Result"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"array_extract(list, index)"),(0,a.kt)("td",{parentName:"tr",align:null},"extracts a single character from string using 1-based index"),(0,a.kt)("td",{parentName:"tr",align:null},'array_extract("year", 2)'),(0,a.kt)("td",{parentName:"tr",align:null},'"e"')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"array_slice(list, begin, end)"),(0,a.kt)("td",{parentName:"tr",align:null},"slices a string using 1-based index"),(0,a.kt)("td",{parentName:"tr",align:null},'array_slice("year", 1, 4)'),(0,a.kt)("td",{parentName:"tr",align:null},'"year"')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"concat(string1, string2)"),(0,a.kt)("td",{parentName:"tr",align:null},"concatenates two string"),(0,a.kt)("td",{parentName:"tr",align:null},'concat("university", " of waterloo")'),(0,a.kt)("td",{parentName:"tr",align:null},'"university of waterloo"')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"ends_with(string1, string2)"),(0,a.kt)("td",{parentName:"tr",align:null},"alias of suffix"),(0,a.kt)("td",{parentName:"tr",align:null},'ends_with("best student", "student")'),(0,a.kt)("td",{parentName:"tr",align:null},"true")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"lcase(string)"),(0,a.kt)("td",{parentName:"tr",align:null},"alias of lower"),(0,a.kt)("td",{parentName:"tr",align:null},'lcase("UPPER CASE")'),(0,a.kt)("td",{parentName:"tr",align:null},'"upper case"')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"left(string, count)"),(0,a.kt)("td",{parentName:"tr",align:null},"returns the left most count number of characters from string"),(0,a.kt)("td",{parentName:"tr",align:null},'left("long string", 2)'),(0,a.kt)("td",{parentName:"tr",align:null},'"lo"')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"size(string)"),(0,a.kt)("td",{parentName:"tr",align:null},"returns the number of characters in string"),(0,a.kt)("td",{parentName:"tr",align:null},'size("database")'),(0,a.kt)("td",{parentName:"tr",align:null},"8")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"list_element(string, index)"),(0,a.kt)("td",{parentName:"tr",align:null},"alias of array_extract"),(0,a.kt)("td",{parentName:"tr",align:null},'list_element("university", 3)'),(0,a.kt)("td",{parentName:"tr",align:null},'"i"')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"list_extract(string, index)"),(0,a.kt)("td",{parentName:"tr",align:null},"alias of array_extract"),(0,a.kt)("td",{parentName:"tr",align:null},'list_extract("waterloo", 2)'),(0,a.kt)("td",{parentName:"tr",align:null},'"a"')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"lower(string)"),(0,a.kt)("td",{parentName:"tr",align:null},"returns the string in lower case"),(0,a.kt)("td",{parentName:"tr",align:null},'lower("WaterLoo")'),(0,a.kt)("td",{parentName:"tr",align:null},'"waterloo"')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"lpad(string, count, character)"),(0,a.kt)("td",{parentName:"tr",align:null},"pads the string with the character from the left until it has count characters"),(0,a.kt)("td",{parentName:"tr",align:null},'lpad("WaterLoo", 10, ">")'),(0,a.kt)("td",{parentName:"tr",align:null},'">>WaterLoo"')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"ltrim(string)"),(0,a.kt)("td",{parentName:"tr",align:null},"removes any white spaces on the left of the string"),(0,a.kt)("td",{parentName:"tr",align:null},'ltrim("  waterloo  ")'),(0,a.kt)("td",{parentName:"tr",align:null},'"waterloo  "')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"prefix(string, search_string)"),(0,a.kt)("td",{parentName:"tr",align:null},"returns whether the string starts with serach_string"),(0,a.kt)("td",{parentName:"tr",align:null},'prefix("good university", "good")'),(0,a.kt)("td",{parentName:"tr",align:null},"True")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"repeat(string, count)"),(0,a.kt)("td",{parentName:"tr",align:null},"repeats the string count number of times"),(0,a.kt)("td",{parentName:"tr",align:null},'repeat("##", 5)'),(0,a.kt)("td",{parentName:"tr",align:null},'"##########"')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"reverse(string)"),(0,a.kt)("td",{parentName:"tr",align:null},"reverses the string"),(0,a.kt)("td",{parentName:"tr",align:null},'reverse("<<12345>>")'),(0,a.kt)("td",{parentName:"tr",align:null},'">>54321<<"')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"right(string, count)"),(0,a.kt)("td",{parentName:"tr",align:null},"returns the right most count number of characters from string"),(0,a.kt)("td",{parentName:"tr",align:null},'right("toronto", 2)'),(0,a.kt)("td",{parentName:"tr",align:null},'"to"')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"rpad(string, count, character)"),(0,a.kt)("td",{parentName:"tr",align:null},"pads the string with the character from the right until it has count characters"),(0,a.kt)("td",{parentName:"tr",align:null},"rpad(\"toronto\", 10, '<')"),(0,a.kt)("td",{parentName:"tr",align:null},'"toronto<<<"')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"rtrim(string)"),(0,a.kt)("td",{parentName:"tr",align:null},"removes any white spaces on the right of the string"),(0,a.kt)("td",{parentName:"tr",align:null},'rtrim("  toronto  ")'),(0,a.kt)("td",{parentName:"tr",align:null},'"  toronto"')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"starts_with(string1, string2)"),(0,a.kt)("td",{parentName:"tr",align:null},"alias of prefix"),(0,a.kt)("td",{parentName:"tr",align:null},'starts_with("best student", "best")'),(0,a.kt)("td",{parentName:"tr",align:null},"True")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"substr(string, start, length)"),(0,a.kt)("td",{parentName:"tr",align:null},"alias of substring"),(0,a.kt)("td",{parentName:"tr",align:null},'substr("long str", 2, 3)'),(0,a.kt)("td",{parentName:"tr",align:null},'"ong"')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"substring(string, start, length)"),(0,a.kt)("td",{parentName:"tr",align:null},"extracts the string from start position until length number of characters using 1-based index"),(0,a.kt)("td",{parentName:"tr",align:null},'substring("toronto", 1, 2)'),(0,a.kt)("td",{parentName:"tr",align:null},'"to"')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"suffix(string, search_string)"),(0,a.kt)("td",{parentName:"tr",align:null},"returns whether the string ends with search_string"),(0,a.kt)("td",{parentName:"tr",align:null},'suffix("toronto12", "12")'),(0,a.kt)("td",{parentName:"tr",align:null},"True")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"trim(string)"),(0,a.kt)("td",{parentName:"tr",align:null},"removes any white spaces either on the left or right of the string"),(0,a.kt)("td",{parentName:"tr",align:null},'trim("  good  ")'),(0,a.kt)("td",{parentName:"tr",align:null},'"good"')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"ucase(string)"),(0,a.kt)("td",{parentName:"tr",align:null},"alias of upper"),(0,a.kt)("td",{parentName:"tr",align:null},'ucase("small case")'),(0,a.kt)("td",{parentName:"tr",align:null},'"SMALL CASE"')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"upper(string)"),(0,a.kt)("td",{parentName:"tr",align:null},"returns the string in upper case"),(0,a.kt)("td",{parentName:"tr",align:null},'upper("small case")'),(0,a.kt)("td",{parentName:"tr",align:null},'"SMALL CASE"')))))}d.isMDXComponent=!0}}]);