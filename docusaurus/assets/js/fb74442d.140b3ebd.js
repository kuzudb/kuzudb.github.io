"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[8049],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function u(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var i=a.createContext({}),s=function(e){var t=a.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):u(u({},t),e)),r},p=function(e){var t=s(e.components);return a.createElement(i.Provider,{value:t},e.children)},c="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,i=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=s(r),m=n,d=c["".concat(i,".").concat(m)]||c[m]||k[m]||l;return r?a.createElement(d,u(u({ref:t},p),{},{components:r})):a.createElement(d,u({ref:t},p))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,u=new Array(l);u[0]=m;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o[c]="string"==typeof e?e:n,u[1]=o;for(var s=2;s<l;s++)u[s]=r[s];return a.createElement.apply(null,u)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4463:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>u,default:()=>k,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var a=r(7462),n=(r(7294),r(3905));const l={title:"Query Result",sidebar_position:2},u=void 0,o={unversionedId:"client-apis/python-api/query-result",id:"client-apis/python-api/query-result",title:"Query Result",description:"QueryResult",source:"@site/docs/client-apis/python-api/query-result.md",sourceDirName:"client-apis/python-api",slug:"/client-apis/python-api/query-result",permalink:"/docusaurus/client-apis/python-api/query-result",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Query Result",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Connection",permalink:"/docusaurus/client-apis/python-api/connection"},next:{title:"Node.js API",permalink:"/docusaurus/client-apis/nodejs-api/"}},i={},s=[{value:"QueryResult",id:"queryresult",level:2},{value:"Available APIs:",id:"available-apis",level:3}],p={toc:s},c="wrapper";function k(e){let{components:t,...r}=e;return(0,n.kt)(c,(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("a",{id:"query_result.QueryResult"}),(0,n.kt)("h2",{id:"queryresult"},"QueryResult"),(0,n.kt)("p",null,"When you issue a query to the database through the ",(0,n.kt)("inlineCode",{parentName:"p"},"con->execute(query)")," API, you are expected to get a queryResult which contains all result tuples for the given query.\nWe provide variety of APIs for user to fetch the queryResult as their desired format."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"class QueryResult()\n")),(0,n.kt)("h3",{id:"available-apis"},"Available APIs:"),(0,n.kt)("hr",null),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#query_result.QueryResult.__init__"},"_","_","init","_","_")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#query_result.QueryResult.check_for_query_result_close"},"check","_","for","_","query","_","result","_","close")," Check if the query result is closed and raise an exception if it is."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#query_result.QueryResult.has_next"},"has","_","next")," Check if there are more rows in the query result. "),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#query_result.QueryResult.get_next"},"get","_","next")," Get the next row in the query result."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#query_result.QueryResult.write_to_csv"},"write","_","to","_","csv")," Write the query result to a CSV file."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#query_result.QueryResult.close"},"close")," Close the query result."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#query_result.QueryResult.get_as_df"},"get","_","as","_","df")," Get the query result as a Pandas DataFrame."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#query_result.QueryResult.get_as_arrow"},"get","_","as","_","arrow")," Get the query result as a PyArrow Table."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#query_result.QueryResult.get_column_data_types"},"get","_","column","_","data","_","types")," Get the data types of the columns in the query result."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#query_result.QueryResult.get_column_names"},"get","_","column","_","names")," Get the names of the columns in the query result."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#query_result.QueryResult.reset_iterator"},"reset","_","iterator")," Reset the iterator of the query result."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#query_result.QueryResult.get_as_networkx"},"get","_","as","_","networkx")," Converts the nodes and rels in query result into a NetworkX graph representation."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#query_result.QueryResult.get_as_torch_geometric"},"get","_","as","_","torch","_","geometric")," Converts the nodes and rels in query result into a PyTorch Geometric graph representation torch_geometric.data.Data or torch_geometric.data.HeteroData.")),(0,n.kt)("hr",null),(0,n.kt)("a",{id:"query_result.QueryResult.__init__"}),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"_","_","init","_","_")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(connection, query_result)\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"connection : _kuzu.Connection")," Connection to the database.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"query_result : _kuzu.QueryResult")," Query result."))),(0,n.kt)("hr",null),(0,n.kt)("a",{id:"query_result.QueryResult.check_for_query_result_close"}),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"check","_","for","_","query","_","result","_","close")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def check_for_query_result_close()\n")),(0,n.kt)("p",null,"Check if the query result is closed and raise an exception if it is."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Raises")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Exception")," If the query result is closed.")),(0,n.kt)("hr",null),(0,n.kt)("a",{id:"query_result.QueryResult.has_next"}),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"has","_","next")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def has_next()\n")),(0,n.kt)("p",null,"Check if there are more rows in the query result."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"bool")," True if there are more rows in the query result, False otherwise.")),(0,n.kt)("hr",null),(0,n.kt)("a",{id:"query_result.QueryResult.get_next"}),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"get","_","next")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def get_next()\n")),(0,n.kt)("p",null,"Get the next row in the query result."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"list")," Next row in the query result.")),(0,n.kt)("hr",null),(0,n.kt)("a",{id:"query_result.QueryResult.write_to_csv"}),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"write","_","to","_","csv")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def write_to_csv(filename, delimiter=',', escape_character='\"', newline='\\n')\n")),(0,n.kt)("p",null,"Write the query result to a CSV file."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"filename : str")," Name of the CSV file to write to.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"delimiter : str")," Delimiter to use in the CSV file. Defaults to ','.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"escape_character : str")," Escape character to use in the CSV file. Defaults to '\"'.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"newline : str")," Newline character to use in the CSV file. Defaults to '\\n'."))),(0,n.kt)("hr",null),(0,n.kt)("a",{id:"query_result.QueryResult.close"}),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"close")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def close()\n")),(0,n.kt)("p",null,"Close the query result."),(0,n.kt)("hr",null),(0,n.kt)("a",{id:"query_result.QueryResult.get_as_df"}),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"get","_","as","_","df")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def get_as_df()\n")),(0,n.kt)("p",null,"Get the query result as a Pandas DataFrame."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"pandas.DataFrame")," Query result as a Pandas DataFrame.")),(0,n.kt)("hr",null),(0,n.kt)("a",{id:"query_result.QueryResult.get_as_arrow"}),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"get","_","as","_","arrow")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def get_as_arrow(chunk_size)\n")),(0,n.kt)("p",null,"Get the query result as a PyArrow Table."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"chunk_size : int")," Number of rows to include in each chunk.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"pyarrow.Table")," Query result as a PyArrow Table.")),(0,n.kt)("hr",null),(0,n.kt)("a",{id:"query_result.QueryResult.get_column_data_types"}),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"get","_","column","_","data","_","types")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def get_column_data_types()\n")),(0,n.kt)("p",null,"Get the data types of the columns in the query result."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"list")," Data types of the columns in the query result.")),(0,n.kt)("hr",null),(0,n.kt)("a",{id:"query_result.QueryResult.get_column_names"}),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"get","_","column","_","names")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def get_column_names()\n")),(0,n.kt)("p",null,"Get the names of the columns in the query result."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"list")," Names of the columns in the query result.")),(0,n.kt)("hr",null),(0,n.kt)("a",{id:"query_result.QueryResult.reset_iterator"}),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"reset","_","iterator")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def reset_iterator()\n")),(0,n.kt)("p",null,"Reset the iterator of the query result."),(0,n.kt)("hr",null),(0,n.kt)("a",{id:"query_result.QueryResult.get_as_networkx"}),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"get","_","as","_","networkx")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def get_as_networkx(directed=True)\n")),(0,n.kt)("p",null,"Convert the nodes and rels in query result into a NetworkX directed or undirected graph\nwith the following rules:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Columns with data type other than node or rel will be ignored."),(0,n.kt)("li",{parentName:"ul"},"Duplicated nodes and rels will be converted only once.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"directed : bool")," Whether the graph should be directed. Defaults to True.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"networkx.DiGraph or networkx.Graph")," Query result as a NetworkX graph.")),(0,n.kt)("hr",null),(0,n.kt)("a",{id:"query_result.QueryResult.get_as_torch_geometric"}),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"get","_","as","_","torch","_","geometric")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def get_as_torch_geometric()\n")),(0,n.kt)("p",null,"Converts the nodes and rels in query result into a PyTorch Geometric graph representation\ntorch_geometric.data.Data or torch_geometric.data.HeteroData."),(0,n.kt)("p",null,"For node conversion, numerical and boolean properties are directly converted into tensor and stored in Data/HeteroData. For properties cannot be converted into tensor automatically (please refer to the notes below for more detail), they are returned as ",(0,n.kt)("inlineCode",{parentName:"p"},"unconverted_properties"),"."),(0,n.kt)("p",null,"For rel conversion, rel is converted into edge_index tensor director. Rel properties are returned as ",(0,n.kt)("inlineCode",{parentName:"p"},"edge_properties"),"."),(0,n.kt)("p",null,"Node properties that cannot be converted into tensor automatically:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"If the type of a node property is not one of INT64, DOUBLE, or BOOL."),(0,n.kt)("li",{parentName:"ul"},"If a node property contains a null value."),(0,n.kt)("li",{parentName:"ul"},"If a node property contains a nested list of variable length (e.g. [","[1,2]",",","[3]","])."),(0,n.kt)("li",{parentName:"ul"},"If a node property is a list or nested list, but the shape is inconsistent (e.g. the list length is 6 for one node but 5 for another node).")),(0,n.kt)("p",null,"Additional conversion rules:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Columns with data type other than node or rel will be ignored."),(0,n.kt)("li",{parentName:"ul"},"Duplicated nodes and rels will be converted only once.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"torch_geometric.data.Data or torch_geometric.data.HeteroData")," Query result as a PyTorch Geometric graph. Containing numeric or boolean node properties and edge_index tensor."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"dict")," A dictionary that maps the positional offset of each node in Data/HeteroData to its primary key in the database."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"dict")," A dictionary contains node properties that cannot be converted into tensor automatically. The order of values for each property is aligned with nodes in Data/HeteroData."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"dict")," A dictionary contains edge properties. The order of values for each property is aligned with edge_index in Data/HeteroData.")))}k.isMDXComponent=!0}}]);