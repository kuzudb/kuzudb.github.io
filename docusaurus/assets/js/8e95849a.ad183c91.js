"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[108],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>f});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),p=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(i.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(a),d=r,f=c["".concat(i,".").concat(d)]||c[d]||m[d]||s;return a?n.createElement(f,o(o({ref:t},u),{},{components:a})):n.createElement(f,o({ref:t},u))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,o=new Array(s);o[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<s;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},610:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const s={title:"Database",sidebar_position:0},o="Database",l={unversionedId:"client-apis/cpp-api/database",id:"client-apis/cpp-api/database",title:"Database",description:"To use K\xf9zu, you need to first create a Database instance.",source:"@site/docs/client-apis/cpp-api/database.md",sourceDirName:"client-apis/cpp-api",slug:"/client-apis/cpp-api/database",permalink:"/docusaurus/client-apis/cpp-api/database",draft:!1,tags:[],version:"current",sidebarPosition:0,frontMatter:{title:"Database",sidebar_position:0},sidebar:"tutorialSidebar",previous:{title:"C++ API",permalink:"/docusaurus/client-apis/cpp-api/"},next:{title:"Connection",permalink:"/docusaurus/client-apis/cpp-api/connection"}},i={},p=[{value:"Available APIs",id:"available-apis",level:2},{value:"class kuzu::main::Database",id:"class-kuzumaindatabase",level:2},{value:"class kuzu::main::SystemConfig",id:"class-kuzumainsystemconfig",level:2}],u={toc:p},c="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"database"},"Database"),(0,r.kt)("p",null,"To use K\xf9zu, you need to first create a ",(0,r.kt)("inlineCode",{parentName:"p"},"Database")," instance.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"Database")," class requires: "),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"databasePath"),", which sets the path to the directory of your database;"),(0,r.kt)("li",{parentName:"ol"},"a ",(0,r.kt)("inlineCode",{parentName:"li"},"SystemConfig")," object, which sets the size of the buffer pool, and max num of threads.")),(0,r.kt)("p",null,"To construct a Database instance, databasePath is mandatory.\nCurrently, we do not support the in-memory mode, thus, each database must point to a directory in the file system."),(0,r.kt)("p",null,"By default, SystemConfig sets the max size of the buffer pool to 80% of the system physical memory and max num threads to ",(0,r.kt)("inlineCode",{parentName:"p"},"std::thread::hardware_concurrency();"),".\nYou can set a customized max buffer pool size (e.g., several GBs) through the constructor of ",(0,r.kt)("inlineCode",{parentName:"p"},"SystemConfig"),".\nFor example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'SystemConfig systemConfig(1ull << 31 /* set max buffer pool size to 2GB */);\nDatabase database("testdb", systemConfig);\n...\n')),(0,r.kt)("p",null,"By setting a buffer pool size to ",(0,r.kt)("inlineCode",{parentName:"p"},"x"),", K\xf9zu' buffer pool is limited to use at most ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," amount of memory.\nInstead of grabbing all of the memory at the initial startup, K\xf9zu grabs memory on demand, until hit the size."),(0,r.kt)("p",null,"Also: Do not construct multiple Database instances either within the same process or\nusing multiple separate processes unless you will only issue read-only queries\nthrough the connections you create from these these Database instances.\nSee ",(0,r.kt)("a",{parentName:"p",href:"..#note-on-connecting-to-the-same-database-directory-from-multiple-database-instances"},"this note")," for more details."),(0,r.kt)("h2",{id:"available-apis"},"Available APIs"),(0,r.kt)("h2",{id:"class-kuzumaindatabase"},"class kuzu::main::Database"),(0,r.kt)("p",null,"Database class is the main class of K\xf9zuDB. It manages all database components.  "),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Database")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"Database (std::string databasePath)\n")),(0,r.kt)("p",null,"Creates a database object at the given path with the default buffer pool size and max num threads. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"databasePath")," Database path. ")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Database")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"Database (std::string databasePath, SystemConfig systemConfig)\n")),(0,r.kt)("p",null,"Creates a database object at the given path with customized buffer pool size and max num threads."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"databasePath")," Database path. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"systemConfig")," System configurations (buffer pool size and max num threads). ")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"setLoggingLevel")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"void setLoggingLevel (std::string loggingLevel)\n")),(0,r.kt)("p",null,"Sets the logging level of the database instance. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"loggingLevel")," New logging level. (Supported logging levels are: 'info', 'debug', 'err'). ")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"class-kuzumainsystemconfig"},"class kuzu::main::SystemConfig"),(0,r.kt)("p",null,"Stores buffer pool size and max number of threads configurations.  "),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"SystemConfig (uint64_t bufferPoolSize)\n")),(0,r.kt)("p",null,"Creates a SystemConfig object. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"bufferPoolSize")," Buffer pool size in bytes.")))}m.isMDXComponent=!0}}]);