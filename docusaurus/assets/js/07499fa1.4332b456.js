"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[7316],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>_});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),u=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=u(e.components);return a.createElement(i.Provider,{value:n},e.children)},s="mdxType",k={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),s=u(t),m=r,_=s["".concat(i,".").concat(m)]||s[m]||k[m]||o;return t?a.createElement(_,l(l({ref:n},p),{},{components:t})):a.createElement(_,l({ref:n},p))}));function _(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=m;var c={};for(var i in n)hasOwnProperty.call(n,i)&&(c[i]=n[i]);c.originalType=e,c[s]="string"==typeof e?e:r,l[1]=c;for(var u=2;u<o;u++)l[u]=t[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1636:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>k,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var a=t(7462),r=(t(7294),t(3905));const o={title:"Connection",sidebar_position:1},l=void 0,c={unversionedId:"client-apis/c-api/connection",id:"client-apis/c-api/connection",title:"Connection",description:"class kuzu_connection",source:"@site/docs/client-apis/c-api/connection.md",sourceDirName:"client-apis/c-api",slug:"/client-apis/c-api/connection",permalink:"/docusaurus/client-apis/c-api/connection",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Connection",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Database",permalink:"/docusaurus/client-apis/c-api/database"},next:{title:"Query Result",permalink:"/docusaurus/client-apis/c-api/query_result"}},i={},u=[{value:"class kuzu_connection",id:"class-kuzu_connection",level:2}],p={toc:u},s="wrapper";function k(e){let{components:n,...t}=e;return(0,r.kt)(s,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"class-kuzu_connection"},"class kuzu_connection"),(0,r.kt)("p",null,"kuzu_connection is used to interact with a Database instance. Each connection is thread-safe. Multiple connections can connect to the same Database instance in a multi-threaded environment.  "),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API kuzu_connection* kuzu_connection_init (kuzu_database * database)\n")),(0,r.kt)("p",null,"Allocates memory and creates a connection to the database. Caller is responsible for calling kuzu_connection_destroy() to release the allocated memory. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"database")," The database instance to connect to. ")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The connection instance. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API void kuzu_connection_destroy (kuzu_connection * connection)\n")),(0,r.kt)("p",null,"Destroys the connection instance and frees the allocated memory. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"connection")," The connection instance to destroy. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API kuzu_query_result* kuzu_connection_query (kuzu_connection * connection, const char * query)\n")),(0,r.kt)("p",null,"Executes the given query and returns the result. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"connection")," The connection instance to execute the query. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"query")," The query to execute. ")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the result of the query. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API void kuzu_connection_begin_read_only_transaction (kuzu_connection * connection)\n")),(0,r.kt)("p",null,"Begins a read-only transaction in the given connection. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"connection")," The connection instance to begin read-only transaction. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API void kuzu_connection_begin_write_transaction (kuzu_connection * connection)\n")),(0,r.kt)("p",null,"Begins a write transaction in the given connection. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"connection")," The connection instance to begin write transaction. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API void kuzu_connection_commit (kuzu_connection * connection)\n")),(0,r.kt)("p",null,"Commits the current transaction. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"connection")," The connection instance to commit transaction. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API kuzu_query_result* kuzu_connection_execute (kuzu_connection * connection, kuzu_prepared_statement * prepared_statement)\n")),(0,r.kt)("p",null,"Executes the prepared_statement using connection. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"connection")," The connection instance to execute the prepared_statement. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"prepared_statement")," The prepared statement to execute. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API uint64_t kuzu_connection_get_max_num_thread_for_exec (kuzu_connection * connection)\n")),(0,r.kt)("p",null,"Returns the maximum number of threads of the connection to use for executing queries. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"connection")," The connection instance to return max number of threads for execution. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API char* kuzu_connection_get_node_property_names (kuzu_connection * connection, const char * table_name)\n")),(0,r.kt)("p",null,"Returns all property names of the given node table. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"connection")," The connection instance to return all property names. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"table_name")," The table name to return all property names. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API char* kuzu_connection_get_node_table_names (kuzu_connection * connection)\n")),(0,r.kt)("p",null,"Returns all node table names of the database. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"connection")," The connection instance to return all node table names. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API char* kuzu_connection_get_rel_property_names (kuzu_connection * connection, const char * table_name)\n")),(0,r.kt)("p",null,"Returns all property names of the given rel table. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"connection")," The connection instance to return all property names. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"table_name")," The table name to return all property names. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API char* kuzu_connection_get_rel_table_names (kuzu_connection * connection)\n")),(0,r.kt)("p",null,"Returns all rel table names of the database. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"connection")," The connection instance to return all rel table names. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API void kuzu_connection_interrupt (kuzu_connection * connection)\n")),(0,r.kt)("p",null,"Interrupts the current query execution in the connection. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"connection")," The connection instance to interrupt. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API kuzu_prepared_statement* kuzu_connection_prepare (kuzu_connection * connection, const char * query)\n")),(0,r.kt)("p",null,"Prepares the given query and returns the prepared statement. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"connection")," The connection instance to prepare the query. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"query")," The query to prepare. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API void kuzu_connection_rollback (kuzu_connection * connection)\n")),(0,r.kt)("p",null,"Rollbacks the current transaction. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"connection")," The connection instance to rollback transaction. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API void kuzu_connection_set_max_num_thread_for_exec (kuzu_connection * connection, uint64_t num_threads)\n")),(0,r.kt)("p",null,"Sets the maximum number of threads to use for executing queries. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"connection")," The connection instance to set max number of threads for execution. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"num_threads")," The maximum number of threads to use for executing queries. ")),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API void kuzu_connection_set_query_timeout (kuzu_connection * connection, uint64_t timeout_in_ms)\n")),(0,r.kt)("p",null,"Sets query timeout value in milliseconds for the connection. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"connection")," The connection instance to set query timeout value. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"timeout_in_ms")," The timeout value in milliseconds. ")),(0,r.kt)("hr",null))}k.isMDXComponent=!0}}]);