"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[3686],{3905:(e,t,a)=>{a.d(t,{Zo:()=>o,kt:()=>k});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function u(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},o=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},_=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,o=u(e,["components","mdxType","originalType","parentName"]),c=s(a),_=l,k=c["".concat(p,".").concat(_)]||c[_]||d[_]||r;return a?n.createElement(k,i(i({ref:t},o),{},{components:a})):n.createElement(k,i({ref:t},o))}));function k(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,i=new Array(r);i[0]=_;var u={};for(var p in t)hasOwnProperty.call(t,p)&&(u[p]=t[p]);u.originalType=e,u[c]="string"==typeof e?e:l,i[1]=u;for(var s=2;s<r;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}_.displayName="MDXCreateElement"},9536:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>u,toc:()=>s});var n=a(7462),l=(a(7294),a(3905));const r={title:"Data Type",sidebar_position:5},i=void 0,u={unversionedId:"client-apis/c-api/datatype",id:"client-apis/c-api/datatype",title:"Data Type",description:"class kuzulogicaltype",source:"@site/docs/client-apis/c-api/datatype.md",sourceDirName:"client-apis/c-api",slug:"/client-apis/c-api/datatype",permalink:"/docusaurus/client-apis/c-api/datatype",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Data Type",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Value",permalink:"/docusaurus/client-apis/c-api/value"},next:{title:"Prepared Statement",permalink:"/docusaurus/client-apis/c-api/prepared_statement"}},p={},s=[{value:"class kuzu_logical_type",id:"class-kuzu_logical_type",level:2},{value:"class kuzu_date_t",id:"class-kuzu_date_t",level:2},{value:"class kuzu_interval_t",id:"class-kuzu_interval_t",level:2},{value:"class kuzu_timestamp_t",id:"class-kuzu_timestamp_t",level:2},{value:"class kuzu_internal_id_t",id:"class-kuzu_internal_id_t",level:2}],o={toc:s},c="wrapper";function d(e){let{components:t,...a}=e;return(0,l.kt)(c,(0,n.Z)({},o,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"class-kuzu_logical_type"},"class kuzu_logical_type"),(0,l.kt)("p",null,"kuzu_logical_type is the kuzu internal representation of data types.  "),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"class-kuzu_date_t"},"class kuzu_date_t"),(0,l.kt)("p",null,"kuzu internal date type which stores the number of days since 1970-01-01 00:00:00 UTC.  "),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"class-kuzu_interval_t"},"class kuzu_interval_t"),(0,l.kt)("p",null,"kuzu internal interval type which stores the months, days and microseconds.  "),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"class-kuzu_timestamp_t"},"class kuzu_timestamp_t"),(0,l.kt)("p",null,"kuzu internal timestamp type which stores the number of microseconds since 1970-01-01 00:00:00 UTC.  "),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"class-kuzu_internal_id_t"},"class kuzu_internal_id_t"),(0,l.kt)("p",null,"kuzu internal internal_id type which stores the table_id and offset of a node/rel.  "),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API kuzu_logical_type* kuzu_data_type_clone (kuzu_logical_type * data_type)\n")),(0,l.kt)("p",null,"Creates a new data type instance by cloning the given data type instance. "),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data_type")," The data type instance to clone. ")),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API kuzu_logical_type* kuzu_data_type_create (kuzu_data_type_id id, kuzu_logical_type * child_type, uint64_t fixed_num_elements_in_list)\n")),(0,l.kt)("p",null,"Creates a data type instance with the given id, childType and fixed_num_elements_in_list. Caller is responsible for destroying the returned data type instance. "),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"id")," The enum type id of the datatype to create. "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"child_type")," The child type of the datatype to create(only used for nested dataTypes). "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fixed_num_elements_in_list")," The fixed number of elements in the list(only used for FIXED_LIST). ")),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API void kuzu_data_type_destroy (kuzu_logical_type * data_type)\n")),(0,l.kt)("p",null,"Destroys the given data type instance. "),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data_type")," The data type instance to destroy. ")),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API bool kuzu_data_type_equals (kuzu_logical_type * data_type1, kuzu_logical_type * data_type2)\n")),(0,l.kt)("p",null,"Returns true if the given data type is equal to the other data type, false otherwise. "),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data_type1")," The first data type instance to compare. "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data_type2")," The second data type instance to compare. ")),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API uint64_t kuzu_data_type_get_fixed_num_elements_in_list (kuzu_logical_type * data_type)\n")),(0,l.kt)("p",null,"Returns the number of elements per list for fixedSizeList. "),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data_type")," The data type instance to return. ")),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c++"},"KUZU_C_API kuzu_data_type_id kuzu_data_type_get_id (kuzu_logical_type * data_type)\n")),(0,l.kt)("p",null,"Returns the enum type id of the given data type. "),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data_type")," The data type instance to return. ")),(0,l.kt)("hr",null))}d.isMDXComponent=!0}}]);