"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[8506],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,h=d["".concat(u,".").concat(m)]||d[m]||c[m]||o;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5429:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={title:"Command Line",sidebar_position:0},i=void 0,l={unversionedId:"getting-started/cli",id:"getting-started/cli",title:"Command Line",description:"Downloading",source:"@site/docs/getting-started/cli.md",sourceDirName:"getting-started",slug:"/getting-started/cli",permalink:"/docusaurus/getting-started/cli",draft:!1,tags:[],version:"current",sidebarPosition:0,frontMatter:{title:"Command Line",sidebar_position:0},sidebar:"docSidebar",previous:{title:"Getting Started",permalink:"/docusaurus/getting-started/"},next:{title:"Python",permalink:"/docusaurus/getting-started/python"}},u={},s=[{value:"Downloading",id:"downloading",level:2},{value:"Running the CLI",id:"running-the-cli",level:2}],p={toc:s},d="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"downloading"},"Downloading"),(0,a.kt)("p",null,"The K\xf9zu Command Line Interface (CLI) is a unified, dependency-free executable, precompiled for Mac, Linux and Windows systems.\nThe CLI can be downloaded ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/kuzudb/kuzu/releases/latest"},"here")," (search for ",(0,a.kt)("inlineCode",{parentName:"p"},"Assets")," on the page and download the correct ",(0,a.kt)("inlineCode",{parentName:"p"},"kuzu_cli-xxx.zip")," file for your platform). After the CLI is downloaded and extracted into a directory, you can navigate the directory via your terminal, and set the execute permissions with ",(0,a.kt)("inlineCode",{parentName:"p"},"chmod +x kuzu"),". "),(0,a.kt)("h2",{id:"running-the-cli"},"Running the CLI"),(0,a.kt)("p",null,"You are now ready to run the executable using ",(0,a.kt)("inlineCode",{parentName:"p"},"./kuzu <db_path>"),", where ",(0,a.kt)("inlineCode",{parentName:"p"},"<db_path>")," is the directory for the database files. This path can either point to an existing database or a yet-to-be-created directory, in which case K\xf9zu will automatically create the directory and initialize an empty database for you.\nIf you input ",(0,a.kt)("inlineCode",{parentName:"p"},"test")," as your ",(0,a.kt)("inlineCode",{parentName:"p"},"<db_path>"),", you should see the following prompt:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"./kuzu_shell ./test\nkuzu> \n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"Note for MacOS users to give permission to run the CLI:"))," When you download the CLI to a MacOS platform,\nMacOS will initially not allow you to run the CLI as it is a binary not downloaded from an AppStore or\nApple-identified developer. You need to give explicit permissions to\nrun the CLI binary.  After you try to run the binary for the first time, it will be blocked.\nThen, navigate to ",(0,a.kt)("inlineCode",{parentName:"p"},"System Settings > Privacy & Security"),". Next, depending on your MacOS version, you have to either go\nto the ",(0,a.kt)("inlineCode",{parentName:"p"},"General")," tab or ",(0,a.kt)("inlineCode",{parentName:"p"},"Security")," section and you will see a warning: ",(0,a.kt)("inlineCode",{parentName:"p"},'"kuzu" was blocked from use because it is not from an\nidentified developer'),". Next to this warning will be an ",(0,a.kt)("inlineCode",{parentName:"p"},"Allow Anyway")," button. Click this button to allow the CLI binary to run."),(0,a.kt)("p",null,"Upon launching the CLI, you can enter a Cypher query and press enter to execute it. The instructions below outline how to load nodes and rels from CSV files and how to run a Cypher query:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Create the schema:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"kuzu> CREATE NODE TABLE User(name STRING, age INT64, PRIMARY KEY (name));\n\n-------------------------------------\n| NodeTable: User has been created. |\n-------------------------------------\n\nkuzu> CREATE REL TABLE Follows(FROM User TO User, since INT64);\n\n---------------------------------------\n| RelTable: Follows has been created. |\n---------------------------------------\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Load data (be sure to replace ",(0,a.kt)("inlineCode",{parentName:"li"},'"user.csv"')," with the full path to your csv file and use quotation marks around the path):")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'kuzu> COPY User FROM "user.csv";\n\n---------------------------------------------------------\n| 4 number of nodes has been copied to nodeTable: User. |\n---------------------------------------------------------\n\nkuzu> COPY Follows FROM "follows.csv";\n\n----------------------------------------------------------\n| 4 number of rels has been copied to relTable: Follows. |\n----------------------------------------------------------\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Execute a simple query:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"kuzu> MATCH (a:User)-[f:Follows]->(b:User) RETURN a.name, b.name, f.since;\n>> Number of output tuples: 4\n\n-------------------------------\n| a.name  | b.name  | f.since |\n-------------------------------\n| Adam    | Karissa | 2020    |\n-------------------------------\n| Adam    | Zhang   | 2020    |\n-------------------------------\n| Karissa | Zhang   | 2021    |\n-------------------------------\n| Zhang   | Noura   | 2022    |\n-------------------------------\n")))}c.isMDXComponent=!0}}]);