"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[9486],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,f=u["".concat(l,".").concat(m)]||u[m]||c[m]||o;return n?r.createElement(f,i(i({ref:t},d),{},{components:n})):r.createElement(f,i({ref:t},d))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8505:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={title:"Operating System Compatibility",sidebar_position:20},i=void 0,s={unversionedId:"getting-started/os",id:"getting-started/os",title:"Operating System Compatibility",description:"CLI, C and C++",source:"@site/docs/getting-started/os.md",sourceDirName:"getting-started",slug:"/getting-started/os",permalink:"/docusaurus/getting-started/os",draft:!1,tags:[],version:"current",sidebarPosition:20,frontMatter:{title:"Operating System Compatibility",sidebar_position:20},sidebar:"docSidebar",previous:{title:"Java",permalink:"/docusaurus/getting-started/java"},next:{title:"Data Import",permalink:"/docusaurus/data-import/"}},l={},p=[{value:"CLI, C and C++",id:"cli-c-and-c",level:2},{value:"Python",id:"python",level:2},{value:"Node.js",id:"nodejs",level:2},{value:"Java",id:"java",level:2},{value:"Rust",id:"rust",level:2}],d={toc:p},u="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"cli-c-and-c"},"CLI, C and C++"),(0,a.kt)("p",null,"K\xf9zu CLI, C and C++ API are pre-compiled for ",(0,a.kt)("strong",{parentName:"p"},"macOS >= 11.0")," as a universal binary that supports both Intel-based Macs and ARM-based Macs. For Linux, K\xf9zu CLI, C and C++ API are pre-compiled for both x86-64 and aarch64 architecture and supports most modern Linux distros such as ",(0,a.kt)("strong",{parentName:"p"},"RHEL/CentOS/Rocky Linux/Oracle Linux 8.0 or later and Ubuntu 20.04 or later"),". For Windows, K\xf9zu CLI, C and C++ API works on Windows 10 and 11."),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("p",null,"K\xf9zu Python API wheels has been pre-compiled for ",(0,a.kt)("strong",{parentName:"p"},"CPython 3.7 to 3.11"),". For macOS, the OS compatibility is the same as the pre-compiled CLI, C and C++ API (i.e. macOS >= 11.0). For Linux, the pre-compiled wheels for x86-64 follows ",(0,a.kt)("inlineCode",{parentName:"p"},"manylinux2014_x86_64")," standard; the pre-compiled wheels for aarch64 follows ",(0,a.kt)("inlineCode",{parentName:"p"},"manylinux_2_28_aarch64")," standard. Please refer to this ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/pypa/manylinux"},"link for more information on manylinux"),". For Windows, the OS compatibility is the same as the pre-compiled CLI and C++ API (i.e. Windows 10 and 11)."),(0,a.kt)("h2",{id:"nodejs"},"Node.js"),(0,a.kt)("p",null,"K\xf9zu Node.js API is based on ",(0,a.kt)("strong",{parentName:"p"},"Node-API version 5"),". For a list of compatible Node.js versions, please refer to ",(0,a.kt)("a",{parentName:"p",href:"https://nodejs.org/api/n-api.html#node-api-version-matrix"},"the official documentation"),". The native module is pre-compiled for all supported platforms and will be automatically installed when you run ",(0,a.kt)("inlineCode",{parentName:"p"},"npm install kuzu"),". The OS compatibility is the same as the pre-compiled CLI, C and C++ API."),(0,a.kt)("h2",{id:"java"},"Java"),(0,a.kt)("p",null,"K\xf9zu Java API is compatible with ",(0,a.kt)("strong",{parentName:"p"},"Java 8+"),". The OS compatibility is the same as C/C++ APIs. The Java API is distributed as a JAR file with pre-compiled native libraries for all supported platforms bundled inside. It does not require any additional dependencies."),(0,a.kt)("h2",{id:"rust"},"Rust"),(0,a.kt)("p",null,"The K\xf9zu Rust API links against K\xf9zu's C++ API. By default it compiles the C++ library from source, and the build process has been tested on Windows using MSVC, and macOS and Linux using GCC. If linking to the release binaries (see ",(0,a.kt)("a",{parentName:"p",href:"https://docs.rs/kuzu/latest/kuzu/#building"},"here"),") the restrictions mentioned for the C++ API above apply."))}c.isMDXComponent=!0}}]);