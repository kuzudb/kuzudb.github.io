"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[8482],{3905:(e,n,a)=>{a.d(n,{Zo:()=>c,kt:()=>f});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=t.createContext({}),u=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},c=function(e){var n=u(e.components);return t.createElement(s.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(a),m=r,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return a?t.createElement(f,i(i({ref:n},c),{},{components:a})):t.createElement(f,i({ref:n},c))}));function f(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var u=2;u<o;u++)i[u]=a[u];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}m.displayName="MDXCreateElement"},913:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var t=a(7462),r=(a(7294),a(3905));const o={title:"Scan",sidebar_position:11,description:"Direct scan over file"},i="Scan",l={unversionedId:"cypher/load_from",id:"cypher/load_from",title:"Scan",description:"Direct scan over file",source:"@site/docs/cypher/load_from.md",sourceDirName:"cypher",slug:"/cypher/load_from",permalink:"/docusaurus/cypher/load_from",draft:!1,tags:[],version:"current",sidebarPosition:11,frontMatter:{title:"Scan",sidebar_position:11,description:"Direct scan over file"},sidebar:"docSidebar",previous:{title:"Call",permalink:"/docusaurus/cypher/query-clauses/call"},next:{title:"Copy",permalink:"/docusaurus/cypher/copy"}},s={},u=[{value:"Example usage",id:"example-usage",level:2},{value:"Filtering/aggregating",id:"filteringaggregating",level:3},{value:"Create nodes from input file",id:"create-nodes-from-input-file",level:3},{value:"Reorder and subset columns",id:"reorder-and-subset-columns",level:3},{value:"Enforce Schema",id:"enforce-schema",level:3},{value:"Scan Data Formats",id:"scan-data-formats",level:2},{value:"CSV",id:"csv",level:3},{value:"Parquet",id:"parquet",level:3},{value:"Pandas",id:"pandas",level:3}],c={toc:u},p="wrapper";function d(e){let{components:n,...a}=e;return(0,r.kt)(p,(0,t.Z)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"scan"},"Scan"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"LOAD FROM")," clause, which performs a direct scan over an input file without loading it into the database.\nThis clause can be useful when performing quick testing to extract a small sample of a larger file\nto load into a node table, or to perform simple transformation tasks like rearranging column order."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"LOAD FROM")," is designed to be used in the exact same way as ",(0,r.kt)("inlineCode",{parentName:"p"},"MATCH"),", meaning that it can be followed\nby arbitrary clauses like ",(0,r.kt)("inlineCode",{parentName:"p"},"WHERE, RETURN, CREATE, ..."),"."),(0,r.kt)("h2",{id:"example-usage"},"Example usage"),(0,r.kt)("p",null,"Some example usage is as follows."),(0,r.kt)("h3",{id:"filteringaggregating"},"Filtering/aggregating"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'LOAD FROM "user.csv" (header = true)\nWHERE to_int64(age) > 25 \nRETURN COUNT(*);\n----------------\n| COUNT_STAR() |\n----------------\n| 3            |\n----------------\n')),(0,r.kt)("h3",{id:"create-nodes-from-input-file"},"Create nodes from input file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'LOAD FROM "user.csv" (header = true)\nCREATE (:User {name: name, age:to_int64(age)});\n\nMATCH (u:User) RETURN u;\n----------------------------------------------------\n| u                                                |\n----------------------------------------------------\n| {_ID: 0:0, _LABEL: User, name: Adam, age: 30}    |\n----------------------------------------------------\n| {_ID: 0:1, _LABEL: User, name: Karissa, age: 40} |\n----------------------------------------------------\n| {_ID: 0:2, _LABEL: User, name: Zhang, age: 50}   |\n----------------------------------------------------\n| {_ID: 0:3, _LABEL: User, name: Noura, age: 25}   |\n----------------------------------------------------\n')),(0,r.kt)("h3",{id:"reorder-and-subset-columns"},"Reorder and subset columns"),(0,r.kt)("p",null,"You can also use the scan functionality to reorder and subset columns from a given dataset. For\nexample, the following query will return just the ",(0,r.kt)("inlineCode",{parentName:"p"},"age")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," in that order, even if the\ninput file has more columns specified in a different order."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'LOAD FROM "user.csv" (header = true)\nRETURN age, name LIMIT 3;\n\n--------------------\n| age | name       |\n--------------------\n| 30  | Adam       |\n--------------------\n| 40  | Karissa    |\n--------------------\n| 50  | Zhang      |\n--------------------\n')),(0,r.kt)("h3",{id:"enforce-schema"},"Enforce Schema"),(0,r.kt)("p",null,"To enforce a specific schema when reading CSV, user can use ",(0,r.kt)("inlineCode",{parentName:"p"},"LOAD WITH HEADERS (<name> <dataType>, ...) FROM ...")),(0,r.kt)("p",null,"E.g. the following query will bind first column to ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," to the STRING type and second column to ",(0,r.kt)("inlineCode",{parentName:"p"},"age")," to the INT64 type."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"LOAD WITH HEADERS (name STRING, age INT64) FROM \"user.csv\" (header = true)\nWHERE name =~ 'Adam*'\nRETURN name, age;\n--------------\n| name | age |\n--------------\n| Adam | 30  |\n--------------\n")),(0,r.kt)("admonition",{title:"Note",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If the header is specified manually:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"K\xf9zu will throw an exception if the given header does not the match number of columns in the file."),(0,r.kt)("li",{parentName:"ul"},"K\xf9zu will always try to cast to the type specified header. An exception will be thrown if the\ncasting operation fails."))),(0,r.kt)("h2",{id:"scan-data-formats"},"Scan Data Formats"),(0,r.kt)("h3",{id:"csv"},"CSV"),(0,r.kt)("p",null,"When loading from a CSV file, user can specify the same set of configuration as ",(0,r.kt)("a",{parentName:"p",href:"/docusaurus/data-import/csv-import"},"importing from CSV through COPY"),"."),(0,r.kt)("p",null,"If no header information is available, K\xf9zu will use the default cofiguration and parse each column as ",(0,r.kt)("inlineCode",{parentName:"p"},"STRING")," type with name ",(0,r.kt)("inlineCode",{parentName:"p"},"column0, column1, ..."),". E.g."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'LOAD FROM "test.csv" RETURN *;\n-----------\n| column0 |\n-----------\n| a       |\n-----------\n| b       |\n-----------\n')),(0,r.kt)("p",null,"If header information is available in the file, K\xf9zu will parse the header and use data types and names as specified in the header. E.g."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'LOAD FROM "user.csv" (header = true) RETURN *;\n-----------------\n| name    | age |\n-----------------\n| Adam    | 30  |\n-----------------\n| Karissa | 40  |\n-----------------\n| Zhang   | 50  |\n-----------------\n| Noura   | 25  |\n-----------------\n')),(0,r.kt)("h3",{id:"parquet"},"Parquet"),(0,r.kt)("p",null,"Since parquet file contains schema, K\xf9zu will always use parquet schema information. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'LOAD FROM "user.parquet" RETURN *;\n----------------\n| f0      | f1 |\n----------------\n| Adam    | 30 |\n----------------\n| Karissa | 40 |\n----------------\n| Zhang   | 50 |\n----------------\n| Noura   | 25 |\n----------------\n')),(0,r.kt)("h3",{id:"pandas"},"Pandas"),(0,r.kt)("p",null,"K\xf9zu allows zero-copy access to Pandas DataFrames. The data types within a Pandas DataFrame will be used to infer the schema of the data."),(0,r.kt)("p",null,"Because Pandas is a Python-only DataFrame library, the following example is for Python users. We first create a Pandas\nDataFrame as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'import kuzu\nimport pandas as pd\n\ndb = kuzu.Database("persons")\nconn = kuzu.Connection(db)\n\ndf = pd.DataFrame({\n    "name": ["Adam", "Karissa", "Zhang", "Noura"],\n    "age": [30, 40, 50, 25]\n})\n')),(0,r.kt)("p",null,"The Pandas DataFrame can be scanned using the LOAD FROM clause just like we would from\nan external file. The data access occurs in a zero-copy manner, meaning that K\xf9zu natively scans\nthe underlying Pandas data objects."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'result = conn.execute("LOAD FROM df RETURN *;")\nprint(result.get_as_df())\n\n# Result\n      name  age\n0     Adam   30\n1  Karissa   40\n2    Zhang   50\n3    Noura   25\n')))}d.isMDXComponent=!0}}]);