"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[4503],{3905:(e,t,r)=>{r.d(t,{Zo:()=>o,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function u(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),i=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):u(u({},t),e)),r},o=function(e){var t=i(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,o=p(e,["components","mdxType","originalType","parentName"]),c=i(r),k=a,d=c["".concat(s,".").concat(k)]||c[k]||m[k]||l;return r?n.createElement(d,u(u({ref:t},o),{},{components:r})):n.createElement(d,u({ref:t},o))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,u=new Array(l);u[0]=k;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[c]="string"==typeof e?e:a,u[1]=p;for(var i=2;i<l;i++)u[i]=r[i];return n.createElement.apply(null,u)}return n.createElement.apply(null,r)}k.displayName="MDXCreateElement"},3067:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>u,default:()=>m,frontMatter:()=>l,metadata:()=>p,toc:()=>i});var n=r(7462),a=(r(7294),r(3905));const l={sidebar_position:2},u="QueryResult and QuerySummary",p={unversionedId:"client-apis/cpp-api/query-result",id:"client-apis/cpp-api/query-result",title:"QueryResult and QuerySummary",description:"QueryResult captures all information related to the execution of a query. Each returned tuple is wrapped into a FlatTuple where each entry is wrapped as a Value.",source:"@site/docs/client-apis/cpp-api/query-result.md",sourceDirName:"client-apis/cpp-api",slug:"/client-apis/cpp-api/query-result",permalink:"/docusaurus/client-apis/cpp-api/query-result",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/client-apis/cpp-api/query-result.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Connection & Querying",permalink:"/docusaurus/client-apis/cpp-api/connection"},next:{title:"PreparedStatement",permalink:"/docusaurus/client-apis/cpp-api/prepared-statement"}},s={},i=[{value:"Example",id:"example",level:2},{value:"Available APIs",id:"available-apis",level:2},{value:"class kuzu::main::QueryResult",id:"class-kuzumainqueryresult",level:2},{value:"class kuzu::main::QuerySummary",id:"class-kuzumainquerysummary",level:2}],o={toc:i},c="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},o,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"queryresult-and-querysummary"},"QueryResult and QuerySummary"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"QueryResult")," captures all information related to the execution of a query. Each returned tuple is wrapped into a ",(0,a.kt)("a",{parentName:"p",href:"/docusaurus/client-apis/cpp-api/flat-tuple"},"FlatTuple")," where each entry is wrapped as a ",(0,a.kt)("a",{parentName:"p",href:"/docusaurus/client-apis/cpp-api/value"},"Value"),".\nYou can also obtain a ",(0,a.kt)("inlineCode",{parentName:"p"},"QuerySummary")," from a QueryResult, to learn profiling information, such as execution time, about the query you executed."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'unique_ptr<QueryResult> result = connection.query("MATCH (a:person) RETURN COUNT(*);");\nif (!result->isSuccess()) {\n    std::cout << result->getErrorMessage() << endl;\n}\nwhile (result->hasNext()) {\n    auto row = result->getNext();\n    std::cout << row->getResultValue(0)->getInt64Val() << std::endl;\n}\n')),(0,a.kt)("h2",{id:"available-apis"},"Available APIs"),(0,a.kt)("h2",{id:"class-kuzumainqueryresult"},"class kuzu::main::QueryResult"),(0,a.kt)("p",null,"QueryResult stores the result of a query execution.  "),(0,a.kt)("hr",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"getColumnDataTypes")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"std::vector<common::DataType> getColumnDataTypes ()\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"dataType of each column in query result. ")),(0,a.kt)("hr",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"getColumnNames")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"std::vector<std::string> getColumnNames ()\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"name of each column in query result. ")),(0,a.kt)("hr",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"getErrorMessage")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"std::string getErrorMessage ()\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"error message of the query execution if the query fails. ")),(0,a.kt)("hr",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"getNext")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"std::shared_ptr<processor::FlatTuple> getNext ()\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"next flat tuple in the query result. ")),(0,a.kt)("hr",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"getNumColumns")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"size_t getNumColumns ()\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"number of columns in query result. ")),(0,a.kt)("hr",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"getNumTuples")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"uint64_t getNumTuples ()\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"num of tuples in query result. ")),(0,a.kt)("hr",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"getQuerySummary")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"QuerySummary* getQuerySummary ()\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"query summary which stores the execution time, compiling time, plan and query options. ")),(0,a.kt)("hr",null),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"bool hasNext ()\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"whether there are more tuples to read. ")),(0,a.kt)("hr",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"isSuccess")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"bool isSuccess ()\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"query is executed successfully or not. ")),(0,a.kt)("hr",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"writeToCSV")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"void writeToCSV (const std::string & fileName, char delimiter = ',', char escapeCharacter = ''', char newline = 'n')\n")),(0,a.kt)("p",null,"writes the query result to a csv file. "),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Parameters")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"fileName")," name of the csv file. "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"delimiter")," delimiter of the csv file. "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"escapeCharacter")," escape character of the csv file. "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"newline")," newline character of the csv file. ")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"class-kuzumainquerysummary"},"class kuzu::main::QuerySummary"),(0,a.kt)("p",null,"QuerySummary stores the execution time, plan, compiling time and query options of a query.  "),(0,a.kt)("hr",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"getCompilingTime")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"double getCompilingTime ()\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"query compiling time. ")),(0,a.kt)("hr",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"getExecutionTime")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"double getExecutionTime ()\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"query execution time. ")),(0,a.kt)("hr",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"getPlan")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"std::string getPlan ()\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"physical plan for query in string format. ")),(0,a.kt)("hr",null))}m.isMDXComponent=!0}}]);