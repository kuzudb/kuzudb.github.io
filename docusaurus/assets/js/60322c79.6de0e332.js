"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[768],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>k});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function p(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?p(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},p=Object.keys(e);for(r=0;r<p.length;r++)t=p[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(r=0;r<p.length;r++)t=p[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),i=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=i(e.components);return r.createElement(s.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,p=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=i(t),d=a,k=c["".concat(s,".").concat(d)]||c[d]||m[d]||p;return t?r.createElement(k,l(l({ref:n},u),{},{components:t})):r.createElement(k,l({ref:n},u))}));function k(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var p=t.length,l=new Array(p);l[0]=d;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[c]="string"==typeof e?e:a,l[1]=o;for(var i=2;i<p;i++)l[i]=t[i];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1781:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>p,metadata:()=>o,toc:()=>i});var r=t(7462),a=(t(7294),t(3905));const p={title:"Path Functions",description:"Path functions are used to manipulate path."},l="Path Functions",o={unversionedId:"cypher/expressions/path_functions",id:"cypher/expressions/path_functions",title:"Path Functions",description:"Path functions are used to manipulate path.",source:"@site/docs/cypher/expressions/path_functions.md",sourceDirName:"cypher/expressions",slug:"/cypher/expressions/path_functions",permalink:"/docusaurus/cypher/expressions/path_functions",draft:!1,tags:[],version:"current",frontMatter:{title:"Path Functions",description:"Path functions are used to manipulate path."},sidebar:"tutorialSidebar",previous:{title:"Numeric Functions",permalink:"/docusaurus/cypher/expressions/numeric-functions"},next:{title:"Pattern Matching Functions",permalink:"/docusaurus/cypher/expressions/pattern-matching"}},s={},i=[{value:"NODES",id:"nodes",level:3},{value:"RELS",id:"rels",level:3},{value:"PROPERTIES",id:"properties",level:3},{value:"IS_TRAIL",id:"is_trail",level:3},{value:"IS_ACYCLIC",id:"is_acyclic",level:3}],u={toc:i},c="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(c,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"path-functions"},"Path Functions"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Function"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"NODES"),(0,a.kt)("td",{parentName:"tr",align:null},"returns all nodes from path")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"RELS"),(0,a.kt)("td",{parentName:"tr",align:null},"returns all rels from path")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"PROPERTIES"),(0,a.kt)("td",{parentName:"tr",align:null},"return given property from nodes/rels")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"IS_TRAIL"),(0,a.kt)("td",{parentName:"tr",align:null},"check if path contains repeated rels")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"IS_ACYCLIC"),(0,a.kt)("td",{parentName:"tr",align:null},"check if path contains repeated nodes")))),(0,a.kt)("h3",{id:"nodes"},"NODES"),(0,a.kt)("p",null,"Returns all nodes from path."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Input Type"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"PATH")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Output Type"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"LIST[NODE]")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"MATCH p = (a:User)-[:Follows*1..2]->(:User) \nWHERE a.name = 'Adam' \nRETURN nodes(p);\n")),(0,a.kt)("p",null,"Output"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"------------------------------------------------------------------------------------\n| NODES(p)                                                                         |\n------------------------------------------------------------------------------------\n| [{_ID: 0:0, _LABEL: User, name: Adam, age: 30},{_ID: 0:1, _LABEL: User, name:... |\n------------------------------------------------------------------------------------\n| [{_ID: 0:0, _LABEL: User, name: Adam, age: 30},{_ID: 0:1, _LABEL: User, name:... |\n------------------------------------------------------------------------------------\n| [{_ID: 0:0, _LABEL: User, name: Adam, age: 30},{_ID: 0:2, _LABEL: User, name:... |\n------------------------------------------------------------------------------------\n| [{_ID: 0:0, _LABEL: User, name: Adam, age: 30},{_ID: 0:2, _LABEL: User, name:... |\n------------------------------------------------------------------------------------\n")),(0,a.kt)("h3",{id:"rels"},"RELS"),(0,a.kt)("p",null,"Returns all rels from path."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Input Type"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"PATH")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Output Type"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"LIST[REL]")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"MATCH p = (a:User)-[:Follows*1..2]->(:User) \nWHERE a.name = 'Adam' \nRETURN rels(p);\n")),(0,a.kt)("p",null,"Output"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"------------------------------------------------------------------------------------\n| RELS(p)                                                                          |\n------------------------------------------------------------------------------------\n| [(0:0)-{_LABEL: Follows, _ID: 2:0, since: 2020}->(0:1)]                          |\n------------------------------------------------------------------------------------\n| [(0:0)-{_LABEL: Follows, _ID: 2:0, since: 2020}->(0:1),(0:1)-{_LABEL: Follows... |\n------------------------------------------------------------------------------------\n| [(0:0)-{_LABEL: Follows, _ID: 2:1, since: 2020}->(0:2)]                          |\n------------------------------------------------------------------------------------\n| [(0:0)-{_LABEL: Follows, _ID: 2:1, since: 2020}->(0:2),(0:2)-{_LABEL: Follows... |\n------------------------------------------------------------------------------------\n")),(0,a.kt)("h3",{id:"properties"},"PROPERTIES"),(0,a.kt)("p",null,"Return given property from nodes/rels."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Input Type"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"LIST[NODE/REL]"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"STRING")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"MATCH p = (a:User)-[:Follows*1..2]->(:User) \nWHERE a.name = 'Adam' \nRETURN properties(nodes(p), 'name') AS name, properties(rels(p), 'since') AS since;\n")),(0,a.kt)("p",null,"Output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"--------------------------------------\n| name                 | since       |\n--------------------------------------\n| [Adam,Karissa]       | [2020]      |\n--------------------------------------\n| [Adam,Karissa,Zhang] | [2020,2021] |\n--------------------------------------\n| [Adam,Zhang]         | [2020]      |\n--------------------------------------\n| [Adam,Zhang,Noura]   | [2020,2022] |\n--------------------------------------\n")),(0,a.kt)("h3",{id:"is_trail"},"IS_TRAIL"),(0,a.kt)("p",null,"Check if path contains repeated relationships."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Input Type"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"PATH")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"MATCH p = (a:User)-[:Follows*2..2]-(b:User) \nWHERE a.name='Adam' \nRETURN properties(rels(p), '_id'), is_trail(p);\n")),(0,a.kt)("p",null,"Output"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"-----------------------------------------\n| PROPERTIES(RELS(p),_id) | IS_TRAIL(p) |\n-----------------------------------------\n| [2:1,2:1]               | False       |\n-----------------------------------------\n| [2:0,2:0]               | False       |\n-----------------------------------------\n| [2:1,2:2]               | True        |\n-----------------------------------------\n| [2:0,2:2]               | True        |\n-----------------------------------------\n| [2:1,2:3]               | True        |\n-----------------------------------------\n")),(0,a.kt)("h3",{id:"is_acyclic"},"IS_ACYCLIC"),(0,a.kt)("p",null,"Check if path contains repeated nodes."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Input Type"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"PATH")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"MATCH p = (a:User)-[:Follows*2..2]-(b:User) \nWHERE a.name='Adam' \nRETURN properties(nodes(p), 'name'), is_acyclic(p);\n")),(0,a.kt)("p",null,"Output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"---------------------------------------------\n| PROPERTIES(NODES(p),name) | IS_ACYCLIC(p) |\n---------------------------------------------\n| [Adam,Zhang,Adam]         | False         |\n---------------------------------------------\n| [Adam,Karissa,Adam]       | False         |\n---------------------------------------------\n| [Adam,Zhang,Karissa]      | True          |\n---------------------------------------------\n| [Adam,Karissa,Zhang]      | True          |\n---------------------------------------------\n| [Adam,Zhang,Noura]        | True          |\n---------------------------------------------\n")))}m.isMDXComponent=!0}}]);