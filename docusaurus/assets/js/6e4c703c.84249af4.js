"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[4299],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>y});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(n),m=r,y=c["".concat(p,".").concat(m)]||c[m]||d[m]||i;return n?a.createElement(y,o(o({ref:t},u),{},{components:n})):a.createElement(y,o({ref:t},u))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2609:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const i={title:"List",sidebar_position:4},o="LIST",l={unversionedId:"cypher/data-types/list",id:"cypher/data-types/list",title:"List",description:"K\xf9zu supports two LIST data types: variable-size list VAR-LIST and fixed-size FIXED-LIST.",source:"@site/docs/cypher/data-types/list.md",sourceDirName:"cypher/data-types",slug:"/cypher/data-types/list",permalink:"/docusaurus/cypher/data-types/list",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"List",sidebar_position:4},sidebar:"docSidebar",previous:{title:"Interval",permalink:"/docusaurus/cypher/data-types/interval"},next:{title:"Node",permalink:"/docusaurus/cypher/data-types/node"}},p={},s=[{value:"<code>VAR-LIST</code> creation",id:"var-list-creation",level:3},{value:"<code>VAR-LIST</code> creation with function",id:"var-list-creation-with-function",level:3},{value:"UNWIND&#39;ing <code>VAR-LIST</code>",id:"unwinding-var-list",level:3}],u={toc:s},c="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"list"},"LIST"),(0,r.kt)("p",null,"K\xf9zu supports two LIST data types: variable-size list ",(0,r.kt)("inlineCode",{parentName:"p"},"VAR-LIST")," and fixed-size ",(0,r.kt)("inlineCode",{parentName:"p"},"FIXED-LIST."),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"LIST")," data types include values of a single data type. The data type of values within a ",(0,r.kt)("inlineCode",{parentName:"p"},"LIST")," is declared before a set of brackets in DDL.\nFor example, ",(0,r.kt)("inlineCode",{parentName:"p"},"STRING[]")," declares a ",(0,r.kt)("inlineCode",{parentName:"p"},"(VAR-)LIST")," of STRING values."),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"VAR-LIST")," type can contain arbitrary number of values with the same type. VAR-LISTS can be of any\ntype K\xf9zu supports including nested and complex type. For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"STRING[][]")," is\n",(0,r.kt)("inlineCode",{parentName:"p"},"VAR-LIST")," of ",(0,r.kt)("inlineCode",{parentName:"p"},"VAR-LIST")," of STRING values. Similarly, ",(0,r.kt)("inlineCode",{parentName:"p"},"MAP(STRING, STRING)[]"),"\nis a ",(0,r.kt)("inlineCode",{parentName:"p"},"VAR-LIST")," of ",(0,r.kt)("inlineCode",{parentName:"p"},"MAP(STRING, STRING)")," values."),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"FIXED-LIST")," type can contain fixed number of values with the same numeric type. For example,\n",(0,r.kt)("inlineCode",{parentName:"p"},"INT64[5]")," is a ",(0,r.kt)("inlineCode",{parentName:"p"},"FIXED-LIST")," of 5 INT64 values.  FIXED-LIST is an ",(0,r.kt)("strong",{parentName:"p"},"experimental")," feature designed\nfor K\xf9zu's ",(0,r.kt)("a",{parentName:"p",href:"https://kuzudb.com/docusaurus/getting-started/python/#colab-notebooks"},"Pytorch Geometric integration"),". "),(0,r.kt)("p",null,"The below table summarizes VAR-LIST and FIXED-LIST data types and how to define them in DDL statements."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,r.kt)("th",{parentName:"tr",align:null},"DDL Definition"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"VAR-LIST"),(0,r.kt)("td",{parentName:"tr",align:null},"INT64[]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"FIXED-LIST"),(0,r.kt)("td",{parentName:"tr",align:null},"INT64","[5]")))),(0,r.kt)("p",null,"K\xf9zu does not support operations on ",(0,r.kt)("inlineCode",{parentName:"p"},"FIXED-LIST")," values (except casting values to ",(0,r.kt)("inlineCode",{parentName:"p"},"FIXED-LIST"),").\nInstead, K\xf9zu support several operations on VAR-LIST, which we cover below through several examples:"),(0,r.kt)("h3",{id:"var-list-creation"},(0,r.kt)("inlineCode",{parentName:"h3"},"VAR-LIST")," creation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'RETURN ["Alice", "Bob"] AS l;\n')),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"---------------\n| l           |\n---------------\n| [Alice,Bob] |\n---------------\n")),(0,r.kt)("h3",{id:"var-list-creation-with-function"},(0,r.kt)("inlineCode",{parentName:"h3"},"VAR-LIST")," creation with function"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"RETURN list_creation(1,2,3,4) AS l;\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"-------------\n| l         |\n-------------\n| [1,2,3,4] |\n-------------\n")),(0,r.kt)("h3",{id:"unwinding-var-list"},"UNWIND'ing ",(0,r.kt)("inlineCode",{parentName:"h3"},"VAR-LIST")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"UNWIND [[1,2], [3], [4, 5]] AS x \nUNWIND x as y \nRETURN y;\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"-----\n| y |\n-----\n| 1 |\n-----\n| 2 |\n-----\n| 3 |\n-----\n| 4 |\n-----\n| 5 |\n-----\n")))}d.isMDXComponent=!0}}]);