"use strict";(self.webpackChunkkuzu_docs=self.webpackChunkkuzu_docs||[]).push([[8307],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),u=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(i.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(t),h=a,f=p["".concat(i,".").concat(h)]||p[h]||d[h]||o;return t?r.createElement(f,s(s({ref:n},c),{},{components:t})):r.createElement(f,s({ref:n},c))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=h;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l[p]="string"==typeof e?e:a,s[1]=l;for(var u=2;u<o;u++)s[u]=t[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},9366:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>u,default:()=>y,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var r=t(7462),a=(t(7294),t(3905)),o=t(724);const s=t.p+"assets/images/query-result-table-view-060a8ccf7465890316a9184fb8c0b929.png",l=t.p+"assets/images/query-result-json-view-9d07dcbe571ba8801bfef2626c2a7bd0.png",i={title:"Shell Panel",sidebar_position:1},u="Shell Panel",c={unversionedId:"kuzuexplorer/shell-panel",id:"kuzuexplorer/shell-panel",title:"Shell Panel",description:"Using the Shell Panel, you can interactively issue queries to your loaded database",source:"@site/docs/kuzuexplorer/shell-panel.md",sourceDirName:"kuzuexplorer",slug:"/kuzuexplorer/shell-panel",permalink:"/docusaurus/kuzuexplorer/shell-panel",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Shell Panel",sidebar_position:1},sidebar:"docSidebar",previous:{title:"K\xf9zuExplorer",permalink:"/docusaurus/kuzuexplorer/"},next:{title:"Schema Panel",permalink:"/docusaurus/kuzuexplorer/schema-panel"}},p={},d=[],h={toc:d},f="wrapper";function y(e){let{components:n,...t}=e;return(0,a.kt)(f,(0,r.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"shell-panel"},"Shell Panel"),(0,a.kt)("p",null,"Using the Shell Panel, you can interactively issue queries to your loaded database\nand visualize the results in several different views. You issue queries by using\nthe canvases on your screen, which have a red X and green play icon on the left side.\nYou write your query on the top of a canvas and when you click the play button or press Shift+Enter,\nthe query in the canvas is issued.\nBelow is a screenshot that asks a simple query that returns all of the relationships\nand their source and destination nodes in the database. The results of the query can\nbe rendered in 3 possible ways."),(0,a.kt)("p",null,"First, query results can be rendered as a graph view as shown below."),(0,a.kt)("img",{src:o.Z}),(0,a.kt)("p",null,"There is a side panel in the graph view, which you can open and close to see the properties of\nindividual nodes and relationships you click on or hover over. The graph view is enabled\nand is the default view if the query's ",(0,a.kt)("inlineCode",{parentName:"p"},"RETURN")," statement contains node (and relationship) variables.\nFor example if the query about returned only the name property of ",(0,a.kt)("inlineCode",{parentName:"p"},"a")," nodes, i.e.,\nif the return statement was ",(0,a.kt)("inlineCode",{parentName:"p"},"RETURN a.name"),", then you could not see the results in a graph view,\nas the return values are only a column of strings. As long as one of the variables projected\nin the ",(0,a.kt)("inlineCode",{parentName:"p"},"RETURN")," statement is a node you will get by default a graph view."),(0,a.kt)("p",null,"Second, query results can be output as a table as shown below by clicking the table icon on the left hand\nside of a canvas."),(0,a.kt)("img",{src:s}),(0,a.kt)("p",null,"Finally query results can be output in JSON format as shown below by clicking the ",(0,a.kt)("inlineCode",{parentName:"p"},"</>")," icon on the\nleft hand side of a canvas."),(0,a.kt)("img",{src:l}))}y.isMDXComponent=!0},724:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/query-result-graph-view-f8e94eab1e66ff9d083d48a92ececcd1.png"}}]);